{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"APL Course A self-study introduction to Dyalog APL with exercises. This course consists of a series of short instructional notes interleaved with problem sets. The first few sessions are accompanied by video tutorials. Status The course is undergoing changes in structure and content. We do not currently recommend linking to specific pages or sections at the current time, as those links are likely to break in future updates. Getting Started If you're just starting out, you can use the TryAPL online interpreter. Put TryAPL on one half of your screen, and view the course on the other half. If you need help typing APL glyphs (e.g. \u00d7\u233f\u2373 ) then see the APL Wiki . Audience This course assumes high-school / secondary level mathematics knowledge, and some familiarity with basic programming terminology (e.g. function , variable , recursion ). It is not currently intended as a general introduction to programming, but more of a fast-track to getting up and running with modern APL. It is expected that most users will learn the basics here and leave the course to further their own learning Feedback If you have any suggestions, critcisms or praise, please create an issue .","title":"About"},{"location":"#apl-course","text":"A self-study introduction to Dyalog APL with exercises. This course consists of a series of short instructional notes interleaved with problem sets. The first few sessions are accompanied by video tutorials.","title":"APL Course"},{"location":"#status","text":"The course is undergoing changes in structure and content. We do not currently recommend linking to specific pages or sections at the current time, as those links are likely to break in future updates.","title":"Status"},{"location":"#getting-started","text":"If you're just starting out, you can use the TryAPL online interpreter. Put TryAPL on one half of your screen, and view the course on the other half. If you need help typing APL glyphs (e.g. \u00d7\u233f\u2373 ) then see the APL Wiki .","title":"Getting Started"},{"location":"#audience","text":"This course assumes high-school / secondary level mathematics knowledge, and some familiarity with basic programming terminology (e.g. function , variable , recursion ). It is not currently intended as a general introduction to programming, but more of a fast-track to getting up and running with modern APL. It is expected that most users will learn the basics here and leave the course to further their own learning","title":"Audience"},{"location":"#feedback","text":"If you have any suggestions, critcisms or praise, please create an issue .","title":"Feedback"},{"location":"Array-model/","text":"The array model Viewing array structure The default display forms of arrays can make it difficult to see why two arrays are different: 1 \u235d A simple numeric scalar 1 ,1 \u235d A 1-element vector 1 1=,1 \u235d Are their values equal? Yes 1 1\u2261,1 \u235d Are they the same? No 0 The ]box user command is a way to display arrays with extra markings which indicate the structure: ]box on -style=max 'ABCD' \u235d A 4-element vector \u250c\u2192\u2500\u2500\u2500\u2510 \u2502ABCD\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 1 4\u2374'ABCD' \u235d A 1-row matrix \u250c\u2192\u2500\u2500\u2500\u2510 \u2193ABCD\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 1 (2 3) 4 (2 2\u2374\u2395A) \u235d A 4-element nested vector \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2510 \u2502 \u2502 1 \u25022 3\u2502 4 \u2193AB\u2502 \u2502 \u2502 \u2514~\u2500\u2500\u2518 \u2502CD\u2502 \u2502 \u2502 \u2514\u2500\u2500\u2518 \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 To see what the markings mean, see the help for the ]Display user command: ]Display -?? Fundamentals of high rank arrays Cells and axes From the APL Wiki: A cell is a subarray which is formed by selecting a single index along some number of leading axes and the whole of each trailing axis. Cells are classified by their rank, which may be between 0 (scalars) and the array's rank (in which case the cell must be the entire array). Cells with rank k are called k-cells of an array. A major cell is a cell whose rank is one less than the entire array, or a 0-cell of a scalar. If the text above feels confusing, don't worry. Possibly after this chapter, and almost certainly after the next section on selecting from arrays , you will be able to read it again and say to yourself \"oh yeah, that makes sense\". What you need to know for now is that arrays are arranged like rectangles in many dimensions. The three simplest cases should feel somewhat familiar to you. 0 \u235d A scalar 0 'APL' \u235d A vector APL 0 1 2\u2218.*\u23735 \u235d A matrix 0 0 0 0 0 1 1 1 1 1 2 4 8 16 32 Now let us look at an array with 3 dimensions. We will call it a cuboid : \u2374cuboid\u21902 3\u2218.+3 4 5\u2218.\u00d74 5 6 7 2 3 4 \u2190 trailing (last) axis \u2191 leading (first) axis In the array cuboid defined above, there are 2 major cells , which are those of rank \u00af1+\u2262\u2374cuboid . 2 3 4\u2374\u2395A ABCD EFGH IJKL MNOP QRST UVWX \u22622 3 4\u2374\u2395A \u235d Tally counts the major cells 2 The dimensions of an array are also known as axes . The most major cells, the rank k-1 cells for an array of rank k , lie along the first axis. The least major cells are columns which lie along the last axis. In Dyalog, arrays can have up to 15 dimensions. For more details on the APL array model in Dyalog and other array languages, see the APL Wiki article on the array model . Now that you know how to describe the structure of an array in terms of its sub-arrays, let us look at how to apply functions to sub-arrays. Matching dimensions Experiment with the following examples. Try to describe each one in your own words. Describe how the rank operator \u237a(F\u2364r)\u2375 applies a function F in terms of \u237a and \u2375 . Do not be discouraged by longer expressions and unfamiliar symbols. To help understanding, break down the expression and try pieces of it at a time. names\u2190\u2191'Angela' 'Pete' 'Leslie' \u235d A matrix of names padded with spaces scores\u21903 6 8 'Pete '(=\u23641 1)names scores[names\u2373'Pete '] (\u2227/names(=\u23641 1)'Pete ')\u233fscores names(\u2228/\u2377\u23641)(\u2283\u233d\u2374names)\u2191'Pete' mass\u21901 3 5 8 4 pos\u21905 3\u23740 1 3 4 2 {(+\u233f\u2375)\u00f7\u2262\u2375}mass(\u00d7\u23640 2)pos \u00d7\u23640 2\u2368\u237310 Hint When applying dyadic functions using the rank operator, use the helper function ,\u2365\u2282 ravel over enclose (or {\u237a\u2375} for versions before Dyalog version 18.0) to see how arguments are paired up. For example: names(,\u2365\u2282\u23641 1)'Pete ' \u2349pos,\u2365\u2282\u23642 0\u22a2mass If you still feel stuck, continue reading below and return to these expressions later. First- and last-axis primitives Which of the following functions are affected by the rank operator \u2364 and why are the other functions not affected? \u233d \u235d Reverse \u2296 \u235d Reverse first +/ \u235d Plus reduce +\u233f \u235d Plus reduce-first Rank vs. Axis We have seen two pairs of first- and last-axis primitives. n\u21902 3\u23741 2 3 1 0 \u00af1 n 1 2 3 1 0 \u00af1 +/n \u235d Sum along the last axis 6 0 +\u233fn \u235d Sum along the first axis 2 2 2 '-'\u236a2 3\u2374'DYALOG' \u235d Catenate first --- DYA LOG '|',2 3\u2374'DYALOG' \u235d Catenate last |DYA |LOG Some functions and operators can be used along specified axes using the function axis operator which is denoted by square brackets [] (more duplicitous symbols). Axes of a 3D array Compare the behaviour of the monadic function \u2282 enclose when applied with the rank operator \u2364 versus when it is applied using bracket axis (another name for the function axis operator [] ). \u2282\u23641\u22a23 2 4\u2374\u2395A \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502ABCD\u2502EFGH\u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502IJKL\u2502MNOP\u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502QRST\u2502UVWX\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 \u2282\u23642\u22a23 2 4\u2374\u2395A \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502ABCD\u2502IJKL\u2502QRST\u2502 \u2502EFGH\u2502MNOP\u2502UVWX\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 \u2282\u23643\u22a23 2 4\u2374\u2395A \u250c\u2500\u2500\u2500\u2500\u2510 \u2502ABCD\u2502 \u2502EFGH\u2502 \u2502 \u2502 \u2502IJKL\u2502 \u2502MNOP\u2502 \u2502 \u2502 \u2502QRST\u2502 \u2502UVWX\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2282[1]\u22a23 2 4\u2374\u2395A \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502AIQ\u2502BJR\u2502CKS\u2502DLT\u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502EMU\u2502FNV\u2502GOW\u2502HPX\u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2282[2]\u22a23 2 4\u2374\u2395A \u250c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2510 \u2502AE\u2502BF\u2502CG\u2502DH\u2502 \u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524 \u2502IM\u2502JN\u2502KO\u2502LP\u2502 \u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524 \u2502QU\u2502RV\u2502SW\u2502TX\u2502 \u2514\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2518 \u2282[3]\u22a23 2 4\u2374\u2395A \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502ABCD\u2502EFGH\u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502IJKL\u2502MNOP\u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502QRST\u2502UVWX\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 For a more in-depth look at the relationship between function rank and function axis, watch the Dyalog webinars on Selecting from Arrays and The Rank Operator and Dyadic Transpose . A list of functions with bracket-axis definitions can be found on the APL Wiki page for function axis . Nested arrays Arrays in Dyalog APL are always collections of scalars, regardless of rank. However, we can create arbitrarily complex scalars by a process known as enclosing. This means putting something in a \u201cbox\u201d. It looks like so: v \u2190 1 2 3 \u2282v \u235d Enclose the vector 1 2 3 \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u25021 2 3\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 v\u2261\u2282v \u235d Does the vector v match the enclosed v? Of course not! 0 Boxing a simple scalar returns the same scalar. This becomes very relevant when we learn more about indexing . In technical terms, a simple scalar is a rank-0 array which contains itself as its value. 'a'\u2261\u2283'a' \u235d The disclose of a simple scalar is itself 42\u2261\u228242 \u235d As is the enclose 'abc'\u2261\u2283'abc' \u235d Disclose on a simple array picks the first element 'abc'\u2261\u2282'abc' \u235d Enclosing an array results in a nested scalar Verify that enclosing creates a scalar by checking the rank of \u2282v Stranding We introduced stranding to show how it formed vectors before the application of dyadic functions, for example: 2 + 2 2 + 2 2 + 2 (2 + 2) (2 + 2) 2 + 2 Stranding is a useful way to form arrays. Generally, arrays separated by spaces form vectors. Experiment with the examples below, and notice the difference between stranding a b and catenation a,b . 2 3\u2374'DY' 'AL' 'OG' 'a' 'b' 'c' 'a' 'bc' 'a','b','c' 'a','bc' mixed\u21903 3\u23741 2 3 'a' 'b' 'c' \u235d Simple mixed-type array mixed2\u21903 3\u23741 2 3 'abc' \u235d Nested mixed-type array Below are some more examples to demonstrate the difference between catenation, first-axis catenation \u236a and stranding. Some of these expressions will generate errors. tall\u21905 3\u2374'\u235f' long\u21903 5\u2374'\u2395' 3 1\u2374mixed tall long \u236amixed tall long \u2191mixed tall long mixed,long mixed\u236along mixed\u236atall 3 3\u2374mixed,long 3 3\u2374mixed tall,long Note The functions take \u237a\u2191\u2375 and mix \u2191\u2375 can fill arrays with prototypical elements . Try 0=\u2191mixed tall and ' '=\u2191tall long . Enclose Enlist So enclose \u2282\u2375 allows us to box up individual arrays into scalars. Enlist \u220a\u2375 removes all of the structure of an array, extracting the leaf nodes and laying them out as a single vector. \u220a2 3\u23741 2 'abc' 3 'def' '4' 1 2 abc 3 def4 Why does the 4 appear flush next to def when there is a space between abc and 3 ? Depth The depth of an array can be found using the depth \u2261\u2375 function. It returns the level of nesting of an array. A simple scalar has depth 0 . These ideas are further explained in an answer to the question what does enclose do in APL? on Stack Overflow. Pick and Mix There are two more useful constructs for modifying array structures: first \u2283\u2375 and mix \u2191\u2375 . First is a special case of pick \u237a\u2283\u2375 , which is a way of selecting items from nested arrays . Mix will increment the rank while decrementing the depth: {(\u2374\u2375)(\u2262\u2374\u2375)(\u2261\u2375)}1 3\u2374'abc' 'def''ghi' \u250c\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2510 \u25021 3\u25022\u25022\u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2518 {(\u2374\u2375)(\u2262\u2374\u2375)(\u2261\u2375)}\u21911 3\u2374'abc' 'def''ghi' \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2510 \u25021 3 7\u25023\u25021\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2518 When does (a b)\u2261a,b ? When does (\u2191a b)\u2261a\u236ab ? Primitive Loops Experiment with the following expressions to determine what the each \u00a8 and bind \u2218 operators do in this context. 's',\u00a8'ong' 'ink' 'and' 'lph',\u00a8'ong' 'ink' 'and' (1 2)(2 2)(3 1)\u2374\u00a83 4 5 2 2\u2218\u2374\u00a83 4 5 (\u2374\u22183 4 5)\u00a82 2 Problem set 6 Summary Statistics The 3D array rain gives the monthly rainfall in millimeters over 7 years in 5 countries. rain\u2190?7 5 12\u2374250 For each expression below, write a brief description of the resulting statistic. If necessary, consult the hint which follows the group of expressions. (+\u233f\u23641)rain \u235d Total rainfall for each of 7 years in each of 5 countries +\u233frain (+\u233f\u23642)rain (+\u233f\u23643)rain \u2308\u233frain (\u2308\u233f\u23642)rain rain[\u2378rain>250] Hint Look at the shapes of the arguments and the results, \u2374rain and \u2374+\u233frain etc. Write an expression to find the average monthly rainfall for each individual month over the 7 years in each of the 5 countries. Write an expression to find the average monthly rainfall for each year for each of the 5 countries. Write an expression to find the average annual rainfall over the 7 years for each of the 5 countries. Assign scalar numeric values (single numbers) to the variables years countries months such that the rain data can be summarised as follows: \u2374(+\u233f\u2364years)rain \u235d Sum over years 5 12 \u2374(+\u233f\u2364countries)rain \u235d Sum over countries 7 12 \u2374(+\u233f\u2364months)rain \u235d Sum over months 7 5 Rank Practice Common Names for Arrays of Rank-n Match the following rank operands with their descriptions. Each use of rank ( a to e ) pairs with two of the 10 description boxes below. a b c d e \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u23641 3\u2502\u23642 1\u2502\u2364\u00af1\u2502\u23640 99\u2502\u236499 \u00af1\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ----------------------------------------- \u250c\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2375\u2502 \u2502major cells of \u237a\u2502 \u2502vectors of \u237a\u2502 \u2514\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502major cells of \u2375\u2502 \u2502\u237a\u2502 \u25023D arrays of \u2375\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502major cells of \u2375\u2502 \u2502scalars of \u237a\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502matrices of \u237a \u2502 \u2502vectors of \u2375 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 For each name below, suggest the rank for arrays with that name. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Scalar \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Vector \u2502rank-1 array \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Matrix \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Table \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502List \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Cube \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25024D array\u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25022D array\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Some Points in Space Revisited These problems are identical to those about Some Points in Space in problem set 5 . This time, create a function which works on vectors and use the rank operator to solve these problems. The positions of 7 points in 2D space are given by the matrix pos2 : pos2\u21907 2\u23743 1 3 4 2 7 3 Write a function AddVec to add two vectors together: \u00af1 1(AddVec\u23641)pos2 2 2 2 5 1 8 2 4 0 4 3 3 6 4 Write a function NormVec to normalise a vector so that its sum of squares is 1 . +/pos2*2 10 25 53 18 10 20 58 +/((NormVec\u23641)pos2)*2 1 1 1 1 1 1 1 \u00f7/pos2 3 0.75 0.2857142857 1 0.3333333333 2 2.333333333 \u00f7/(NormVec\u23641)pos \u235d Relative proportions stay the same 3 0.75 0.2857142857 1 0.3333333333 2 2.333333333 Find the values of j and k in each of the two expressions below. 0 10(\u00d7\u2364j k)pos2 0 10 0 40 0 70 0 30 0 30 0 20 0 30 (2\u00d7\u23737)(+\u2364j k)pos2 5 3 7 8 8 13 11 11 11 13 16 14 21 17 Rank Matching Write a function R1 which uses catenate , with the rank operator \u2364 to merge a vector and matrix into a single 3D array. 'ABC' R1 2 3\u2374\u23736 A 1 B 2 C 3 A 4 B 5 C 6 Hint You can apply rank multiple times e.g. f\u2364j\u2364k . Split k-cells The split function \u2193\u2375 splits an array of rank \u22652 by rows, returning an array of shape \u00af1\u2193\u2374\u2375 . Use enclose \u2282\u2375 with the rank operator \u2364 to create a function Split which always splits an array into a nested vector of the major cells of \u2375 . Split 3 2 2 3\u2374\u23739 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u25021 2 3\u25024 5 6\u25027 8 9\u2502 \u25024 5 6\u25027 8 9\u25021 2 3\u2502 \u2502 \u2502 \u2502 \u2502 \u25027 8 9\u25021 2 3\u25024 5 6\u2502 \u25021 2 3\u25024 5 6\u25027 8 9\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 Reduce on an empty vector? For your interest, here are some reductions of note. Try to ask yourself why they give the results they do. Could they have been given different definitions? +/\u236c \u00d7/\u236c \u230a/\u236c ,/'APPLE' 'DOG' 'BISCUIT' As mentioned previously, more detailed treatments of the rank operator can be found in the Dyalog webinars on function rank .","title":"The Array Model"},{"location":"Array-model/#the-array-model","text":"","title":"The array model"},{"location":"Array-model/#viewing-array-structure","text":"The default display forms of arrays can make it difficult to see why two arrays are different: 1 \u235d A simple numeric scalar 1 ,1 \u235d A 1-element vector 1 1=,1 \u235d Are their values equal? Yes 1 1\u2261,1 \u235d Are they the same? No 0 The ]box user command is a way to display arrays with extra markings which indicate the structure: ]box on -style=max 'ABCD' \u235d A 4-element vector \u250c\u2192\u2500\u2500\u2500\u2510 \u2502ABCD\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 1 4\u2374'ABCD' \u235d A 1-row matrix \u250c\u2192\u2500\u2500\u2500\u2510 \u2193ABCD\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 1 (2 3) 4 (2 2\u2374\u2395A) \u235d A 4-element nested vector \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u250c\u2192\u2500\u2500\u2510 \u250c\u2192\u2500\u2510 \u2502 \u2502 1 \u25022 3\u2502 4 \u2193AB\u2502 \u2502 \u2502 \u2514~\u2500\u2500\u2518 \u2502CD\u2502 \u2502 \u2502 \u2514\u2500\u2500\u2518 \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 To see what the markings mean, see the help for the ]Display user command: ]Display -??","title":"Viewing array structure"},{"location":"Array-model/#fundamentals-of-high-rank-arrays","text":"","title":"Fundamentals of high rank arrays"},{"location":"Array-model/#cells-and-axes","text":"From the APL Wiki: A cell is a subarray which is formed by selecting a single index along some number of leading axes and the whole of each trailing axis. Cells are classified by their rank, which may be between 0 (scalars) and the array's rank (in which case the cell must be the entire array). Cells with rank k are called k-cells of an array. A major cell is a cell whose rank is one less than the entire array, or a 0-cell of a scalar. If the text above feels confusing, don't worry. Possibly after this chapter, and almost certainly after the next section on selecting from arrays , you will be able to read it again and say to yourself \"oh yeah, that makes sense\". What you need to know for now is that arrays are arranged like rectangles in many dimensions. The three simplest cases should feel somewhat familiar to you. 0 \u235d A scalar 0 'APL' \u235d A vector APL 0 1 2\u2218.*\u23735 \u235d A matrix 0 0 0 0 0 1 1 1 1 1 2 4 8 16 32 Now let us look at an array with 3 dimensions. We will call it a cuboid : \u2374cuboid\u21902 3\u2218.+3 4 5\u2218.\u00d74 5 6 7 2 3 4 \u2190 trailing (last) axis \u2191 leading (first) axis In the array cuboid defined above, there are 2 major cells , which are those of rank \u00af1+\u2262\u2374cuboid . 2 3 4\u2374\u2395A ABCD EFGH IJKL MNOP QRST UVWX \u22622 3 4\u2374\u2395A \u235d Tally counts the major cells 2 The dimensions of an array are also known as axes . The most major cells, the rank k-1 cells for an array of rank k , lie along the first axis. The least major cells are columns which lie along the last axis. In Dyalog, arrays can have up to 15 dimensions. For more details on the APL array model in Dyalog and other array languages, see the APL Wiki article on the array model . Now that you know how to describe the structure of an array in terms of its sub-arrays, let us look at how to apply functions to sub-arrays.","title":"Cells and axes"},{"location":"Array-model/#matching-dimensions","text":"Experiment with the following examples. Try to describe each one in your own words. Describe how the rank operator \u237a(F\u2364r)\u2375 applies a function F in terms of \u237a and \u2375 . Do not be discouraged by longer expressions and unfamiliar symbols. To help understanding, break down the expression and try pieces of it at a time. names\u2190\u2191'Angela' 'Pete' 'Leslie' \u235d A matrix of names padded with spaces scores\u21903 6 8 'Pete '(=\u23641 1)names scores[names\u2373'Pete '] (\u2227/names(=\u23641 1)'Pete ')\u233fscores names(\u2228/\u2377\u23641)(\u2283\u233d\u2374names)\u2191'Pete' mass\u21901 3 5 8 4 pos\u21905 3\u23740 1 3 4 2 {(+\u233f\u2375)\u00f7\u2262\u2375}mass(\u00d7\u23640 2)pos \u00d7\u23640 2\u2368\u237310 Hint When applying dyadic functions using the rank operator, use the helper function ,\u2365\u2282 ravel over enclose (or {\u237a\u2375} for versions before Dyalog version 18.0) to see how arguments are paired up. For example: names(,\u2365\u2282\u23641 1)'Pete ' \u2349pos,\u2365\u2282\u23642 0\u22a2mass If you still feel stuck, continue reading below and return to these expressions later.","title":"Matching dimensions"},{"location":"Array-model/#first-and-last-axis-primitives","text":"Which of the following functions are affected by the rank operator \u2364 and why are the other functions not affected? \u233d \u235d Reverse \u2296 \u235d Reverse first +/ \u235d Plus reduce +\u233f \u235d Plus reduce-first","title":"First- and last-axis primitives"},{"location":"Array-model/#rank-vs-axis","text":"We have seen two pairs of first- and last-axis primitives. n\u21902 3\u23741 2 3 1 0 \u00af1 n 1 2 3 1 0 \u00af1 +/n \u235d Sum along the last axis 6 0 +\u233fn \u235d Sum along the first axis 2 2 2 '-'\u236a2 3\u2374'DYALOG' \u235d Catenate first --- DYA LOG '|',2 3\u2374'DYALOG' \u235d Catenate last |DYA |LOG Some functions and operators can be used along specified axes using the function axis operator which is denoted by square brackets [] (more duplicitous symbols). Axes of a 3D array Compare the behaviour of the monadic function \u2282 enclose when applied with the rank operator \u2364 versus when it is applied using bracket axis (another name for the function axis operator [] ). \u2282\u23641\u22a23 2 4\u2374\u2395A \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502ABCD\u2502EFGH\u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502IJKL\u2502MNOP\u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502QRST\u2502UVWX\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 \u2282\u23642\u22a23 2 4\u2374\u2395A \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502ABCD\u2502IJKL\u2502QRST\u2502 \u2502EFGH\u2502MNOP\u2502UVWX\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 \u2282\u23643\u22a23 2 4\u2374\u2395A \u250c\u2500\u2500\u2500\u2500\u2510 \u2502ABCD\u2502 \u2502EFGH\u2502 \u2502 \u2502 \u2502IJKL\u2502 \u2502MNOP\u2502 \u2502 \u2502 \u2502QRST\u2502 \u2502UVWX\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2282[1]\u22a23 2 4\u2374\u2395A \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502AIQ\u2502BJR\u2502CKS\u2502DLT\u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502EMU\u2502FNV\u2502GOW\u2502HPX\u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 \u2282[2]\u22a23 2 4\u2374\u2395A \u250c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2510 \u2502AE\u2502BF\u2502CG\u2502DH\u2502 \u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524 \u2502IM\u2502JN\u2502KO\u2502LP\u2502 \u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524 \u2502QU\u2502RV\u2502SW\u2502TX\u2502 \u2514\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2518 \u2282[3]\u22a23 2 4\u2374\u2395A \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502ABCD\u2502EFGH\u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502IJKL\u2502MNOP\u2502 \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502QRST\u2502UVWX\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 For a more in-depth look at the relationship between function rank and function axis, watch the Dyalog webinars on Selecting from Arrays and The Rank Operator and Dyadic Transpose . A list of functions with bracket-axis definitions can be found on the APL Wiki page for function axis .","title":"Rank vs. Axis"},{"location":"Array-model/#nested-arrays","text":"Arrays in Dyalog APL are always collections of scalars, regardless of rank. However, we can create arbitrarily complex scalars by a process known as enclosing. This means putting something in a \u201cbox\u201d. It looks like so: v \u2190 1 2 3 \u2282v \u235d Enclose the vector 1 2 3 \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u25021 2 3\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 v\u2261\u2282v \u235d Does the vector v match the enclosed v? Of course not! 0 Boxing a simple scalar returns the same scalar. This becomes very relevant when we learn more about indexing . In technical terms, a simple scalar is a rank-0 array which contains itself as its value. 'a'\u2261\u2283'a' \u235d The disclose of a simple scalar is itself 42\u2261\u228242 \u235d As is the enclose 'abc'\u2261\u2283'abc' \u235d Disclose on a simple array picks the first element 'abc'\u2261\u2282'abc' \u235d Enclosing an array results in a nested scalar Verify that enclosing creates a scalar by checking the rank of \u2282v","title":"Nested arrays"},{"location":"Array-model/#stranding","text":"We introduced stranding to show how it formed vectors before the application of dyadic functions, for example: 2 + 2 2 + 2 2 + 2 (2 + 2) (2 + 2) 2 + 2 Stranding is a useful way to form arrays. Generally, arrays separated by spaces form vectors. Experiment with the examples below, and notice the difference between stranding a b and catenation a,b . 2 3\u2374'DY' 'AL' 'OG' 'a' 'b' 'c' 'a' 'bc' 'a','b','c' 'a','bc' mixed\u21903 3\u23741 2 3 'a' 'b' 'c' \u235d Simple mixed-type array mixed2\u21903 3\u23741 2 3 'abc' \u235d Nested mixed-type array Below are some more examples to demonstrate the difference between catenation, first-axis catenation \u236a and stranding. Some of these expressions will generate errors. tall\u21905 3\u2374'\u235f' long\u21903 5\u2374'\u2395' 3 1\u2374mixed tall long \u236amixed tall long \u2191mixed tall long mixed,long mixed\u236along mixed\u236atall 3 3\u2374mixed,long 3 3\u2374mixed tall,long Note The functions take \u237a\u2191\u2375 and mix \u2191\u2375 can fill arrays with prototypical elements . Try 0=\u2191mixed tall and ' '=\u2191tall long .","title":"Stranding"},{"location":"Array-model/#enclose-enlist","text":"So enclose \u2282\u2375 allows us to box up individual arrays into scalars. Enlist \u220a\u2375 removes all of the structure of an array, extracting the leaf nodes and laying them out as a single vector. \u220a2 3\u23741 2 'abc' 3 'def' '4' 1 2 abc 3 def4 Why does the 4 appear flush next to def when there is a space between abc and 3 ?","title":"Enclose Enlist"},{"location":"Array-model/#depth","text":"The depth of an array can be found using the depth \u2261\u2375 function. It returns the level of nesting of an array. A simple scalar has depth 0 . These ideas are further explained in an answer to the question what does enclose do in APL? on Stack Overflow.","title":"Depth"},{"location":"Array-model/#pick-and-mix","text":"There are two more useful constructs for modifying array structures: first \u2283\u2375 and mix \u2191\u2375 . First is a special case of pick \u237a\u2283\u2375 , which is a way of selecting items from nested arrays . Mix will increment the rank while decrementing the depth: {(\u2374\u2375)(\u2262\u2374\u2375)(\u2261\u2375)}1 3\u2374'abc' 'def''ghi' \u250c\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2510 \u25021 3\u25022\u25022\u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2518 {(\u2374\u2375)(\u2262\u2374\u2375)(\u2261\u2375)}\u21911 3\u2374'abc' 'def''ghi' \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u2510 \u25021 3 7\u25023\u25021\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2518 When does (a b)\u2261a,b ? When does (\u2191a b)\u2261a\u236ab ?","title":"Pick and Mix"},{"location":"Array-model/#primitive-loops","text":"Experiment with the following expressions to determine what the each \u00a8 and bind \u2218 operators do in this context. 's',\u00a8'ong' 'ink' 'and' 'lph',\u00a8'ong' 'ink' 'and' (1 2)(2 2)(3 1)\u2374\u00a83 4 5 2 2\u2218\u2374\u00a83 4 5 (\u2374\u22183 4 5)\u00a82 2","title":"Primitive Loops"},{"location":"Array-model/#problem-set-6","text":"","title":"Problem set 6"},{"location":"Array-model/#summary-statistics","text":"The 3D array rain gives the monthly rainfall in millimeters over 7 years in 5 countries. rain\u2190?7 5 12\u2374250 For each expression below, write a brief description of the resulting statistic. If necessary, consult the hint which follows the group of expressions. (+\u233f\u23641)rain \u235d Total rainfall for each of 7 years in each of 5 countries +\u233frain (+\u233f\u23642)rain (+\u233f\u23643)rain \u2308\u233frain (\u2308\u233f\u23642)rain rain[\u2378rain>250] Hint Look at the shapes of the arguments and the results, \u2374rain and \u2374+\u233frain etc. Write an expression to find the average monthly rainfall for each individual month over the 7 years in each of the 5 countries. Write an expression to find the average monthly rainfall for each year for each of the 5 countries. Write an expression to find the average annual rainfall over the 7 years for each of the 5 countries. Assign scalar numeric values (single numbers) to the variables years countries months such that the rain data can be summarised as follows: \u2374(+\u233f\u2364years)rain \u235d Sum over years 5 12 \u2374(+\u233f\u2364countries)rain \u235d Sum over countries 7 12 \u2374(+\u233f\u2364months)rain \u235d Sum over months 7 5","title":"Summary Statistics"},{"location":"Array-model/#rank-practice","text":"Common Names for Arrays of Rank-n Match the following rank operands with their descriptions. Each use of rank ( a to e ) pairs with two of the 10 description boxes below. a b c d e \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u23641 3\u2502\u23642 1\u2502\u2364\u00af1\u2502\u23640 99\u2502\u236499 \u00af1\u2502 \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ----------------------------------------- \u250c\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2375\u2502 \u2502major cells of \u237a\u2502 \u2502vectors of \u237a\u2502 \u2514\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502major cells of \u2375\u2502 \u2502\u237a\u2502 \u25023D arrays of \u2375\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502major cells of \u2375\u2502 \u2502scalars of \u237a\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502matrices of \u237a \u2502 \u2502vectors of \u2375 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 For each name below, suggest the rank for arrays with that name. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Scalar \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Vector \u2502rank-1 array \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Matrix \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Table \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502List \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502Cube \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25024D array\u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u25022D array\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Some Points in Space Revisited These problems are identical to those about Some Points in Space in problem set 5 . This time, create a function which works on vectors and use the rank operator to solve these problems. The positions of 7 points in 2D space are given by the matrix pos2 : pos2\u21907 2\u23743 1 3 4 2 7 3 Write a function AddVec to add two vectors together: \u00af1 1(AddVec\u23641)pos2 2 2 2 5 1 8 2 4 0 4 3 3 6 4 Write a function NormVec to normalise a vector so that its sum of squares is 1 . +/pos2*2 10 25 53 18 10 20 58 +/((NormVec\u23641)pos2)*2 1 1 1 1 1 1 1 \u00f7/pos2 3 0.75 0.2857142857 1 0.3333333333 2 2.333333333 \u00f7/(NormVec\u23641)pos \u235d Relative proportions stay the same 3 0.75 0.2857142857 1 0.3333333333 2 2.333333333 Find the values of j and k in each of the two expressions below. 0 10(\u00d7\u2364j k)pos2 0 10 0 40 0 70 0 30 0 30 0 20 0 30 (2\u00d7\u23737)(+\u2364j k)pos2 5 3 7 8 8 13 11 11 11 13 16 14 21 17 Rank Matching Write a function R1 which uses catenate , with the rank operator \u2364 to merge a vector and matrix into a single 3D array. 'ABC' R1 2 3\u2374\u23736 A 1 B 2 C 3 A 4 B 5 C 6 Hint You can apply rank multiple times e.g. f\u2364j\u2364k . Split k-cells The split function \u2193\u2375 splits an array of rank \u22652 by rows, returning an array of shape \u00af1\u2193\u2374\u2375 . Use enclose \u2282\u2375 with the rank operator \u2364 to create a function Split which always splits an array into a nested vector of the major cells of \u2375 . Split 3 2 2 3\u2374\u23739 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u25021 2 3\u25024 5 6\u25027 8 9\u2502 \u25024 5 6\u25027 8 9\u25021 2 3\u2502 \u2502 \u2502 \u2502 \u2502 \u25027 8 9\u25021 2 3\u25024 5 6\u2502 \u25021 2 3\u25024 5 6\u25027 8 9\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518","title":"Rank Practice"},{"location":"Array-model/#reduce-on-an-empty-vector","text":"For your interest, here are some reductions of note. Try to ask yourself why they give the results they do. Could they have been given different definitions? +/\u236c \u00d7/\u236c \u230a/\u236c ,/'APPLE' 'DOG' 'BISCUIT' As mentioned previously, more detailed treatments of the rank operator can be found in the Dyalog webinars on function rank .","title":"Reduce on an empty vector?"},{"location":"Assignment/","text":"Assigning to arrays Indexed Assignment Assign values at specified indices. t\u21904 4\u2374'some sample text' t[\u2378t\u220a'aeiou']\u2190'!' Selective Assignment Define n\u21905 5\u2374\u237325 in your workspace. Using selections, find at least four different ways to set the bottom-right 3 by 3 submatrix in n to 0 . For example, (2 2\u2193n)\u21900 . Hint See which primitives may be used in a selective assignment Modified Assignment Experiment with the following expressions, paying particular attention to the name f\u2190 array construct. salaries\u219018250 42500 56000 57250 48640 codes\u2190'ACDDC' salaries\u00d7\u21901.1 salaries[\u2378codes='C']\u00d7\u21901.05 a\u2190\u2395A (3\u2191a),\u2190'abcd' At Monadic functions take a single right argument array as input. Dyadic functions take two argument arrays. Monadic operators take a single left operand which can be a function or an array (as in +/ where plus + is the function operand and reduce / is the operator). Dyadic operators take two operands which could be functions or arrays depending on the operator's definition. For example, the rank operator F\u2364k takes a function left operand F and array right operand k of up to 3 elements. Selective and indexed assignment methods will change the values of variables. The \"at\" operator @ merges two arrays at specified indices and returns a new array. If a function right operand returns a boolean array when applied to \u2375 (e.g. 3=1 3 5 ) then ones 1 in the boolean array determine where scalars of \u237a are inserted. ('\u2206\u2365'@{\u2375\u220a'AEIOU'})2 3\u2374'DYALOG' (' '@2 3 4)'DYALOG' (' '@(1 2)(1 3)(2 1))2 3\u2374'DYALOG' The following expression contains an error: ('\u2206\u2365'@1)2 3\u2374'DYALOG' Change the parenthesised function containing @ in two ways so that it gives the following results: \u2206\u2206\u2206 LOG \u2206\u2206\u2206 \u2365\u2365\u2365 Generally, the left operand to @ is a function applied to scalars in \u2375 which are specified by a right operand that is either an array of scalar (simple or enclosed vector) indices or a boolean array returned by a right operand function. An array left operand is shorthand for a constant function that returns the array. {1\u2193(1\u2218(819\u2336)@{\u00af1\u233d' '=\u2375})' ',\u2375}'my excellent heading' Strand Assignment Distributed assignment or strand assignment allows multiple names to be defined using a single assignment arrow \u2190 . (max min avg)\u2190{(\u2308\u233f\u2375)(\u230a\u233f\u2375)((+\u233f\u00f7\u2262)\u2375)}3 1 4 1 5 Note Strand assignment does not require names to be parenthesised, but we strongly recommend it for clarity. We can assign items in nest to the three variables s\u2190'A' v\u21901 2 3 and m\u21903 3\u2374\u23739 using a single assignment arrow. nest\u2190('A'(1 2 3))(3 3\u2374\u23739) ((s v) m)\u2190nest Warning You might have some issues when using inline, modified or strand assignment in dfns. This is by design, but can be a source of confusion. {a\u21903 \u22c4 f\u2190+ \u22c4 a f\u21903 \u22c4 a}\u236c 3 a\u21903 \u22c4 f\u2190+ \u22c4 a f\u21903 \u22c4 a 6 You can get around these problems by writing \u2218\u22a2 (or in 12.1: \u2218{\u2375} ) to the immediate right of any function involved: {a\u21903 \u22c4 f\u2190+ \u22c4 a f\u2218{\u2375}\u21903 \u22c4 a}\u236c 6","title":"Extra Assignment"},{"location":"Assignment/#assigning-to-arrays","text":"","title":"Assigning to arrays"},{"location":"Assignment/#indexed-assignment","text":"Assign values at specified indices. t\u21904 4\u2374'some sample text' t[\u2378t\u220a'aeiou']\u2190'!'","title":"Indexed Assignment"},{"location":"Assignment/#selective-assignment","text":"Define n\u21905 5\u2374\u237325 in your workspace. Using selections, find at least four different ways to set the bottom-right 3 by 3 submatrix in n to 0 . For example, (2 2\u2193n)\u21900 . Hint See which primitives may be used in a selective assignment","title":"Selective Assignment"},{"location":"Assignment/#modified-assignment","text":"Experiment with the following expressions, paying particular attention to the name f\u2190 array construct. salaries\u219018250 42500 56000 57250 48640 codes\u2190'ACDDC' salaries\u00d7\u21901.1 salaries[\u2378codes='C']\u00d7\u21901.05 a\u2190\u2395A (3\u2191a),\u2190'abcd'","title":"Modified Assignment"},{"location":"Assignment/#at","text":"Monadic functions take a single right argument array as input. Dyadic functions take two argument arrays. Monadic operators take a single left operand which can be a function or an array (as in +/ where plus + is the function operand and reduce / is the operator). Dyadic operators take two operands which could be functions or arrays depending on the operator's definition. For example, the rank operator F\u2364k takes a function left operand F and array right operand k of up to 3 elements. Selective and indexed assignment methods will change the values of variables. The \"at\" operator @ merges two arrays at specified indices and returns a new array. If a function right operand returns a boolean array when applied to \u2375 (e.g. 3=1 3 5 ) then ones 1 in the boolean array determine where scalars of \u237a are inserted. ('\u2206\u2365'@{\u2375\u220a'AEIOU'})2 3\u2374'DYALOG' (' '@2 3 4)'DYALOG' (' '@(1 2)(1 3)(2 1))2 3\u2374'DYALOG' The following expression contains an error: ('\u2206\u2365'@1)2 3\u2374'DYALOG' Change the parenthesised function containing @ in two ways so that it gives the following results: \u2206\u2206\u2206 LOG \u2206\u2206\u2206 \u2365\u2365\u2365 Generally, the left operand to @ is a function applied to scalars in \u2375 which are specified by a right operand that is either an array of scalar (simple or enclosed vector) indices or a boolean array returned by a right operand function. An array left operand is shorthand for a constant function that returns the array. {1\u2193(1\u2218(819\u2336)@{\u00af1\u233d' '=\u2375})' ',\u2375}'my excellent heading'","title":"At"},{"location":"Assignment/#strand-assignment","text":"Distributed assignment or strand assignment allows multiple names to be defined using a single assignment arrow \u2190 . (max min avg)\u2190{(\u2308\u233f\u2375)(\u230a\u233f\u2375)((+\u233f\u00f7\u2262)\u2375)}3 1 4 1 5 Note Strand assignment does not require names to be parenthesised, but we strongly recommend it for clarity. We can assign items in nest to the three variables s\u2190'A' v\u21901 2 3 and m\u21903 3\u2374\u23739 using a single assignment arrow. nest\u2190('A'(1 2 3))(3 3\u2374\u23739) ((s v) m)\u2190nest Warning You might have some issues when using inline, modified or strand assignment in dfns. This is by design, but can be a source of confusion. {a\u21903 \u22c4 f\u2190+ \u22c4 a f\u21903 \u22c4 a}\u236c 3 a\u21903 \u22c4 f\u2190+ \u22c4 a f\u21903 \u22c4 a 6 You can get around these problems by writing \u2218\u22a2 (or in 12.1: \u2218{\u2375} ) to the immediate right of any function involved: {a\u21903 \u22c4 f\u2190+ \u22c4 a f\u2218{\u2375}\u21903 \u22c4 a}\u236c 6","title":"Strand Assignment"},{"location":"Code/","text":"Importing, Exporting and Distributing Code We have already learned the basics of saving and loading workspaces . Here we address some more specific things like how to use other people's code, how to let other people use your code, and how to distribute your application to end users. Installed Libraries Dyalog installations come with a suite of libraries with pre-written code utilities and examples. Find which ones are available to you now with )lib . There is also a code libraries reference guide in the documentation. You can copy code into the workspace in several ways: Copy the entire library into the current namespace (use pcopy to ensure that existing names are not overwritten): )pcopy dfns Copy selected functions into the current namespace: )copy dfns cal date days cal 2\u2191\u2395ts Copy the entire library into a specific namespace: 'dfns'\u2395ns\u236c dfns.\u2395cy'dfns' Copy the selected functions into a specific namespace: 'dfns'\u2395ns\u236c 'cal' 'date' 'days'dfns.\u2395cy'dfns' Alongside APLcart , the dfns library (not to be confused with the dfns construct) contains a large number of useful functions for use cases ranging from number theory, graphs and tree data structures to games and graphics. User Commands Some of these, such as the ]box one, have been mentioned already. Commands which begin with a right-square-bracket ] are called User Commands . These are only used while interacting with the session, but you can customise them and create your own. Dyalog webinar: Creating and Managing your own User Commands Custom user commands are scripted classes or namespaces containing specific member functions List , Run and Help . They should be saved as plain text .dyalog , .apln or .aplc files and placed in the folder [HOME]/MyUCMDs where [HOME] is either /home/user on Unix-like systems or C:\\Users\\user\\Documents on Microsoft Windows. Some particularly useful in-built user commands for getting information about your workspace are mentioned in the section on workspaces . Creating and sharing your own utilities The user command system is designed for utilities to help during application development and debugging. It is not intended as a system for programmatic utilities. Due to its terse nature, APL vendors have not really established a full-fledged, public package management system like Python's pip or Node/JavaScript's npm. Usually, the source code is distributed either in code files, workspaces or in text files and copied wholesale into other code bases. However, you might find or develop utility functions which you use frequently and that you copy into code bases frequently. In this case, you might like to make such utilities easy to access. One option is to define the function as a member of a custom namespace within the session namespace \u2395SE . Here is an example of using this technique so that you don't have to write such a long function reference to use repObj . 'X'\u2395SE.\u2395NS\u236c \u2395SE.X.rep\u2190\u2395SE.Dyalog.Utils.repObj Once your custom name (function, variable etc.) has been defined within \u2395SE, save the session file. In the Microsoft Windows IDE, go to Session \u2192 Save to overwrite the default session file. In general, the expression for saving the session file is {2\u2395NQ\u2395SE'FileWrite'\u22a3\u2395SE\u2395WS'File'\u2375} which can also be found on APLcart . Of course, you might instead define rep in the root namespace when starting an exploratory coding session, for convenience. Warning Remember that others running your code base might not have comparable environments to that in which which you developed the code. Best practice is to ensure that all necessary code and data is contained locally within your application. Your organisation might also have rules relating to the types and locations of custom items that prevent you from using such techniques. Code in component files The object representation \u2395OR of an APL function or operator can be used to store code in component files. These can then be fixed (defined) with \u2395FX upon loading. Source code in text files Until recently, while it was possible to print source code as text for use in articles and tutorials, generally code was distributed in binary workspaces. The exact format and file extension varies between APL implementations , but for Dyalog these are .dws files. Nowadays, Unicode has enabled the widespread ability to represent characters other than just ASCII. Source code management systems, such as Git and SVN, have encouraged the use of Unicode text files as source code representation. Dyalog provides mechanisms for importing text source into the active workspace, and vice versa, including the ability to associate text files with names in the workspace such that changing one will affect the other. SALT The S imple A PL L ibrary T oolkit allows you to store APL source code as text files with the extension .dyalog Foo\u2190{3\u00d7\u2375} ]save Foo /tmp/Foo \\tmp\\Foo.dyalog ]load /tmp/Foo Foo If the full file path is not specified, SALT will look in a configurable collection of folders on the file system for Dyalog source files. The source folders can be viewed and configured in Options \u2192 Configure \u2192 SALT . Read Chapter R of Mastering Dyalog APL and the SALT User Guide . \u2395FX The \u2395FX system function can be used to define functions or operators from various forms of source code. \u2395FIX The \u2395FIX system function can be used to define various APL items (functions, operators, namespaces etc.) from scripts. If 2\u2395FIX is used and changes are made to the APL name using the Dyalog editor, the system will give you the option to save those changes to the text source file at the same time. If changes are made to the text file outside of Dyalog, using a standard text editor, then opening that name for editing within Dyalog will give the option to update the code in the active workspace using the modified external source. Using HttpCommand together with \u2395FIX is a way to import code from the internet. Link For newer applications, we encourage you to try using the Link system which supercedes SALT and associates namespaces in the active workspace with folders in the file system. Using Link, you do not have to remember to )SAVE your workspace, changes in the workspace are automatically reflected on the file system. \u2395CMD \u2395SH These two functions are used to run command prompt commands (Microsoft Windows) and shell commands (Linux/macOS). For example, try \u2395CMD'whoami' . Warning You should take caution when using \u2395SH , as a non-zero exit code from the command line can cause a DOMAIN ERROR and the system error code to be lost. \u2395\u2190r\u2190\u2395SH'exit 3' DOMAIN ERROR: Command interpreter returned failure code 3 \u2395\u2190r\u2190\u2395SH'exit 3' \u2227 r VALUE ERROR: Undefined name: r r \u2227 See the documentation for \u2395SH for more information. While these are quick-and-easy functions to use for those familar with the command lines on particular operating systems, on some systems they can be slower than the more integrated alternatives. For example, reading a file using \u2395SH can be significantly slower than using \u2395N... system functions on some machines. Checking if a file exists: \u234e\u2283\u2395SH'if test -f /tmp/text; then echo 1; else echo 0; fi' 1 \u2395NEXISTS'/tmp/text' 1 Reading a text file: \u2374\u2191':'(\u2260\u2286\u22a2)\u00a8\u2395sh'cat /etc/passwd' 44 7 \u2374\u2191':'(\u2260\u2286\u22a2)\u00a8(\u2395ucs 10 13)((~\u220a\u2368)\u2286\u22a2)\u2283\u2395nget'/etc/passwd' 44 7 \u2374\u2395CSV\u2360'Separator' ':'\u22a2'/etc/passwd' 44 7 Listing the contents of a directory: \u2374\u2191\u2395sh'ls -l /tmp' 14 127 \u2374\u2191\u22830\u2395NINFO\u23601\u22a2'/tmp/*' 19 85 Searching within a file: \u2191':'(\u2260\u2286\u22a2)\u00a8\u2395SH'awk -F'';'' ''$1 ~ /games/ { print $0 }'' /etc/passwd' \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502games\u2502x\u25025\u250260\u2502games\u2502/usr/games\u2502/usr/sbin/nologin\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 {\u2375\u2337\u2368\u2282\u2378'games'\u2218\u2261\u00a8\u2375[;1]}\u2395CSV\u2360'Separator' ':'\u22a2'/etc/passwd' \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502games\u2502x\u25025\u250260\u2502games\u2502/usr/games\u2502/usr/sbin/nologin\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Code IO"},{"location":"Code/#importing-exporting-and-distributing-code","text":"We have already learned the basics of saving and loading workspaces . Here we address some more specific things like how to use other people's code, how to let other people use your code, and how to distribute your application to end users.","title":"Importing, Exporting and Distributing Code"},{"location":"Code/#installed-libraries","text":"Dyalog installations come with a suite of libraries with pre-written code utilities and examples. Find which ones are available to you now with )lib . There is also a code libraries reference guide in the documentation. You can copy code into the workspace in several ways: Copy the entire library into the current namespace (use pcopy to ensure that existing names are not overwritten): )pcopy dfns Copy selected functions into the current namespace: )copy dfns cal date days cal 2\u2191\u2395ts Copy the entire library into a specific namespace: 'dfns'\u2395ns\u236c dfns.\u2395cy'dfns' Copy the selected functions into a specific namespace: 'dfns'\u2395ns\u236c 'cal' 'date' 'days'dfns.\u2395cy'dfns' Alongside APLcart , the dfns library (not to be confused with the dfns construct) contains a large number of useful functions for use cases ranging from number theory, graphs and tree data structures to games and graphics.","title":"Installed Libraries"},{"location":"Code/#user-commands","text":"Some of these, such as the ]box one, have been mentioned already. Commands which begin with a right-square-bracket ] are called User Commands . These are only used while interacting with the session, but you can customise them and create your own. Dyalog webinar: Creating and Managing your own User Commands Custom user commands are scripted classes or namespaces containing specific member functions List , Run and Help . They should be saved as plain text .dyalog , .apln or .aplc files and placed in the folder [HOME]/MyUCMDs where [HOME] is either /home/user on Unix-like systems or C:\\Users\\user\\Documents on Microsoft Windows. Some particularly useful in-built user commands for getting information about your workspace are mentioned in the section on workspaces .","title":"User Commands"},{"location":"Code/#creating-and-sharing-your-own-utilities","text":"The user command system is designed for utilities to help during application development and debugging. It is not intended as a system for programmatic utilities. Due to its terse nature, APL vendors have not really established a full-fledged, public package management system like Python's pip or Node/JavaScript's npm. Usually, the source code is distributed either in code files, workspaces or in text files and copied wholesale into other code bases. However, you might find or develop utility functions which you use frequently and that you copy into code bases frequently. In this case, you might like to make such utilities easy to access. One option is to define the function as a member of a custom namespace within the session namespace \u2395SE . Here is an example of using this technique so that you don't have to write such a long function reference to use repObj . 'X'\u2395SE.\u2395NS\u236c \u2395SE.X.rep\u2190\u2395SE.Dyalog.Utils.repObj Once your custom name (function, variable etc.) has been defined within \u2395SE, save the session file. In the Microsoft Windows IDE, go to Session \u2192 Save to overwrite the default session file. In general, the expression for saving the session file is {2\u2395NQ\u2395SE'FileWrite'\u22a3\u2395SE\u2395WS'File'\u2375} which can also be found on APLcart . Of course, you might instead define rep in the root namespace when starting an exploratory coding session, for convenience. Warning Remember that others running your code base might not have comparable environments to that in which which you developed the code. Best practice is to ensure that all necessary code and data is contained locally within your application. Your organisation might also have rules relating to the types and locations of custom items that prevent you from using such techniques.","title":"Creating and sharing your own utilities"},{"location":"Code/#code-in-component-files","text":"The object representation \u2395OR of an APL function or operator can be used to store code in component files. These can then be fixed (defined) with \u2395FX upon loading.","title":"Code in component files"},{"location":"Code/#source-code-in-text-files","text":"Until recently, while it was possible to print source code as text for use in articles and tutorials, generally code was distributed in binary workspaces. The exact format and file extension varies between APL implementations , but for Dyalog these are .dws files. Nowadays, Unicode has enabled the widespread ability to represent characters other than just ASCII. Source code management systems, such as Git and SVN, have encouraged the use of Unicode text files as source code representation. Dyalog provides mechanisms for importing text source into the active workspace, and vice versa, including the ability to associate text files with names in the workspace such that changing one will affect the other.","title":"Source code in text files"},{"location":"Code/#salt","text":"The S imple A PL L ibrary T oolkit allows you to store APL source code as text files with the extension .dyalog Foo\u2190{3\u00d7\u2375} ]save Foo /tmp/Foo \\tmp\\Foo.dyalog ]load /tmp/Foo Foo If the full file path is not specified, SALT will look in a configurable collection of folders on the file system for Dyalog source files. The source folders can be viewed and configured in Options \u2192 Configure \u2192 SALT . Read Chapter R of Mastering Dyalog APL and the SALT User Guide .","title":"SALT"},{"location":"Code/#fx","text":"The \u2395FX system function can be used to define functions or operators from various forms of source code.","title":"\u2395FX"},{"location":"Code/#fix","text":"The \u2395FIX system function can be used to define various APL items (functions, operators, namespaces etc.) from scripts. If 2\u2395FIX is used and changes are made to the APL name using the Dyalog editor, the system will give you the option to save those changes to the text source file at the same time. If changes are made to the text file outside of Dyalog, using a standard text editor, then opening that name for editing within Dyalog will give the option to update the code in the active workspace using the modified external source. Using HttpCommand together with \u2395FIX is a way to import code from the internet.","title":"\u2395FIX"},{"location":"Code/#link","text":"For newer applications, we encourage you to try using the Link system which supercedes SALT and associates namespaces in the active workspace with folders in the file system. Using Link, you do not have to remember to )SAVE your workspace, changes in the workspace are automatically reflected on the file system.","title":"Link"},{"location":"Code/#cmd-sh","text":"These two functions are used to run command prompt commands (Microsoft Windows) and shell commands (Linux/macOS). For example, try \u2395CMD'whoami' . Warning You should take caution when using \u2395SH , as a non-zero exit code from the command line can cause a DOMAIN ERROR and the system error code to be lost. \u2395\u2190r\u2190\u2395SH'exit 3' DOMAIN ERROR: Command interpreter returned failure code 3 \u2395\u2190r\u2190\u2395SH'exit 3' \u2227 r VALUE ERROR: Undefined name: r r \u2227 See the documentation for \u2395SH for more information. While these are quick-and-easy functions to use for those familar with the command lines on particular operating systems, on some systems they can be slower than the more integrated alternatives. For example, reading a file using \u2395SH can be significantly slower than using \u2395N... system functions on some machines. Checking if a file exists: \u234e\u2283\u2395SH'if test -f /tmp/text; then echo 1; else echo 0; fi' 1 \u2395NEXISTS'/tmp/text' 1 Reading a text file: \u2374\u2191':'(\u2260\u2286\u22a2)\u00a8\u2395sh'cat /etc/passwd' 44 7 \u2374\u2191':'(\u2260\u2286\u22a2)\u00a8(\u2395ucs 10 13)((~\u220a\u2368)\u2286\u22a2)\u2283\u2395nget'/etc/passwd' 44 7 \u2374\u2395CSV\u2360'Separator' ':'\u22a2'/etc/passwd' 44 7 Listing the contents of a directory: \u2374\u2191\u2395sh'ls -l /tmp' 14 127 \u2374\u2191\u22830\u2395NINFO\u23601\u22a2'/tmp/*' 19 85 Searching within a file: \u2191':'(\u2260\u2286\u22a2)\u00a8\u2395SH'awk -F'';'' ''$1 ~ /games/ { print $0 }'' /etc/passwd' \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502games\u2502x\u25025\u250260\u2502games\u2502/usr/games\u2502/usr/sbin/nologin\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 {\u2375\u2337\u2368\u2282\u2378'games'\u2218\u2261\u00a8\u2375[;1]}\u2395CSV\u2360'Separator' ':'\u22a2'/etc/passwd' \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502games\u2502x\u25025\u250260\u2502games\u2502/usr/games\u2502/usr/sbin/nologin\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"\u2395CMD \u2395SH"},{"location":"Data/","text":"Data Input/Output Although we have \u2395IO , \"IO\" in APL can still refer to input/output. Hello, World! If you have seen any kind of computer programming before, you are probably aware of a famous program called \"Hello, World!\" . Here it is in APL: \u2395\u2190'Hello, World!' If you have learned programming before, maybe it is strange to have gotten so far in an introductory tutorial without meeting the language's \"print\" function. Note By default, non-assignment expressions output results to the session log. We strongly recommend using \u2395\u2190 when you deliberately intend for an expression to print to the session log. You are then able to search for print statements for easier debugging. Back 2 School 4 Maths The function Test will ask the user n single-digit arithmetic questions, and return the number of correct answers. \u2207 points\u2190Test n;answer;solution [1] points\u21900 [2] :While n>0 [3] solution\u2190\u234e\u2395\u2190\u2355(?10),('+-\u00d7\u00f7'[?4]),?10 [4] answer\u2190\u2395 [5] points+\u2190answer\u2261solution [6] n-\u21901 [7] :EndWhile [8] \u2395\u2190'You scored',points,'points' \u2207 Test 3 Examine the Test function and try it out. Which line asks for user input? Note The \u2207 del representation of the Test function above is the vector representation result of \u2395VR'Test' which can be directly input into the session. Copy the Test function above, paste it into the session and press Enter to define the Test function in your workspace. You will see that it is quite possible to cheat the Test function by entering the same expression that it asks. To be even more sly, simply move the text cursor with the up arrow to the printed problem statement and press Enter . To ameliorate this, we can verify and fix input with \u2395VFI . Also note the use of quote-quad \u235e . \u2207 points\u2190Test2 n;answer;input;solution;valid [1] points\u21900 [2] :While n>0 [3] solution\u2190\u234e\u2395\u2190\u2355(?10),('+-\u00d7\u00f7'[?4]),?10 [4] input\u2190\u235e [5] (valid answer)\u2190\u2395VFI input [6] answer\u2190valid/answer [7] points+\u2190answer\u2261,solution [8] n-\u21901 [9] :EndWhile [10] \u2395\u2190'You scored',points,'points' \u2207 Test2 3 Convenient text input Single quotes ' in APL character arrays must be escaped by doubling. It can be sometimes easier to paste input by assigning \u235e : text\u2190\u235e My great string 'which has some quoted text' \u2395SE.Dyalog.Utils.repObj text 'My great string ''which has some quoted text'' ' Note The utility function \u2395SE.Dyalog.Utils.repObj can generate APL expressions which produce most arrays. In some sense, it is like an inverse to execute \u234e . We do not recommend using it programmatically; use the primitives to test the properties of arrays, as explained in the sections on error handling . Convenient text output Once upon a time, APL was considered an incredible, revolutionary tool for scientists, artists and business people alike to be able to get work done using computers. In a time before spreadsheet software was so ubiquitous, APL terminals offered a way to quickly and easily process data, produce reports and format them for printing. Take a look at the Chapter F of Mastering Dyalog APL for how to use the formatting functionality of \u2355 and \u2395FMT . It is easy to round numbers to a specific precision with dyadic format \u2355 : \u2395\u2190rand\u2190?5\u23740 0.2225024074 0.3282243862 0.314984696 0.9533625773 0.757200184 \u234e2\u2355rand 0.22 0.33 0.31 0.95 0.76 Write a function equivalent to (\u234e\u2355) (for small scalar numeric \u237a only) without using \u234e or \u2355 . Why does (\u234e\u2355) fail for large values of \u237a ? The following expression formats the current date as YY/MM/DD . 'I2,2(,ZI2)'\u2395FMT 1 3\u2374100|3\u2191\u2395TS Change the expression to produce YYYY-MM-DD . In Dyalog version 18.0, 1200\u2336 ( twelve hundred eye beam ) can convert date times into human readable formats according to some specification. For example: 'Dddd Mmmm Doo YYYY'(1200\u2336)1\u2395dt\u22823\u2191\u2395ts \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Wednesday August 12th 2020\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Write a function DTFMT to generate a similar output using a 3-element vector like 3\u2191\u2395TS . That is, Full day name Full month name Ordinal day number (1st, 2nd 3rd, 4th etc.) Full year number DTFMT 2020 8 12 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Wednesday August 12th 2020\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Native Files The term \"Native Files\" refers to any type of file on a hard disk. These can be text or media files, or even executable files. Usually we are interested in various kinds of text files. Version Warning \u2395CSV , \u2395JSON and some of the \u2395N... functions are not available in Dyalog version 12.1. Files must be tied and interpreted using \u2395NREAD and APL. \u2395CSV Comma separated values are a very common and convenient . While we encourage you to read the documentation for a full description, here is an overview of features of \u2395CSV : Read data from and write data to files directly Separate the header (first row) from the rest of the data Treat specific columns of input as numeric or text, depending on the options provided Use a separator other than commas, using the \"Separator\" variant option, for example using tabs ( \u2395UCS 9 ) for Tab Separated Values (.tsv). Read data chunks at a time so as to not fill the workspace, using the \"Records\" variant option. \u2395 JSON JSON is not only a convenient way to represent nested data structures, but also a convenient data representation for the modern web since it is natively handled by JavaScript. \u2395JSON converts between APL arrays, including namespaces and text vector representations of JSON . 'ns'\u2395NS\u236c ns.var\u21901 2 3 ns.char\u2190'abc' \u2395JSON ns {\"char\":\"abc\",\"var\":[1,2,3]} A JSON object in Dyalog uses dot-syntax to access members. Some JSON object keys are invalid APL names, so Dyalog works around this using special characters: (\u2395JSON'{\"$name\": \"steve\", \"3var\": \"what\"}').\u2395nl-\u23739 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u23593var\u2502\u2359\u235936\u2359name\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Be aware of incompatible namespaces, although most of the time you will be converting data rather than namespaces. 'ns'\u2395NS\u236c ns.fn\u2190{\u2375} \u2395JSON ns DOMAIN ERROR: JSON export: item \"fn\" of the right argument cannot be converted (\u2395IO=1) \u2395JSON ns \u2227 Recall the expression for an empty JSON object . Using \u2395JSON , we can also display error information in a human-readable format . \u2395 XML XML is a format that has fallen out of favour in recent years, but is still useful to be able to import and export it easily when you need to. Text Files Generally the \u2395N... family of system functions are for reading and writing native files as described in the documentation. \u2395NGET and \u2395NPUT are useful for reading and writing text files without having to tie and untie them. (\u2282words)\u2395NPUT'data/words.txt' \u235d Write words to a unicode text file (content encoding newline)\u2190\u2395NGET'data/words.txt' \u235d Read words from a unicode text file words\u2190(\u2395UCS newline)((~\u220a\u2368)\u2286\u22a2)content \u235d Split words on each new line \u2395N... This is a quick summary. For more details see the Native Files cheat sheet and system functions and variables A-Z in the online documentation. In the chapter on selecting from arrays there was an example of reading a text file using \u2395NGET . Before Dyalog version 15.0, reading text files required a couple of extra steps. Some \u2395N... native file functions are general and can be used to read and write any type of file. As a simple example, here we tie the file words.txt , read the data and store it in a variable, and finally untie the file. Note For multi-user systems, take care to set appropriate file access permissions when using \u2395NCREATE , \u2395NTIE and \u2395NLOCK . tn\u2190'assets/words.txt'\u2395NTIE 0 \u2395\u219010\u2191words\u2190(\u2395UCS 10)(\u2260\u2286\u22a2)\u2395NREAD tn 82(\u2395NSIZE tn)0 \u250c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502A\u2502A's\u2502AA's\u2502AB's\u2502ABM's\u2502AC's\u2502ACTH's\u2502AI's\u2502AIDS's\u2502AM's\u2502 \u2514\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 \u2395NUNTIE\u2395NNUMS \u2395MAP The memory mapping function \u2395MAP associates a file on disk with an APL array in the workspace. This is useful if you are working with data that cannot fit inside the available workspace memory. One approach might be to read the data in chunks and process one chunk at a time (for example, see the \"Records\" variant option for \u2395CSV ). Another approach is to use \u2395MAP . Component files If it is only APL systems that need to store data, the most convenient and efficient way to store that data is in APL component files . Here we will briefly look at the basic usage of component files. A full treatment of component files is provided in Chapter N of Mastering Dyalog APL and more information can be found in the component file documentation . System functions that deal with component files begin \u2395F... . Tie and untie In Dyalog, component files have the extension .dcf (Dyalog Component File) and must be tied and untied . A component file may be exclusively tied ( \u2395FTIE ) or have a shared tie ( \u2395FSTIE ). With an exclusive tie, no other process may access the file. tn\u2190'cfile'\u2395FCREATE 0 \u235d The file is exclusively tied \u2395FUNTIE tn \u235d The file is untied, it can now be used by other applications and processes The next time we want to use this file, we can use \u2395FTIE instead of \u2395FCREATE . The right argument to these functions specifies a tie number (which can be different each time the file is tied), but with a right argument of 0 the next available tie number is used (component file tie numbers start at 1). tn\u2190'cfile'\u2395FTIE 0 \u235d The file on disk is cfile.dcf, but this extension is assumed if not specified The structure of a component file is analogous to a nested vector of arrays. We add new values by appending them to the end of a file. (3 3\u2374\u23739)\u2395FAPPEND tn (\u2191'Dave' 'Sam' 'Ellie' 'Saif')\u2395FAPPEND tn nested\u21902 2\u2374'this' 0 'that' (1 2 3) nested \u2395FAPPEND tn Each array stored in a component file (a component ) is referred to by its index in the file (its component number ), starting from 1 (not affected by \u2395IO ). \u2395FREAD\u00a8tn,\u00a81 2 3 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u25021 2 3\u2502Dave \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u25024 5 6\u2502Sam \u2502\u2502this\u25020 \u2502\u2502 \u25027 8 9\u2502Ellie\u2502\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502Saif \u2502\u2502that\u25021 2 3\u2502\u2502 \u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 A component can be replaced by any other array. 'Hello'\u2395FREPLACE tn 2 \u2395FREAD tn 2 Hello Use \u2395FSIZE to find the range of components and file size: \u2395FSIZE tn 1 4 1744 1.8446744073709552E19 The elements of \u2395FSIZE are: [1] The number of the first component [2] 1 + the number of the last component (that is, where a new component will be if \u2395FAPPEND is used) [3] The current size of the file in bytes [4] The file size limit in bytes Components can be removed from the beginning or end of a component file, with the \u2395FDROP function analogous to \u237a\u2193\u2375 . \u2395FDROP tn 1 \u2395FDROP tn \u00af1 \u2395FREAD\u00a8tn,\u00a81 2 3 FILE INDEX ERROR: cfile.dcf: No such component \u2395FREAD\u00a8tn,\u00a81 2 3 \u2227 \u2395FREAD tn 2 \u235d Only component number 2 remains Dave Sam Ellie Saif After use, don't forget to untie all tied component files using \u2395FUNTIE \u2395FNUMS . Multi-user access If you are working on a system through which multiple users need to access the same component files, it is important to become familiar with multi-user access techniques and potential pitfalls. In particular, you will need to use \u2395FSTIE , \u2395FHOLD , \u2395FSTACK and probably \u2395AN . Chapter N of Mastering Dyalog APL Online documentation: Controlling multi-user access Multi-user access can mean manual access by actual human users, or automated access by separate computers or processes. Downloading data from the internet The HttpCommand class is built on top of the Conga framework for TCP/IP communications. At the most basic level, it can be used to perform HTTP requests to retrieve data from servers. ]load HttpCommand #.HttpCommand \u2374(#.HttpCommand.Get 'https://google.com').Data 14107 Using HttpCommand with \u2395FIX is a way to download APL code from the internet. For more information, see the HttpCommand document . Alternatively, there is documentation within the comments of the code for the HttpCommand class; simply use )ed HttpCommand or press Shift+Enter with the text cursor on the name in the session. Problem set 13 Indian Summer IndiaRainfall.csv is a file of comma separated values . It is adapted from IndiaRainfallSource.csv to remove incomplete records. The India Meteorological Department(IMD) has shared this dataset under Govt. Open Data License - India . It can be downloaded from the links above or from the Kaggle data science website . The data contains the total measured monthly rain fall in millimeters for 30 regions in India from the years 1915 to 2015 inclusive. Load the data into the workspace By default, \u2395CSV will load all fields as text data: \u2395\u21903\u21911 2\u2193\u2395CSV'assets/IndiaRainfall.csv' With the following parameters, \u2395CSV will try to interpret all fields as numeric, and fall back to text if that fails. It will also import the first line as a separate array: (raindata header)\u2190\u2395CSV'assets/IndiaRainfall.csv' \u236c 4 1 \u2395\u21903\u21910 2\u2193raindata Bonus Try reading IndiaRainfallSource.csv and removing the missing records for yourself. When data sets contain a very small amount of missing data, sometimes it is appropriate to estimate those values in a process called imputation . Most of the time, it is best to just remove the sections containing missing records. What was the total rainfall in Punjab in 1995? Which month in which region had the highest rainfall? Use a least squares linear fit to estimate the total rainfall in all 30 regions in 2018 Use a least squares linear fit to estimate the total rainfall in Punjab in 2018 Hint No one would expect you to derive an expression for the least squares linear fit with little APL experience. If you have done it, kudos to you. The expression Mv(\u22a2\u23391,\u2218\u236a\u22a3)Nv from APLcart will compute coefficients of a least squares linear fit given a vector of X values Mv and a vector of Y values Nv . Inspect the data in IndiaRainfallSource.csv to see how close the true values were to your estimates. Were they within your standard error? Hint If the error e is a vector of the differences between Y values predicted by the linear fit and the actual Y values \\[e_i=Y_i^{\\text{predicted}}-Y_i^{\\text{actual}}\\] then an estimate for the variance is given by \\[s^2=\\sum_{i=1}^n{{e_i^2}\\over{n-2}}\\] where the standard deviation (standard error) is \\(s\\) . MarkDown Sort Write a program which reads in a markdown file, rearranges the sections by the alphabetical order of their headers, and writes the sorted file to a new file. For extra credit, include a method by which the user can decide whether to overwrite the existing file or provide the name or path to a new file. For example files, feel free to use any of the source files for these course materials . Fun facts If you are not very familiar with the workings of modern software, you might be surprised to see how accessible file types are. Many text editors might try to open a wide range of files by interpreting their data as text. In the audio editing program Audacity , native files can be inspected and manipulated as audio waveforms . These are a couple of techniques used in an art style called databending .","title":"Data IO"},{"location":"Data/#data-inputoutput","text":"Although we have \u2395IO , \"IO\" in APL can still refer to input/output.","title":"Data Input/Output"},{"location":"Data/#hello-world","text":"If you have seen any kind of computer programming before, you are probably aware of a famous program called \"Hello, World!\" . Here it is in APL: \u2395\u2190'Hello, World!' If you have learned programming before, maybe it is strange to have gotten so far in an introductory tutorial without meeting the language's \"print\" function. Note By default, non-assignment expressions output results to the session log. We strongly recommend using \u2395\u2190 when you deliberately intend for an expression to print to the session log. You are then able to search for print statements for easier debugging.","title":"Hello, World!"},{"location":"Data/#back-2-school-4-maths","text":"The function Test will ask the user n single-digit arithmetic questions, and return the number of correct answers. \u2207 points\u2190Test n;answer;solution [1] points\u21900 [2] :While n>0 [3] solution\u2190\u234e\u2395\u2190\u2355(?10),('+-\u00d7\u00f7'[?4]),?10 [4] answer\u2190\u2395 [5] points+\u2190answer\u2261solution [6] n-\u21901 [7] :EndWhile [8] \u2395\u2190'You scored',points,'points' \u2207 Test 3 Examine the Test function and try it out. Which line asks for user input? Note The \u2207 del representation of the Test function above is the vector representation result of \u2395VR'Test' which can be directly input into the session. Copy the Test function above, paste it into the session and press Enter to define the Test function in your workspace. You will see that it is quite possible to cheat the Test function by entering the same expression that it asks. To be even more sly, simply move the text cursor with the up arrow to the printed problem statement and press Enter . To ameliorate this, we can verify and fix input with \u2395VFI . Also note the use of quote-quad \u235e . \u2207 points\u2190Test2 n;answer;input;solution;valid [1] points\u21900 [2] :While n>0 [3] solution\u2190\u234e\u2395\u2190\u2355(?10),('+-\u00d7\u00f7'[?4]),?10 [4] input\u2190\u235e [5] (valid answer)\u2190\u2395VFI input [6] answer\u2190valid/answer [7] points+\u2190answer\u2261,solution [8] n-\u21901 [9] :EndWhile [10] \u2395\u2190'You scored',points,'points' \u2207 Test2 3","title":"Back 2 School 4 Maths"},{"location":"Data/#convenient-text-input","text":"Single quotes ' in APL character arrays must be escaped by doubling. It can be sometimes easier to paste input by assigning \u235e : text\u2190\u235e My great string 'which has some quoted text' \u2395SE.Dyalog.Utils.repObj text 'My great string ''which has some quoted text'' ' Note The utility function \u2395SE.Dyalog.Utils.repObj can generate APL expressions which produce most arrays. In some sense, it is like an inverse to execute \u234e . We do not recommend using it programmatically; use the primitives to test the properties of arrays, as explained in the sections on error handling .","title":"Convenient text input"},{"location":"Data/#convenient-text-output","text":"Once upon a time, APL was considered an incredible, revolutionary tool for scientists, artists and business people alike to be able to get work done using computers. In a time before spreadsheet software was so ubiquitous, APL terminals offered a way to quickly and easily process data, produce reports and format them for printing. Take a look at the Chapter F of Mastering Dyalog APL for how to use the formatting functionality of \u2355 and \u2395FMT . It is easy to round numbers to a specific precision with dyadic format \u2355 : \u2395\u2190rand\u2190?5\u23740 0.2225024074 0.3282243862 0.314984696 0.9533625773 0.757200184 \u234e2\u2355rand 0.22 0.33 0.31 0.95 0.76 Write a function equivalent to (\u234e\u2355) (for small scalar numeric \u237a only) without using \u234e or \u2355 . Why does (\u234e\u2355) fail for large values of \u237a ? The following expression formats the current date as YY/MM/DD . 'I2,2(,ZI2)'\u2395FMT 1 3\u2374100|3\u2191\u2395TS Change the expression to produce YYYY-MM-DD . In Dyalog version 18.0, 1200\u2336 ( twelve hundred eye beam ) can convert date times into human readable formats according to some specification. For example: 'Dddd Mmmm Doo YYYY'(1200\u2336)1\u2395dt\u22823\u2191\u2395ts \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Wednesday August 12th 2020\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Write a function DTFMT to generate a similar output using a 3-element vector like 3\u2191\u2395TS . That is, Full day name Full month name Ordinal day number (1st, 2nd 3rd, 4th etc.) Full year number DTFMT 2020 8 12 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Wednesday August 12th 2020\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Convenient text output"},{"location":"Data/#native-files","text":"The term \"Native Files\" refers to any type of file on a hard disk. These can be text or media files, or even executable files. Usually we are interested in various kinds of text files. Version Warning \u2395CSV , \u2395JSON and some of the \u2395N... functions are not available in Dyalog version 12.1. Files must be tied and interpreted using \u2395NREAD and APL.","title":"Native Files"},{"location":"Data/#csv","text":"Comma separated values are a very common and convenient . While we encourage you to read the documentation for a full description, here is an overview of features of \u2395CSV : Read data from and write data to files directly Separate the header (first row) from the rest of the data Treat specific columns of input as numeric or text, depending on the options provided Use a separator other than commas, using the \"Separator\" variant option, for example using tabs ( \u2395UCS 9 ) for Tab Separated Values (.tsv). Read data chunks at a time so as to not fill the workspace, using the \"Records\" variant option.","title":"\u2395CSV"},{"location":"Data/#json","text":"JSON is not only a convenient way to represent nested data structures, but also a convenient data representation for the modern web since it is natively handled by JavaScript. \u2395JSON converts between APL arrays, including namespaces and text vector representations of JSON . 'ns'\u2395NS\u236c ns.var\u21901 2 3 ns.char\u2190'abc' \u2395JSON ns {\"char\":\"abc\",\"var\":[1,2,3]} A JSON object in Dyalog uses dot-syntax to access members. Some JSON object keys are invalid APL names, so Dyalog works around this using special characters: (\u2395JSON'{\"$name\": \"steve\", \"3var\": \"what\"}').\u2395nl-\u23739 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u23593var\u2502\u2359\u235936\u2359name\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Be aware of incompatible namespaces, although most of the time you will be converting data rather than namespaces. 'ns'\u2395NS\u236c ns.fn\u2190{\u2375} \u2395JSON ns DOMAIN ERROR: JSON export: item \"fn\" of the right argument cannot be converted (\u2395IO=1) \u2395JSON ns \u2227 Recall the expression for an empty JSON object . Using \u2395JSON , we can also display error information in a human-readable format .","title":"\u2395JSON"},{"location":"Data/#xml","text":"XML is a format that has fallen out of favour in recent years, but is still useful to be able to import and export it easily when you need to.","title":"\u2395XML"},{"location":"Data/#text-files","text":"Generally the \u2395N... family of system functions are for reading and writing native files as described in the documentation. \u2395NGET and \u2395NPUT are useful for reading and writing text files without having to tie and untie them. (\u2282words)\u2395NPUT'data/words.txt' \u235d Write words to a unicode text file (content encoding newline)\u2190\u2395NGET'data/words.txt' \u235d Read words from a unicode text file words\u2190(\u2395UCS newline)((~\u220a\u2368)\u2286\u22a2)content \u235d Split words on each new line","title":"Text Files"},{"location":"Data/#n","text":"This is a quick summary. For more details see the Native Files cheat sheet and system functions and variables A-Z in the online documentation. In the chapter on selecting from arrays there was an example of reading a text file using \u2395NGET . Before Dyalog version 15.0, reading text files required a couple of extra steps. Some \u2395N... native file functions are general and can be used to read and write any type of file. As a simple example, here we tie the file words.txt , read the data and store it in a variable, and finally untie the file. Note For multi-user systems, take care to set appropriate file access permissions when using \u2395NCREATE , \u2395NTIE and \u2395NLOCK . tn\u2190'assets/words.txt'\u2395NTIE 0 \u2395\u219010\u2191words\u2190(\u2395UCS 10)(\u2260\u2286\u22a2)\u2395NREAD tn 82(\u2395NSIZE tn)0 \u250c\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502A\u2502A's\u2502AA's\u2502AB's\u2502ABM's\u2502AC's\u2502ACTH's\u2502AI's\u2502AIDS's\u2502AM's\u2502 \u2514\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518 \u2395NUNTIE\u2395NNUMS","title":"\u2395N..."},{"location":"Data/#map","text":"The memory mapping function \u2395MAP associates a file on disk with an APL array in the workspace. This is useful if you are working with data that cannot fit inside the available workspace memory. One approach might be to read the data in chunks and process one chunk at a time (for example, see the \"Records\" variant option for \u2395CSV ). Another approach is to use \u2395MAP .","title":"\u2395MAP"},{"location":"Data/#component-files","text":"If it is only APL systems that need to store data, the most convenient and efficient way to store that data is in APL component files . Here we will briefly look at the basic usage of component files. A full treatment of component files is provided in Chapter N of Mastering Dyalog APL and more information can be found in the component file documentation . System functions that deal with component files begin \u2395F... .","title":"Component files"},{"location":"Data/#tie-and-untie","text":"In Dyalog, component files have the extension .dcf (Dyalog Component File) and must be tied and untied . A component file may be exclusively tied ( \u2395FTIE ) or have a shared tie ( \u2395FSTIE ). With an exclusive tie, no other process may access the file. tn\u2190'cfile'\u2395FCREATE 0 \u235d The file is exclusively tied \u2395FUNTIE tn \u235d The file is untied, it can now be used by other applications and processes The next time we want to use this file, we can use \u2395FTIE instead of \u2395FCREATE . The right argument to these functions specifies a tie number (which can be different each time the file is tied), but with a right argument of 0 the next available tie number is used (component file tie numbers start at 1). tn\u2190'cfile'\u2395FTIE 0 \u235d The file on disk is cfile.dcf, but this extension is assumed if not specified The structure of a component file is analogous to a nested vector of arrays. We add new values by appending them to the end of a file. (3 3\u2374\u23739)\u2395FAPPEND tn (\u2191'Dave' 'Sam' 'Ellie' 'Saif')\u2395FAPPEND tn nested\u21902 2\u2374'this' 0 'that' (1 2 3) nested \u2395FAPPEND tn Each array stored in a component file (a component ) is referred to by its index in the file (its component number ), starting from 1 (not affected by \u2395IO ). \u2395FREAD\u00a8tn,\u00a81 2 3 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u25021 2 3\u2502Dave \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u25024 5 6\u2502Sam \u2502\u2502this\u25020 \u2502\u2502 \u25027 8 9\u2502Ellie\u2502\u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\u2502 \u2502 \u2502Saif \u2502\u2502that\u25021 2 3\u2502\u2502 \u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 A component can be replaced by any other array. 'Hello'\u2395FREPLACE tn 2 \u2395FREAD tn 2 Hello Use \u2395FSIZE to find the range of components and file size: \u2395FSIZE tn 1 4 1744 1.8446744073709552E19 The elements of \u2395FSIZE are: [1] The number of the first component [2] 1 + the number of the last component (that is, where a new component will be if \u2395FAPPEND is used) [3] The current size of the file in bytes [4] The file size limit in bytes Components can be removed from the beginning or end of a component file, with the \u2395FDROP function analogous to \u237a\u2193\u2375 . \u2395FDROP tn 1 \u2395FDROP tn \u00af1 \u2395FREAD\u00a8tn,\u00a81 2 3 FILE INDEX ERROR: cfile.dcf: No such component \u2395FREAD\u00a8tn,\u00a81 2 3 \u2227 \u2395FREAD tn 2 \u235d Only component number 2 remains Dave Sam Ellie Saif After use, don't forget to untie all tied component files using \u2395FUNTIE \u2395FNUMS .","title":"Tie and untie"},{"location":"Data/#multi-user-access","text":"If you are working on a system through which multiple users need to access the same component files, it is important to become familiar with multi-user access techniques and potential pitfalls. In particular, you will need to use \u2395FSTIE , \u2395FHOLD , \u2395FSTACK and probably \u2395AN . Chapter N of Mastering Dyalog APL Online documentation: Controlling multi-user access Multi-user access can mean manual access by actual human users, or automated access by separate computers or processes.","title":"Multi-user access"},{"location":"Data/#downloading-data-from-the-internet","text":"The HttpCommand class is built on top of the Conga framework for TCP/IP communications. At the most basic level, it can be used to perform HTTP requests to retrieve data from servers. ]load HttpCommand #.HttpCommand \u2374(#.HttpCommand.Get 'https://google.com').Data 14107 Using HttpCommand with \u2395FIX is a way to download APL code from the internet. For more information, see the HttpCommand document . Alternatively, there is documentation within the comments of the code for the HttpCommand class; simply use )ed HttpCommand or press Shift+Enter with the text cursor on the name in the session.","title":"Downloading data from the internet"},{"location":"Data/#problem-set-13","text":"","title":"Problem set 13"},{"location":"Data/#indian-summer","text":"IndiaRainfall.csv is a file of comma separated values . It is adapted from IndiaRainfallSource.csv to remove incomplete records. The India Meteorological Department(IMD) has shared this dataset under Govt. Open Data License - India . It can be downloaded from the links above or from the Kaggle data science website . The data contains the total measured monthly rain fall in millimeters for 30 regions in India from the years 1915 to 2015 inclusive. Load the data into the workspace By default, \u2395CSV will load all fields as text data: \u2395\u21903\u21911 2\u2193\u2395CSV'assets/IndiaRainfall.csv' With the following parameters, \u2395CSV will try to interpret all fields as numeric, and fall back to text if that fails. It will also import the first line as a separate array: (raindata header)\u2190\u2395CSV'assets/IndiaRainfall.csv' \u236c 4 1 \u2395\u21903\u21910 2\u2193raindata Bonus Try reading IndiaRainfallSource.csv and removing the missing records for yourself. When data sets contain a very small amount of missing data, sometimes it is appropriate to estimate those values in a process called imputation . Most of the time, it is best to just remove the sections containing missing records. What was the total rainfall in Punjab in 1995? Which month in which region had the highest rainfall? Use a least squares linear fit to estimate the total rainfall in all 30 regions in 2018 Use a least squares linear fit to estimate the total rainfall in Punjab in 2018 Hint No one would expect you to derive an expression for the least squares linear fit with little APL experience. If you have done it, kudos to you. The expression Mv(\u22a2\u23391,\u2218\u236a\u22a3)Nv from APLcart will compute coefficients of a least squares linear fit given a vector of X values Mv and a vector of Y values Nv . Inspect the data in IndiaRainfallSource.csv to see how close the true values were to your estimates. Were they within your standard error? Hint If the error e is a vector of the differences between Y values predicted by the linear fit and the actual Y values \\[e_i=Y_i^{\\text{predicted}}-Y_i^{\\text{actual}}\\] then an estimate for the variance is given by \\[s^2=\\sum_{i=1}^n{{e_i^2}\\over{n-2}}\\] where the standard deviation (standard error) is \\(s\\) .","title":"Indian Summer"},{"location":"Data/#markdown-sort","text":"Write a program which reads in a markdown file, rearranges the sections by the alphabetical order of their headers, and writes the sorted file to a new file. For extra credit, include a method by which the user can decide whether to overwrite the existing file or provide the name or path to a new file. For example files, feel free to use any of the source files for these course materials . Fun facts If you are not very familiar with the workings of modern software, you might be surprised to see how accessible file types are. Many text editors might try to open a wide range of files by interpreting their data as text. In the audio editing program Audacity , native files can be inspected and manipulated as audio waveforms . These are a couple of techniques used in an art style called databending .","title":"MarkDown Sort"},{"location":"Dfns/","text":"Dfns and assignment Dfns A dfn (pronounced \" dee-fun \" with a very short \"u\" sound) is a way of writing functions in APL. It starts and ends with curly braces {} , has a right argument \u2375 (omega) and an optional left argument \u237a (alpha). 3{\u237a}5 \u235d \u237a is the (optional) left argument 3 {\u2375}'apl' \u235d \u2375 is the right argument apl {\u237a}5 \u235d Calling a dyadic function monadically results in an error VALUE ERROR {\u237a}5 \u2227 3{\u2375} \u235d Calling a function without a right argument results in an error SYNTAX ERROR: Missing right argument 3{\u2375} \u2227 Function valence Most functions are either monadic or dyadic . Monadic functions take a single argument to their right and dyadic functions take two arguments, one to the right and one to the left. For example, plus is a dyadic function e.g. 3+4 5 6 and iota is a monadic function e.g. \u23733 . From here, when functions are first introduced, f\u2375 (\"eff omega\") denotes a monadic function f and \u237af\u2375 (\"alpha eff omega\") denotes a dyadic function. Assignment Names are assigned with the left arrow name \u2190 expression . We say \"name gets [function or array]\". one\u21901 three\u21903 equals\u2190= plus\u2190+ four\u21904 four equals one plus three \u235d 1 means true, 0 means false 1 We can use a name in the same line in which it is defined. In production code it is best to avoid this unless an expression is very short. Read the following as \"squared numbers divided by the sum of squares\": squared\u00f7+/squared\u2190\u00af1 0 1 2*2 0.1666666667 0 0.1666666667 0.6666666667` Problem Set 2 Utility Functions Without using the tally \u2262\u2375 or shape \u2374\u2375 functions, create a function named Tally which returns the number of elements in a vector. Tally 1 2 4 523 1 2 454 7 Create a function named Mean which returns the mean average of a numeric vector. Mean 1 2 4 523 1 2 454 141 Using \u230a\u2375 (\"floor\" i.e. round down), create a function IsDivisibleBy which returns 1 if \u237a is divisible by \u2375 and 0 otherwise. 15 IsDivisibleBy 5 1 15 IsDivisibleBy 6 0 12 IsDivisibleBy \u237312 1 1 1 1 0 1 0 0 0 0 0 1 What Remains \u237a Mod \u2375 is a dyadic function which returns the remainder after its right argument \u2375 number is divided by the left argument \u237a . 16\u00f75 3.2 5 Mod 16 \u235d 3 5s and 1 left over 1 0.2\u00d75 \u235d 0.2 5s left over 1 12 Mod 30 6 13 Mod 56 4 5 Mod 30 \u235d 5 goes into 25 exactly 6 times 0 Write the Mod function as a dfn without using the magnitude / residue ( | ) glyph. Write a function Split \u2375 which takes a fractional number and returns two numbers: its integer and fractional parts. Split 0 0 0 Split \u00af7 \u00af7 0 Split 4.32 4 0.32 What Was In That Vector Again? You should have a variable named \u2395AVU in your workspace, from problem set 1 . How many even numbers are there in \u2395AVU ? What percentage of numbers in \u2395AVU are odd numbers? What percentage of numbers in \u2395AVU are strictly negative? What percentage of numbers in \u2395AVU are strictly positive? What do you notice about the percentage of strictly positive and negative numbers? Prime Time A prime number is divisible only by itself and 1 . Write a dfn which returns 1 if its argument is prime and 0 otherwise. IsPrime 21 0 IsPrime 17 1","title":"Dfns and Assignment"},{"location":"Dfns/#dfns-and-assignment","text":"","title":"Dfns and assignment"},{"location":"Dfns/#dfns","text":"A dfn (pronounced \" dee-fun \" with a very short \"u\" sound) is a way of writing functions in APL. It starts and ends with curly braces {} , has a right argument \u2375 (omega) and an optional left argument \u237a (alpha). 3{\u237a}5 \u235d \u237a is the (optional) left argument 3 {\u2375}'apl' \u235d \u2375 is the right argument apl {\u237a}5 \u235d Calling a dyadic function monadically results in an error VALUE ERROR {\u237a}5 \u2227 3{\u2375} \u235d Calling a function without a right argument results in an error SYNTAX ERROR: Missing right argument 3{\u2375} \u2227","title":"Dfns"},{"location":"Dfns/#function-valence","text":"Most functions are either monadic or dyadic . Monadic functions take a single argument to their right and dyadic functions take two arguments, one to the right and one to the left. For example, plus is a dyadic function e.g. 3+4 5 6 and iota is a monadic function e.g. \u23733 . From here, when functions are first introduced, f\u2375 (\"eff omega\") denotes a monadic function f and \u237af\u2375 (\"alpha eff omega\") denotes a dyadic function.","title":"Function valence"},{"location":"Dfns/#assignment","text":"Names are assigned with the left arrow name \u2190 expression . We say \"name gets [function or array]\". one\u21901 three\u21903 equals\u2190= plus\u2190+ four\u21904 four equals one plus three \u235d 1 means true, 0 means false 1 We can use a name in the same line in which it is defined. In production code it is best to avoid this unless an expression is very short. Read the following as \"squared numbers divided by the sum of squares\": squared\u00f7+/squared\u2190\u00af1 0 1 2*2 0.1666666667 0 0.1666666667 0.6666666667`","title":"Assignment"},{"location":"Dfns/#problem-set-2","text":"Utility Functions Without using the tally \u2262\u2375 or shape \u2374\u2375 functions, create a function named Tally which returns the number of elements in a vector. Tally 1 2 4 523 1 2 454 7 Create a function named Mean which returns the mean average of a numeric vector. Mean 1 2 4 523 1 2 454 141 Using \u230a\u2375 (\"floor\" i.e. round down), create a function IsDivisibleBy which returns 1 if \u237a is divisible by \u2375 and 0 otherwise. 15 IsDivisibleBy 5 1 15 IsDivisibleBy 6 0 12 IsDivisibleBy \u237312 1 1 1 1 0 1 0 0 0 0 0 1 What Remains \u237a Mod \u2375 is a dyadic function which returns the remainder after its right argument \u2375 number is divided by the left argument \u237a . 16\u00f75 3.2 5 Mod 16 \u235d 3 5s and 1 left over 1 0.2\u00d75 \u235d 0.2 5s left over 1 12 Mod 30 6 13 Mod 56 4 5 Mod 30 \u235d 5 goes into 25 exactly 6 times 0 Write the Mod function as a dfn without using the magnitude / residue ( | ) glyph. Write a function Split \u2375 which takes a fractional number and returns two numbers: its integer and fractional parts. Split 0 0 0 Split \u00af7 \u00af7 0 Split 4.32 4 0.32 What Was In That Vector Again? You should have a variable named \u2395AVU in your workspace, from problem set 1 . How many even numbers are there in \u2395AVU ? What percentage of numbers in \u2395AVU are odd numbers? What percentage of numbers in \u2395AVU are strictly negative? What percentage of numbers in \u2395AVU are strictly positive? What do you notice about the percentage of strictly positive and negative numbers? Prime Time A prime number is divisible only by itself and 1 . Write a dfn which returns 1 if its argument is prime and 0 otherwise. IsPrime 21 0 IsPrime 17 1","title":"Problem Set 2"},{"location":"Errors/","text":"Error Handling and Debugging This is an abridged treatment of error handling that covers key points. You will also find useful: Chapter 6 of Mastering Dyalog APL (Chapter E in the 2009 edition) Dyalog webinars on error handling The online documentation: Error messages Stop controls Trace controls State indicator What's in a Name? Study the following expression. It contains an error guard :: and the primitive functions format \u2355 and execute \u234e . )ns Names \u235d Create a namespace called Names Names.va\u2190({2 6 11::0 \u22c4 \u234e(\u2395UCS \u2375),'\u2190',\u2355\u2375}\u00a8\u23731E4)~0 \u235d Valid Assignment Character Codes Which three errors are trapped by the error guard? \u2395AV is the list of characters which was used before Unicode was introduced. How many valid assignment characters are in \u2395AV ? When are digits \u2395D not allowed in names? Why is 9109 9054 printed to the session when the expression is run? Another way to find valid naming characters is to filter \u2395AV using \u2395NC . Names.ava\u2190\u2395AV/\u23680\u2264\u2395NC\u236a\u2395AV \u235d \u2395AVU Valid Assignment Characters How do Names.va and Names.ava differ? Error Messages and Error Codes You will have executed expressions which have resulted in some error messages by now. In fact I am certain of it because some of the previous example expressions have been deliberately written containing errors. LENGTH ERROR VALUE ERROR DOMAIN ERROR SYNTAX ERROR If you are trapping specific errors, you might find it useful to assign error numbers to descriptive names. For example, (INDEX RANK LENGTH VALUE)\u21903 4 5 6 . There are a number of similar techniques which can be used, some of which are described in the Dyalog webinar Error Handling - Part 1 . Find the error codes of the four error messages given above. Hint Try: 1 2+2 3\u2374\u23739 \u235d Write some expression to generate the error \u2395\u2190\u2395EN \u235d Inspect the Error Number of the last error \u2395\u2190\u2395EM 4 \u235d Inspect the Error Message for that number You can also search using APLcart Write a function ERROR which returns error numbers for in-built messages, given a simple character vector or nested vector of character vectors as argument. ERROR 'RANK' 4 ERROR 'LENGTH' 'DOMAIN' 5 11 Note Technically, \u2395EM and \u2395EN are event message and event number respectively. Most of the time you will be concerned about error events, but other types of events exist as well. Suspend your disbelief When an error occurs in a multi-line function , the interpreter will pause execution and show the tracer. \u2207 r\u2190x Interlace y [1] size\u21901 2\u00d7\u2374x [2] even\u21902\u00d7\u2373(\u2374x)[2] [3] r[;even]\u2190y [4] r[;even]-1\u2190x \u2207 \u2395RL \u2190 73 \u2395\u2190forecast \u2190 10\u00d7?4 6\u237455 Fig 6.4 from Mastering Dyalog APL: Trace window in the RIDE The state of your program is frozen in time. You can now: Inspect the values of variables Use )SI , \u2395SI or \u2395XSI to get a list of currently suspended functions Inspect or use the value of \u2395DM \u2395DMX to pass information about the error Edit the function to fix the issue Either double click blank space or use Shift+Enter while the text cursor is on a blank space to turn the tracer into an editor Edit the code to fix the issue Press Esc or click the cross button \u2bbe to save these changes and return to the tracer Continue execution by either: Press Enter to proceed one line at a time Click the trace action button to continue execution normally Type \u2192\u2395LC ( go-to quad LC ) to continue execution normally Sometimes it is better to execute a function line-by-line rather than wait for an error to occur. To do this, with the text cursor on the function-calling expression, either press Ctrl+Enter or click Action \u2192 Trace from the IDE menu. Executing, stepping into or editing a function with Enter , Ctrl+Enter and Shift+Enter can all be done while tracing through a suspended function. Can't be helped If you cannot fix the error immediately and would just like to return to the session, use one of: Press Esc to exit the current function Enter \u21920 into the session to exit the current function and resume the calling line Type \u2192 (naked branch) into the session to clear the last call on the stack Enter )RESET or )SIC into the session to clear the entire execution stack and return to the session Gotta :Trap 'em all The keyword :Trap ErrorNums allows a function to specify behaviour if an error with a number in the scalar or vector ErrorNums occurs. It can be used in conjunction with :Case N to execute some code if the error number is N and :Else for the other errors. All errors are trapped with :Trap 0 . For example: :Trap 3 4 5 6 11 \u235d Code to execute here :Case 3 \u2395\u2190'Index Error' :CaseList 5 6 11 \u2395\u2190'Length, Value or Domain Error' :Else \u2395\u2190'Rank Error' :EndTrap \u2395TRAP Before :Trap and other similar control structures were introduced, \u2395TRAP was the way to set error trapping behaviour. Nowadays, most people will use control structures for visual clarity in their new code. However, \u2395TRAP is still used to maintain style in existing code bases, and for certain behaviours that are not possible with :Trap . For example, we can alter the behaviour when an error occurs in the session: \u2395trap\u21905 'E' '''Silly!''' 1 2 + 3 4 5 Silly! Note Some errors, such as SYSTEM ERROR , are not trappable. Not only does the trap execute custom code when a LENGTH ERROR occurs, but it also prevents the tracer from automatically opening when such an error occurs in a function. \u2207 r\u2190l Lerror r [1] l+r \u2207 1 2 Lerror 3 4 5 Silly! However, those function calls are still suspended as can be seen using the state indicator: 1 2 Lerror 3 4 5 Silly! )si #.Lerror[1]* #.Lerror[1]* The 2nd element of an item in \u2395TRAP determines what happens to the call stack (this cannot be achieved with :Trap ): E : execute expression named in the 3rd element C : cut back the stack to where \u2395TRAP is localised and then execute expression named in the 3rd element \u2395TRAP\u219011 'C' '(\u2191\u2395DM)' Foo DOMAIN ERROR Foo[1] 1\u00f70 \u2227 0\u220a\u2374\u2395SI 1 N : next - skip this error (no 3rd element) This is only meaningful if there is a trap 0 higher up the stack. It can be used for trapping every error except a specific one: \u2207 Trap6 x;\u2395TRAP [1] \u235d Handle all but value errors [2] \u2395TRAP\u2190(6 'N')(0 'E' '\u2192ERROR') [3] \u234ex \u235d x contains a program to run [4] \u21920 [5] ERROR:'Uh oh!' \u2207 S : stop - normal error handling (no 3rd element) This is typically used with a debugging switch: \u2395TRAP\u2190(1+DEBUG)\u2283(0 'E' 'Bad')(0 'S') Warning The E (execute immediately) action code is very tricky to use and best avoided. Prefer to use C , or even better, a :Trap control structure. Reset error trapping to default behaviour: \u2395TRAP\u2374\u2368\u21900 In general, you assign a nested vector of 3-element vectors to \u2395TRAP , each of the form (numbers 'X' 'string') . Who needs to know? Errors can occur due to a mistakenly written piece of code. However, even a perfectly valid function can trigger errors if run with input which is outside of its domain. Note It is best not to rely on error trapping for behaviour, in part because future extensions to the language may introduce valid behaviours in those cases. You should test inputs explicitly using APL primitives. It can be tempting to use :Trap 0 to force alternative behaviour for unexpected inputs. However, trapping all errors should only really be done in order for your application to fail safely for the sake of end users. Best practice is to think carefully about the properties of valid inputs to your functions, and signal errors or otherwise indicate to the user that an invalid input has been attempted. Pass it on \u2395DMX is a system object containing information about the last occuring error. Recent versions of Dyalog can display its contents in a human-readable JSON format: (\u2395JSON\u2360'Compact' 0)\u2395DMX Note Your code should not assume that the properties in \u2395DMX will stay the same across versions of Dyalog. See the online documentation for more information about \u2395DMX . The system function \u2395SIGNAL can be used to generate errors. Errors may be signalled without a guilty expression, or custom error codes and messages may be signalled. Monadic \u2395SIGNAL can be used to provide custom values for \u2395DMX . \u2395SIGNAL\u2282('EN' 666)('Message' 'The Devil''s Error')('Vendor' 'Satan') Dyadic \u2395SIGNAL can be used to conveniently set the event message and event number. Slightly confusingly, the \u2395EM event message is different from the error message member of the D iagnostic M essage Extended : \u2395DMX.Message . 'Yo!'\u2395SIGNAL 42 \u2395EM \u2395DMX.Message Error signalling can be used to provide custom error messages, as well as to prevent the application from suspending in the tracer, which can be confusing for end users of your application who do not know APL. You might prefer that user-facing functions trap and re-signal errors, whereas utilities intended for use by APLers in the session might be left to suspend on error. Error number ranges Event numbers 1-99 are generated by APL. Event numbers 1-999 can be generated by the user. Error 0 means \"any error\". Errors 1001-1008 are interrupts (e.g. break). Error 1000 means \"any interrupt\". \u2395TRACE Specify line numbers within a function or operator to have the results of expressions on those lines output to the session when executed. Attempts to set trace controls in a locked function or operator (see \u2395LOCK ) are ignored. The stack The execution stack (sometimes referred to as just the stack ) is the accumulation of functions either suspended or currently mid-execution. It can be inspected using )SI , \u2395SI and \u2395XSI . If you attempt to run or re-run functions without having cleared the stack, then the stack simply builds up until the workspace is full. \u2395VR'Foo' \u2207 Foo [1] 1\u00f70 \u2207 Foo DOMAIN ERROR: Divide by zero Foo[1] 1\u00f70 \u2227 Foo DOMAIN ERROR: Divide by zero Foo[1] 1\u00f70 \u2227 )SI #.Foo[1]* #.Foo[1]* There are a number of system variables to deal with functions on the stack: \u2395SI The names of functions on the stack \u2395LC The line numbers at which each function is suspended \u2395NSI The namespaces prior to the call as character vectors \u2395RSI The namespaces prior to the call as scalar references \u2395XSI The full namespace paths of functions on the stack \u2395STACK The stack of functions and state descriptions To get the same diagnostic error messages printed to the session without building up the stack, you can set \u2395TRAP to use a custom error reporting function: \u2207 Error [1] \u2395DMX.(OSError{\u2375,2\u233d(\u00d7\u2262\u2283\u236c\u23742\u233d\u237a,\u2282'')/'\") (\"',\u2283\u236c\u23742\u233d\u2286\u237a}Message{\u2375,\u237a,\u2368': '/\u2368\u00d7\u2262\u237a}\u2283\u236c\u2374DM,\u2282'') [2] \u21911\u2193\u2395DMX.DM \u2207 \u2395TRAP\u21900 'C' '#.Error' Foo DOMAIN ERROR: Divide by zero Foo[1] 1\u00f70 \u2227 )SI The long, awkward expression in Error above can be found in APLcart . Problem set 12 Help I'm Trapped Here we will write a simple calculator program to divide two vector arguments. When the function fails it should return to the session and leave the stack empty, but the values of \u2395DM and \u2395EN should change. Write a program (a tradfn called Divide ) which explicitly tests its input and signals an appropriate error for invalid arguments. Rewrite the program as a tradfn called DivideQ which uses \u2395TRAP instead of testing its arguments. Rewrite the program as a tradfn called DivideC which uses :Trap . Rewrite the program as a dfn DivideD with error guards. Example output: 1 2 3 Divide ,5 0.2 0.4 0.6 3 Divide ,4 RANK ERROR: Must have both vector arguments 3 Divide,4 \u2227 1 2 Divide 1 2 3 LENGTH ERROR: Mismatched left and right argument shapes 1 2 Divide 1 2 3 \u2227 1 2 Divide 1 0 DOMAIN ERROR: Divide by zero 1 2 Divide 1 0 \u2227 Prefix agreement operator Leading axis agreement is a proposed extension to scalar extension which will automatically apply dyadic functions between cells when the leading axes of two arrays match. 2 3 \u00d7_L 2 3\u2374\u23736 2 4 6 12 15 18 If the leading axis lengths do not match at all, then the operator will issue an error. Write a version of the prefix agreement operator _L which manually checks whether the argument shapes have a matching prefix, and signals a custom error otherwise. 2 3\u00d7_L 1 3\u2374\u23736 LEADING AXIS MISMATCH 2 3\u00d7_L 1 3\u2374\u23736 \u2227 \u2395EN 5 Hint If you are not sure how to write the functionality of the leading axis operator, use the definition from the APL Wiki article: {\u237a \u237a\u237a\u2364(-\u237a\u230a\u2365(\u2262\u2374)\u2375)\u22a2\u2375} Testing for types Use the documentation and your own knowledge to find expressions to test for the following properties of arrays: Numeric arrays Character arrays Integers Simple arrays (non-nested) Uniformly nested arrays Scalars, vectors and matrices Singleton values Namespace references Namespace names as character arrays Symmetric matrices In general, you assign a nested vector of 3-element vectors to \u2395TRAP , each of the form (numbers 'X' 'string') . In terms of its structure, what happens to the value of \u2395TRAP if you only assign a single 3-element vector? Can you fix it? This scripted namespace defines a toy app to read a UTF-8 text file and convert its data to hexadecimal representation. :Namespace app file\u2190'/tmp/file.txt' \u2207 Main Hex file \u2207 \u2207 hex\u2190Hex file;bytes;\u2395TRAP bytes\u2190'UTF-8'\u2218\u2395UCS\u00a8\u2283\u2395NGET file 1 hex\u2190\u2191{,\u23493\u2191(\u2395D,\u2395A)[16 16\u22a4\u2375]}\u00a8bytes \u2207 :EndNamespace The author of the function modifies it to exhibit certain error handling behaviours. Unfortunately, their code has bugs. Investigate the following scenarios and try to solve the issues. The author has set up error trapping. They are aware of a potential FILE NAME ERROR , but have also set up a global trap in case any unexpected errors occur. :Namespace app file\u2190'/tmp/file.txt' \u2207 Main;\u2395TRAP \u2395TRAP\u21900 'E' 'Report \u22c4 \u21920' Hex file \u2207 \u2207 hex\u2190Hex file;bytes \u2395TRAP\u219022 'C' '\u2192ERROR' bytes\u2190'UTF-8'\u2218\u2395UCS\u00a8\u2283\u2395NGET file 1 hex\u2190\u2191{,\u23493\u2191(\u2395D,\u2395A)[16 16\u22a4\u2375]}\u00a8bytes \u21920 ERROR: Report \u2207 \u2207 Report error\u2190\u2191\u2395DM \u2395\u2190'An error occurred. See app.error for more information.' \u2207 :EndNamespace Unfortunately, the function suspends with an unexpected VALUE ERROR . VALUE ERROR: Undefined name: ERROR \u2192ERROR \u2227 After modifying the code, the function should print to the session: app.Main An error occurred. See app.error for more information. The variable app.error should be populated: \u2395\u2190app.error FILE NAME ERROR Hex[2] bytes\u2190'UTF-8'\u2218\u2395UCS\u00a8\u2283\u2395NGET file 1 \u2227 Now that the file name error is handled, they want to test the application using a file. Paste the following into a text editor and save it somewhere. Update app.file to point to the correct location. sample text Running app.Main reveals either 1 or 2 more bugs: Running the function now results in an INDEX ERROR . The global trap did not catch the INDEX ERROR . Fix the remaining bugs. The application should successfully convert the file now: app.Main 73 61 6D 70 6C 65 20 74 65 78 74 Finally, the author decides it would be more useful if app.error contained more information about the error, and also that the Report function should display this directly in the session as well. :Namespace app file\u2190'/tmp/file.txt' \u2207 Main;\u2395TRAP \u2395TRAP\u21900 'E' 'Report {\u2375(\u234e\u2375)}\u00a8\u2395NL\u00af2 \u22c4 \u21920' Hex file \u2207 \u2207 hex\u2190Hex file;bytes \u2395TRAP\u219022 'C' '\u2192ERROR' bytes\u2190'UTF-8'\u2218\u2395UCS\u00a8\u2283\u2395NGET file 1 hex\u2190\u2191{,\u23493\u2191(\u2395D,\u2395A)[16 16\u22a4\u2375]}\u00a8bytes \u21920 ERROR: Report\u2282'file' file \u2207 \u2207 Report names_values error\u2190\u2282\u2191\u2395DM error,\u2190\u2282\u2191names_values \u2395\u2190'An error occurred. Error information in app.error:' \u2395\u2190error \u2207 :EndNamespace Turn ]box -fns=on Reinstate the FILE NAME ERROR and run app.Main again. app.Main An error occurred. Error information in app.error: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502FILE NAME ERROR \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502Hex[2] bytes\u2190'UTF-8'\u2218\u2395UCS\u00a8\u2283\u2395NGET file 1\u2502\u2502file\u2502/tmp/file.txt\u2502\u2502 \u2502 \u2227 \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Reinstate the INDEX ERROR and run app.Main again at least twice. What do you notice about app.error ? Try to solve this issue. There is more than one valid solution.","title":"Error Handling and Debugging"},{"location":"Errors/#error-handling-and-debugging","text":"This is an abridged treatment of error handling that covers key points. You will also find useful: Chapter 6 of Mastering Dyalog APL (Chapter E in the 2009 edition) Dyalog webinars on error handling The online documentation: Error messages Stop controls Trace controls State indicator","title":"Error Handling and Debugging"},{"location":"Errors/#whats-in-a-name","text":"Study the following expression. It contains an error guard :: and the primitive functions format \u2355 and execute \u234e . )ns Names \u235d Create a namespace called Names Names.va\u2190({2 6 11::0 \u22c4 \u234e(\u2395UCS \u2375),'\u2190',\u2355\u2375}\u00a8\u23731E4)~0 \u235d Valid Assignment Character Codes Which three errors are trapped by the error guard? \u2395AV is the list of characters which was used before Unicode was introduced. How many valid assignment characters are in \u2395AV ? When are digits \u2395D not allowed in names? Why is 9109 9054 printed to the session when the expression is run? Another way to find valid naming characters is to filter \u2395AV using \u2395NC . Names.ava\u2190\u2395AV/\u23680\u2264\u2395NC\u236a\u2395AV \u235d \u2395AVU Valid Assignment Characters How do Names.va and Names.ava differ?","title":"What's in a Name?"},{"location":"Errors/#error-messages-and-error-codes","text":"You will have executed expressions which have resulted in some error messages by now. In fact I am certain of it because some of the previous example expressions have been deliberately written containing errors. LENGTH ERROR VALUE ERROR DOMAIN ERROR SYNTAX ERROR If you are trapping specific errors, you might find it useful to assign error numbers to descriptive names. For example, (INDEX RANK LENGTH VALUE)\u21903 4 5 6 . There are a number of similar techniques which can be used, some of which are described in the Dyalog webinar Error Handling - Part 1 . Find the error codes of the four error messages given above. Hint Try: 1 2+2 3\u2374\u23739 \u235d Write some expression to generate the error \u2395\u2190\u2395EN \u235d Inspect the Error Number of the last error \u2395\u2190\u2395EM 4 \u235d Inspect the Error Message for that number You can also search using APLcart Write a function ERROR which returns error numbers for in-built messages, given a simple character vector or nested vector of character vectors as argument. ERROR 'RANK' 4 ERROR 'LENGTH' 'DOMAIN' 5 11 Note Technically, \u2395EM and \u2395EN are event message and event number respectively. Most of the time you will be concerned about error events, but other types of events exist as well.","title":"Error Messages and Error Codes"},{"location":"Errors/#suspend-your-disbelief","text":"When an error occurs in a multi-line function , the interpreter will pause execution and show the tracer. \u2207 r\u2190x Interlace y [1] size\u21901 2\u00d7\u2374x [2] even\u21902\u00d7\u2373(\u2374x)[2] [3] r[;even]\u2190y [4] r[;even]-1\u2190x \u2207 \u2395RL \u2190 73 \u2395\u2190forecast \u2190 10\u00d7?4 6\u237455 Fig 6.4 from Mastering Dyalog APL: Trace window in the RIDE The state of your program is frozen in time. You can now: Inspect the values of variables Use )SI , \u2395SI or \u2395XSI to get a list of currently suspended functions Inspect or use the value of \u2395DM \u2395DMX to pass information about the error Edit the function to fix the issue Either double click blank space or use Shift+Enter while the text cursor is on a blank space to turn the tracer into an editor Edit the code to fix the issue Press Esc or click the cross button \u2bbe to save these changes and return to the tracer Continue execution by either: Press Enter to proceed one line at a time Click the trace action button to continue execution normally Type \u2192\u2395LC ( go-to quad LC ) to continue execution normally Sometimes it is better to execute a function line-by-line rather than wait for an error to occur. To do this, with the text cursor on the function-calling expression, either press Ctrl+Enter or click Action \u2192 Trace from the IDE menu. Executing, stepping into or editing a function with Enter , Ctrl+Enter and Shift+Enter can all be done while tracing through a suspended function.","title":"Suspend your disbelief"},{"location":"Errors/#cant-be-helped","text":"If you cannot fix the error immediately and would just like to return to the session, use one of: Press Esc to exit the current function Enter \u21920 into the session to exit the current function and resume the calling line Type \u2192 (naked branch) into the session to clear the last call on the stack Enter )RESET or )SIC into the session to clear the entire execution stack and return to the session","title":"Can't be helped"},{"location":"Errors/#gotta-trap-em-all","text":"The keyword :Trap ErrorNums allows a function to specify behaviour if an error with a number in the scalar or vector ErrorNums occurs. It can be used in conjunction with :Case N to execute some code if the error number is N and :Else for the other errors. All errors are trapped with :Trap 0 . For example: :Trap 3 4 5 6 11 \u235d Code to execute here :Case 3 \u2395\u2190'Index Error' :CaseList 5 6 11 \u2395\u2190'Length, Value or Domain Error' :Else \u2395\u2190'Rank Error' :EndTrap","title":"Gotta :Trap 'em all"},{"location":"Errors/#trap","text":"Before :Trap and other similar control structures were introduced, \u2395TRAP was the way to set error trapping behaviour. Nowadays, most people will use control structures for visual clarity in their new code. However, \u2395TRAP is still used to maintain style in existing code bases, and for certain behaviours that are not possible with :Trap . For example, we can alter the behaviour when an error occurs in the session: \u2395trap\u21905 'E' '''Silly!''' 1 2 + 3 4 5 Silly! Note Some errors, such as SYSTEM ERROR , are not trappable. Not only does the trap execute custom code when a LENGTH ERROR occurs, but it also prevents the tracer from automatically opening when such an error occurs in a function. \u2207 r\u2190l Lerror r [1] l+r \u2207 1 2 Lerror 3 4 5 Silly! However, those function calls are still suspended as can be seen using the state indicator: 1 2 Lerror 3 4 5 Silly! )si #.Lerror[1]* #.Lerror[1]* The 2nd element of an item in \u2395TRAP determines what happens to the call stack (this cannot be achieved with :Trap ): E : execute expression named in the 3rd element C : cut back the stack to where \u2395TRAP is localised and then execute expression named in the 3rd element \u2395TRAP\u219011 'C' '(\u2191\u2395DM)' Foo DOMAIN ERROR Foo[1] 1\u00f70 \u2227 0\u220a\u2374\u2395SI 1 N : next - skip this error (no 3rd element) This is only meaningful if there is a trap 0 higher up the stack. It can be used for trapping every error except a specific one: \u2207 Trap6 x;\u2395TRAP [1] \u235d Handle all but value errors [2] \u2395TRAP\u2190(6 'N')(0 'E' '\u2192ERROR') [3] \u234ex \u235d x contains a program to run [4] \u21920 [5] ERROR:'Uh oh!' \u2207 S : stop - normal error handling (no 3rd element) This is typically used with a debugging switch: \u2395TRAP\u2190(1+DEBUG)\u2283(0 'E' 'Bad')(0 'S') Warning The E (execute immediately) action code is very tricky to use and best avoided. Prefer to use C , or even better, a :Trap control structure. Reset error trapping to default behaviour: \u2395TRAP\u2374\u2368\u21900 In general, you assign a nested vector of 3-element vectors to \u2395TRAP , each of the form (numbers 'X' 'string') .","title":"\u2395TRAP"},{"location":"Errors/#who-needs-to-know","text":"Errors can occur due to a mistakenly written piece of code. However, even a perfectly valid function can trigger errors if run with input which is outside of its domain. Note It is best not to rely on error trapping for behaviour, in part because future extensions to the language may introduce valid behaviours in those cases. You should test inputs explicitly using APL primitives. It can be tempting to use :Trap 0 to force alternative behaviour for unexpected inputs. However, trapping all errors should only really be done in order for your application to fail safely for the sake of end users. Best practice is to think carefully about the properties of valid inputs to your functions, and signal errors or otherwise indicate to the user that an invalid input has been attempted.","title":"Who needs to know?"},{"location":"Errors/#pass-it-on","text":"\u2395DMX is a system object containing information about the last occuring error. Recent versions of Dyalog can display its contents in a human-readable JSON format: (\u2395JSON\u2360'Compact' 0)\u2395DMX Note Your code should not assume that the properties in \u2395DMX will stay the same across versions of Dyalog. See the online documentation for more information about \u2395DMX . The system function \u2395SIGNAL can be used to generate errors. Errors may be signalled without a guilty expression, or custom error codes and messages may be signalled. Monadic \u2395SIGNAL can be used to provide custom values for \u2395DMX . \u2395SIGNAL\u2282('EN' 666)('Message' 'The Devil''s Error')('Vendor' 'Satan') Dyadic \u2395SIGNAL can be used to conveniently set the event message and event number. Slightly confusingly, the \u2395EM event message is different from the error message member of the D iagnostic M essage Extended : \u2395DMX.Message . 'Yo!'\u2395SIGNAL 42 \u2395EM \u2395DMX.Message Error signalling can be used to provide custom error messages, as well as to prevent the application from suspending in the tracer, which can be confusing for end users of your application who do not know APL. You might prefer that user-facing functions trap and re-signal errors, whereas utilities intended for use by APLers in the session might be left to suspend on error.","title":"Pass it on"},{"location":"Errors/#error-number-ranges","text":"Event numbers 1-99 are generated by APL. Event numbers 1-999 can be generated by the user. Error 0 means \"any error\". Errors 1001-1008 are interrupts (e.g. break). Error 1000 means \"any interrupt\".","title":"Error number ranges"},{"location":"Errors/#trace","text":"Specify line numbers within a function or operator to have the results of expressions on those lines output to the session when executed. Attempts to set trace controls in a locked function or operator (see \u2395LOCK ) are ignored.","title":"\u2395TRACE"},{"location":"Errors/#the-stack","text":"The execution stack (sometimes referred to as just the stack ) is the accumulation of functions either suspended or currently mid-execution. It can be inspected using )SI , \u2395SI and \u2395XSI . If you attempt to run or re-run functions without having cleared the stack, then the stack simply builds up until the workspace is full. \u2395VR'Foo' \u2207 Foo [1] 1\u00f70 \u2207 Foo DOMAIN ERROR: Divide by zero Foo[1] 1\u00f70 \u2227 Foo DOMAIN ERROR: Divide by zero Foo[1] 1\u00f70 \u2227 )SI #.Foo[1]* #.Foo[1]* There are a number of system variables to deal with functions on the stack: \u2395SI The names of functions on the stack \u2395LC The line numbers at which each function is suspended \u2395NSI The namespaces prior to the call as character vectors \u2395RSI The namespaces prior to the call as scalar references \u2395XSI The full namespace paths of functions on the stack \u2395STACK The stack of functions and state descriptions To get the same diagnostic error messages printed to the session without building up the stack, you can set \u2395TRAP to use a custom error reporting function: \u2207 Error [1] \u2395DMX.(OSError{\u2375,2\u233d(\u00d7\u2262\u2283\u236c\u23742\u233d\u237a,\u2282'')/'\") (\"',\u2283\u236c\u23742\u233d\u2286\u237a}Message{\u2375,\u237a,\u2368': '/\u2368\u00d7\u2262\u237a}\u2283\u236c\u2374DM,\u2282'') [2] \u21911\u2193\u2395DMX.DM \u2207 \u2395TRAP\u21900 'C' '#.Error' Foo DOMAIN ERROR: Divide by zero Foo[1] 1\u00f70 \u2227 )SI The long, awkward expression in Error above can be found in APLcart .","title":"The stack"},{"location":"Errors/#problem-set-12","text":"","title":"Problem set 12"},{"location":"Errors/#help-im-trapped","text":"Here we will write a simple calculator program to divide two vector arguments. When the function fails it should return to the session and leave the stack empty, but the values of \u2395DM and \u2395EN should change. Write a program (a tradfn called Divide ) which explicitly tests its input and signals an appropriate error for invalid arguments. Rewrite the program as a tradfn called DivideQ which uses \u2395TRAP instead of testing its arguments. Rewrite the program as a tradfn called DivideC which uses :Trap . Rewrite the program as a dfn DivideD with error guards. Example output: 1 2 3 Divide ,5 0.2 0.4 0.6 3 Divide ,4 RANK ERROR: Must have both vector arguments 3 Divide,4 \u2227 1 2 Divide 1 2 3 LENGTH ERROR: Mismatched left and right argument shapes 1 2 Divide 1 2 3 \u2227 1 2 Divide 1 0 DOMAIN ERROR: Divide by zero 1 2 Divide 1 0 \u2227","title":"Help I'm Trapped"},{"location":"Errors/#prefix-agreement-operator","text":"Leading axis agreement is a proposed extension to scalar extension which will automatically apply dyadic functions between cells when the leading axes of two arrays match. 2 3 \u00d7_L 2 3\u2374\u23736 2 4 6 12 15 18 If the leading axis lengths do not match at all, then the operator will issue an error. Write a version of the prefix agreement operator _L which manually checks whether the argument shapes have a matching prefix, and signals a custom error otherwise. 2 3\u00d7_L 1 3\u2374\u23736 LEADING AXIS MISMATCH 2 3\u00d7_L 1 3\u2374\u23736 \u2227 \u2395EN 5 Hint If you are not sure how to write the functionality of the leading axis operator, use the definition from the APL Wiki article: {\u237a \u237a\u237a\u2364(-\u237a\u230a\u2365(\u2262\u2374)\u2375)\u22a2\u2375}","title":"Prefix agreement operator"},{"location":"Errors/#testing-for-types","text":"Use the documentation and your own knowledge to find expressions to test for the following properties of arrays: Numeric arrays Character arrays Integers Simple arrays (non-nested) Uniformly nested arrays Scalars, vectors and matrices Singleton values Namespace references Namespace names as character arrays Symmetric matrices In general, you assign a nested vector of 3-element vectors to \u2395TRAP , each of the form (numbers 'X' 'string') . In terms of its structure, what happens to the value of \u2395TRAP if you only assign a single 3-element vector?","title":"Testing for types"},{"location":"Errors/#can-you-fix-it","text":"This scripted namespace defines a toy app to read a UTF-8 text file and convert its data to hexadecimal representation. :Namespace app file\u2190'/tmp/file.txt' \u2207 Main Hex file \u2207 \u2207 hex\u2190Hex file;bytes;\u2395TRAP bytes\u2190'UTF-8'\u2218\u2395UCS\u00a8\u2283\u2395NGET file 1 hex\u2190\u2191{,\u23493\u2191(\u2395D,\u2395A)[16 16\u22a4\u2375]}\u00a8bytes \u2207 :EndNamespace The author of the function modifies it to exhibit certain error handling behaviours. Unfortunately, their code has bugs. Investigate the following scenarios and try to solve the issues. The author has set up error trapping. They are aware of a potential FILE NAME ERROR , but have also set up a global trap in case any unexpected errors occur. :Namespace app file\u2190'/tmp/file.txt' \u2207 Main;\u2395TRAP \u2395TRAP\u21900 'E' 'Report \u22c4 \u21920' Hex file \u2207 \u2207 hex\u2190Hex file;bytes \u2395TRAP\u219022 'C' '\u2192ERROR' bytes\u2190'UTF-8'\u2218\u2395UCS\u00a8\u2283\u2395NGET file 1 hex\u2190\u2191{,\u23493\u2191(\u2395D,\u2395A)[16 16\u22a4\u2375]}\u00a8bytes \u21920 ERROR: Report \u2207 \u2207 Report error\u2190\u2191\u2395DM \u2395\u2190'An error occurred. See app.error for more information.' \u2207 :EndNamespace Unfortunately, the function suspends with an unexpected VALUE ERROR . VALUE ERROR: Undefined name: ERROR \u2192ERROR \u2227 After modifying the code, the function should print to the session: app.Main An error occurred. See app.error for more information. The variable app.error should be populated: \u2395\u2190app.error FILE NAME ERROR Hex[2] bytes\u2190'UTF-8'\u2218\u2395UCS\u00a8\u2283\u2395NGET file 1 \u2227 Now that the file name error is handled, they want to test the application using a file. Paste the following into a text editor and save it somewhere. Update app.file to point to the correct location. sample text Running app.Main reveals either 1 or 2 more bugs: Running the function now results in an INDEX ERROR . The global trap did not catch the INDEX ERROR . Fix the remaining bugs. The application should successfully convert the file now: app.Main 73 61 6D 70 6C 65 20 74 65 78 74 Finally, the author decides it would be more useful if app.error contained more information about the error, and also that the Report function should display this directly in the session as well. :Namespace app file\u2190'/tmp/file.txt' \u2207 Main;\u2395TRAP \u2395TRAP\u21900 'E' 'Report {\u2375(\u234e\u2375)}\u00a8\u2395NL\u00af2 \u22c4 \u21920' Hex file \u2207 \u2207 hex\u2190Hex file;bytes \u2395TRAP\u219022 'C' '\u2192ERROR' bytes\u2190'UTF-8'\u2218\u2395UCS\u00a8\u2283\u2395NGET file 1 hex\u2190\u2191{,\u23493\u2191(\u2395D,\u2395A)[16 16\u22a4\u2375]}\u00a8bytes \u21920 ERROR: Report\u2282'file' file \u2207 \u2207 Report names_values error\u2190\u2282\u2191\u2395DM error,\u2190\u2282\u2191names_values \u2395\u2190'An error occurred. Error information in app.error:' \u2395\u2190error \u2207 :EndNamespace Turn ]box -fns=on Reinstate the FILE NAME ERROR and run app.Main again. app.Main An error occurred. Error information in app.error: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502FILE NAME ERROR \u2502\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502Hex[2] bytes\u2190'UTF-8'\u2218\u2395UCS\u00a8\u2283\u2395NGET file 1\u2502\u2502file\u2502/tmp/file.txt\u2502\u2502 \u2502 \u2227 \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Reinstate the INDEX ERROR and run app.Main again at least twice. What do you notice about app.error ? Try to solve this issue. There is more than one valid solution.","title":"Can you fix it?"},{"location":"Help/","text":"Getting Help Following this course should give you at least an overview of all of the aspects of Dyalog which are needed to solve problems and build applications. By the end, hopefully you'll start to feel comfortable solving problems, reading and writing APL, and at least have an idea of where to look when you need to do some systems programming or interfacing with the outside world. To that end, here is a list of some of the resources available to you if you ever get stuck. What does this thing do? If you need help with a particular primitive or quad-name, the Dyalog online help can answer what does this do? -style questions. Press F1 in the session while highlighting a construct to go to its help page. \u2363 \u235d Primitives \u2395THIS \u235d Quad-names HTMLRenderer \u235d Some keywords related to specific objects Many of the keywords which have documentation pages are the names of GUI objects . It is also possible to set a custom URL to use for queries when the interpreter doesn't recognise something. In the IDE for Microsoft Windows, go to Options \u2192 Configure \u2192 Help/DMX . Tick \"Use online help for non-Dyalog topics\" and set the custom URL of your choice. For example, you can try using https://aplcart.info/?q=%s , so that F1 brings up the aplcart website search for that term. In the RIDE, F1 opens a browser window to the Dyalog online documentation . The online help is a subset of the full materials available from the Documentation Centre . Version Information Documentation for previously released versions of Dyalog is still available online. Full documentation for Dyalog version 12.1 Online help system for 12.1 Full documentation for Dyalog version 17.1 . Online help system for 17.1 How do I do this? This is a much more difficult thing to overcome. Sometimes you have an idea of what you want to achieve, but you either aren't sure what constructs are available to help you achieve it, or you aren't sure that the solution you've come up with is the best way to go about it. If you need help with how to do something , try searching in APLcart , the searchable library of idiomatic expressions. Has this been done? We strongly recommend that you spend some time on a regular basis reading and exploring the existing APL media. As a language with a rich history, there have been a huge number of conferences, published papers and presentations where users and implementors discuss their activities and achievements. Some of these are listed on the further reading page. Talk to humans If you cannot find a solution on APLcart, please ask on Stack Overflow . There are a number of keen APLers who monitor this site and will eagerly answer any questions asked there. Introduce yourself in the APL Orchard Stack Exchange chat room, where you can usually get same-day replies to your queries. To get permission to post messages, see apl.wiki/APL_Orchard#Access . As well as Stack Overflow, the Dyalog forums are full of interesting discussions and are quite active. The APL Wiki has hundreds of articles about both the history of APL, as well as specific language features and usage examples.","title":"Getting Help"},{"location":"Help/#getting-help","text":"Following this course should give you at least an overview of all of the aspects of Dyalog which are needed to solve problems and build applications. By the end, hopefully you'll start to feel comfortable solving problems, reading and writing APL, and at least have an idea of where to look when you need to do some systems programming or interfacing with the outside world. To that end, here is a list of some of the resources available to you if you ever get stuck.","title":"Getting Help"},{"location":"Help/#what-does-this-thing-do","text":"If you need help with a particular primitive or quad-name, the Dyalog online help can answer what does this do? -style questions. Press F1 in the session while highlighting a construct to go to its help page. \u2363 \u235d Primitives \u2395THIS \u235d Quad-names HTMLRenderer \u235d Some keywords related to specific objects Many of the keywords which have documentation pages are the names of GUI objects . It is also possible to set a custom URL to use for queries when the interpreter doesn't recognise something. In the IDE for Microsoft Windows, go to Options \u2192 Configure \u2192 Help/DMX . Tick \"Use online help for non-Dyalog topics\" and set the custom URL of your choice. For example, you can try using https://aplcart.info/?q=%s , so that F1 brings up the aplcart website search for that term. In the RIDE, F1 opens a browser window to the Dyalog online documentation . The online help is a subset of the full materials available from the Documentation Centre . Version Information Documentation for previously released versions of Dyalog is still available online. Full documentation for Dyalog version 12.1 Online help system for 12.1 Full documentation for Dyalog version 17.1 . Online help system for 17.1","title":"What does this thing do?"},{"location":"Help/#how-do-i-do-this","text":"This is a much more difficult thing to overcome. Sometimes you have an idea of what you want to achieve, but you either aren't sure what constructs are available to help you achieve it, or you aren't sure that the solution you've come up with is the best way to go about it. If you need help with how to do something , try searching in APLcart , the searchable library of idiomatic expressions.","title":"How do I do this?"},{"location":"Help/#has-this-been-done","text":"We strongly recommend that you spend some time on a regular basis reading and exploring the existing APL media. As a language with a rich history, there have been a huge number of conferences, published papers and presentations where users and implementors discuss their activities and achievements. Some of these are listed on the further reading page.","title":"Has this been done?"},{"location":"Help/#talk-to-humans","text":"If you cannot find a solution on APLcart, please ask on Stack Overflow . There are a number of keen APLers who monitor this site and will eagerly answer any questions asked there. Introduce yourself in the APL Orchard Stack Exchange chat room, where you can usually get same-day replies to your queries. To get permission to post messages, see apl.wiki/APL_Orchard#Access . As well as Stack Overflow, the Dyalog forums are full of interesting discussions and are quite active. The APL Wiki has hundreds of articles about both the history of APL, as well as specific language features and usage examples.","title":"Talk to humans"},{"location":"Interfaces/","text":"External Interfaces In an ideal world, we'd spend our entire lives blissfully in the warm comfort of the APL session. All of our data would magically appear and we would write perfect, beautiful algorithms to solve idealised problems. In the real world, we must interface with external systems. After all, the entire point of learning this tool is to use it to solve real world problems. Name Association Sufficiently knowledgeable programmers can interface directly between APL and a compiled library using \u2395NA . Input and output data types must be explicitly declared. For more information see the online documentation about \u2395NA . APL as a Shared Library It is also possible to bundle an APL application as a compiled native shared or static object (.dll, .dylib or .so) which exposes APL functions and makes them accessible via another programming language or application's foreign function interface . Examples of usage and links to documentation are available on github.com/Dyalog/NativeLib Py'n'APL Start instances of Python from Dyalog, and start instances of Dyalog from Python. Leverage the convenience of Python's vast collection of libraries and combine it with the expressive power of APL. See github.com/Dyalog/pynapl for more information. RSConnect and RConnect R is a very popular language with a large collection of statistical libraries. Two R interfaces exist for Dyalog: RSconnect R interface for Dyalog using Rserve RConnect R interface for Dyalog using rscproxy .NET Microsoft's .NET Framework contains a plethora of useful libraries for business applications. To enable reference to .NET namespaces, set \u2395USING : \u2395USING\u2190'' System.TimeZone.CurrentTimeZone.StandardName GMT Standard Time Set the system variable \u2395USING in order to access names within .NET namespaces. \u2395USING\u2190'System' TimeZone.CurrentTimeZone.StandardName GMT Standard Time In recent years, Microsoft have been developing a cross-platform equivalent called .NET Core (or .NET 5). This allows the same libraries to be used on Microsoft Windows, macOS and Linux. It must be installed separately and enabled by setting the configuration parameter DYALOG_NETCORE=1 . COM/OLE Dyalog is able to directly control certain Microsoft applications using the Component Object Model . For examples, see: Dyalog Webinar: APL and Microsoft Excel Document: Charting the APL/Excel waters Chapter 9 of the Dyalog for Microsoft Windows Interfaces Guide . \u2395NULL The core APL language does not have a \"null\" value as such. While you might think that the empty numeric vector \u236c could be considered a type of \"null\", it already has type information associated with it so it doesn't really work - it is more accurate to call it an empty numeric vector . In order to cooperate with the COM and .NET interfaces described above, Dyalog has a proper null value which can be invoked with \u2395NULL . Conga and HTTP Conga is the core TCP/IP framework for Dyalog. On top of this, there are several higher level utilities for various web-based applications. HttpCommand can be used to issue requests to web servers and retrieve data. Jarvis is a very convenient way to expose APL functions as either a JSON or RESTful web service. It can even serve a simple static web interface and is the web service component of TryAPL . DUI (Dyalog User Interface) is a cross-platform GUI framework for building web-based front-ends in APL. It includes its own web server, so the same code can be used for a standalone desktop application, web app and website. There is an example site for its predecessor (identical in most ways, but without standalone desktop deployment) called MiServer .","title":"External Interfaces"},{"location":"Interfaces/#external-interfaces","text":"In an ideal world, we'd spend our entire lives blissfully in the warm comfort of the APL session. All of our data would magically appear and we would write perfect, beautiful algorithms to solve idealised problems. In the real world, we must interface with external systems. After all, the entire point of learning this tool is to use it to solve real world problems.","title":"External Interfaces"},{"location":"Interfaces/#name-association","text":"Sufficiently knowledgeable programmers can interface directly between APL and a compiled library using \u2395NA . Input and output data types must be explicitly declared. For more information see the online documentation about \u2395NA .","title":"Name Association"},{"location":"Interfaces/#apl-as-a-shared-library","text":"It is also possible to bundle an APL application as a compiled native shared or static object (.dll, .dylib or .so) which exposes APL functions and makes them accessible via another programming language or application's foreign function interface . Examples of usage and links to documentation are available on github.com/Dyalog/NativeLib","title":"APL as a Shared Library"},{"location":"Interfaces/#pynapl","text":"Start instances of Python from Dyalog, and start instances of Dyalog from Python. Leverage the convenience of Python's vast collection of libraries and combine it with the expressive power of APL. See github.com/Dyalog/pynapl for more information.","title":"Py'n'APL"},{"location":"Interfaces/#rsconnect-and-rconnect","text":"R is a very popular language with a large collection of statistical libraries. Two R interfaces exist for Dyalog: RSconnect R interface for Dyalog using Rserve RConnect R interface for Dyalog using rscproxy","title":"RSConnect and RConnect"},{"location":"Interfaces/#net","text":"Microsoft's .NET Framework contains a plethora of useful libraries for business applications. To enable reference to .NET namespaces, set \u2395USING : \u2395USING\u2190'' System.TimeZone.CurrentTimeZone.StandardName GMT Standard Time Set the system variable \u2395USING in order to access names within .NET namespaces. \u2395USING\u2190'System' TimeZone.CurrentTimeZone.StandardName GMT Standard Time In recent years, Microsoft have been developing a cross-platform equivalent called .NET Core (or .NET 5). This allows the same libraries to be used on Microsoft Windows, macOS and Linux. It must be installed separately and enabled by setting the configuration parameter DYALOG_NETCORE=1 .","title":".NET"},{"location":"Interfaces/#comole","text":"Dyalog is able to directly control certain Microsoft applications using the Component Object Model . For examples, see: Dyalog Webinar: APL and Microsoft Excel Document: Charting the APL/Excel waters Chapter 9 of the Dyalog for Microsoft Windows Interfaces Guide .","title":"COM/OLE"},{"location":"Interfaces/#null","text":"The core APL language does not have a \"null\" value as such. While you might think that the empty numeric vector \u236c could be considered a type of \"null\", it already has type information associated with it so it doesn't really work - it is more accurate to call it an empty numeric vector . In order to cooperate with the COM and .NET interfaces described above, Dyalog has a proper null value which can be invoked with \u2395NULL .","title":"\u2395NULL"},{"location":"Interfaces/#conga-and-http","text":"Conga is the core TCP/IP framework for Dyalog. On top of this, there are several higher level utilities for various web-based applications. HttpCommand can be used to issue requests to web servers and retrieve data. Jarvis is a very convenient way to expose APL functions as either a JSON or RESTful web service. It can even serve a simple static web interface and is the web service component of TryAPL . DUI (Dyalog User Interface) is a cross-platform GUI framework for building web-based front-ends in APL. It includes its own web server, so the same code can be used for a standalone desktop application, web app and website. There is an example site for its predecessor (identical in most ways, but without standalone desktop deployment) called MiServer .","title":"Conga and HTTP"},{"location":"Interpreter-internals/","text":"Interpreter Internals Just some of the nitty-gritty under the covers. Storage Memory allocated to store an array needs space for: Each element of the array (which could be a reference to another array) 8\u00d7\u2262\u2374array bytes for the shape ( 4\u00d7 in 32-bit) 4 bytes for the type/rank For a reference, the object requires an 8-byte pointer, plus space for the contents of the object. Data types Internally, Dyalog represents data with the following types. As a program runs, occasionally the interpreter will squeeze arrays into the smallest data type that can represent a particular figure, which helps keep memory usage low and may allow the interpreter to use vectorised instructions for certain operations on certain data types. Character \u2395DR'APL' \u235d 1-byte 80 \u2395DR'\u914d\u5217' \u235d 2-byte 160 \u2395DR\u2395\u2190\u2395UCS 128077 \u235d 4-byte \ud83d\udc4d 320 Number \u2395DR 1 0 1 0 1 0 \u235d 1 bit 11 \u2395DR 42 \u235d 1 byte 83 \u2395DR 128 \u235d 2 byte 163 \u2395DR 2*15 \u235d 4 byte 323 \u2395DR 0J1 \u235d Complex (2\u00d78 byte double) 1289 Floating-point representation There are also 16-byte decimal floating point numbers available, but you need to enable them with \u2395FR . \u2395PP\u219034 \u25cb1 3.141592653589793 \u2395FR\u2190645 \u235d 64-bit float (default) \u25cb1 3.141592653589793 \u2395FR\u21901287 \u235d 128-bit decimal \u25cb1 3.141592653589793238462643383279503 Comparison tolerance APL systems prefer to act like traditional arithmetic where possible. However, the base-2 (binary) representation used by computers is unable to represent certain decimal numbers precisely. Therefore, floating point arithmetic voids certain mathematical properties: \\({{1}\\over{3}} = 3 \\times {{5}\\over{9}} \\div 5\\) \u2395CT\u21901e\u00af14 \u235d Default comparison tolerance (1\u00f73)=3\u00d7(5\u00f79)\u00f75 1 \u2395CT\u21900 \u235d No comparison tolerance (1\u00f73)=3\u00d7(5\u00f79)\u00f75 0 \u2395FR\u2190645 \u22c4 \u2395CT\u21901E\u00af14 {\u2191\u2375(1=1+10*-\u2375)}\u237316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 \u2395FR\u21901287 \u22c4 \u2395\u2190\u2395DCT 1E\u00af28 {\u2191\u2375(1=1+10*-\u2375)}\u237330 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 For exact comparisons set \u2395CT to 0 , but beware: 10=+/100\u23740.1 1 \u2395CT\u21900 10=+/100\u23740.1 0 10-+/100\u23740.1 1.953992523E\u00af14 Value types If more than one name points to the same array value: a\u2190b\u21901 2 3 4 then there is a reference count internally, and only one copy of the data is stored in memory. If one of those arrays is modified: b[2]\u219099 then a copy of the data is taken at that point so that other arrays are unaffected: a b \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u25021 2 3 4\u25021 99 3 4\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 For a nested array, however, the elements are separate. a\u2190b\u2190(1 2 3)(4 5) if one of the elements is modified b[\u22822 1]\u219099 then the other elements remain shared between names. In this example, the 1 2 3 array remains shared. Reference types While APL arrays are pass-by-value, namespaces and other objects are pass-by-reference. nsref\u2190\u2395NS\u236c jsonref\u2190\u2395JSON'{}' \u2395FIX':Class myclass' ':Endclass' \u2395DR\u00a8nsref jsonref myclass 326 326 326 Although namespaces are pass-by-reference, the references themselves are still values: (ns1 ns2)\u2190\u2395NS\u00a82\u2374\u2282\u236c (ns1 ns2).var\u219042 99 a\u2190ns1 a.var 42 a\u2190ns2 a.var 99 Configuration parameters Many aspects of the interpreter environment can be modified before runtime using configuration parameters . The values of configuration parameters are determined by a hierarchy of scope on the operating system. On Microsoft Windows, these are often registry settings at the base level. On Unix-like systems, they are environment variables. For example, we can set parameters on the command line in a batch file before starting Dyalog. We can even create custom parameters. Save the following as a .bat file and run it on Windows @SET FOO=bar @START \"Dyalog\" \"C:\\Program Files\\Dyalog\\Dyalog APL-64 18.0 Unicode\\dyalog.exe\" See the value of a configuration parameter with \u2395NQ : \u2395\u21902\u2395NQ'.' 'GetEnvironment' 'FOO' bar You might find it useful to read the Dyalog for Microsoft Windows Installation and Configuration Guide and the Dyalog for UNIX Installation and Configuration Guide . Recent versions of Dyalog support universal configuration files which work across all supported platforms. What am I running? Here are some useful code snippets for finding information about the currently running interpreter: What version of Dyalog am I running? '#'\u2395WG'APLVersion' \u235d '#' is '.' in older versions of Dyalog For error reports, get the BuildID: \u2395\u21902\u2395NQ'#' 'GetBuildID' Am I a Unicode interpreter? 80=\u2395DR'' Am I big endian? \u236c\u237483 \u2395DR 256 What is my word width? 32\u00d71+'4'\u220a\u2283#\u2395WG'APLVersion' \u235d 64-bit has 64 in the platform name. Otherwise the interpreter is 32-bit. Performance This course is intended to teach not only the symbols, syntax and system interactions of Dyalog APL, but also to try and teach you the APL way . This is a combination of array-oriented problem solving and ability to combine primitives to solve all manner of problems using computers. There are some inherent benefits to APL, such as the fact that exploring with APL can often lead you to optimal solutions to particular types of problems. Not only this, but the terseness makes it very easy to experiment and play with different approaches to the same problem. Besides APL itself, however, there are particular techniques, considerations, and special optimisations within the Dyalog interpreter that you should be aware of in case you find a performance bottleneck in your application and are wondering how to solve it. Flat array techniques Nested arrays are a very convenient construct and can be used to write incredibly elegant expressions for certain operations. For example: \u2262\u00a8\u2286\u23681 1 1 0 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1 1 3 4 2 4 4 However, for long arguments this statement involves allocating many potentially disparate regions of memory and chasing pointers. Try to think of an approach which uses only flat arrays. Answer One solution from APLcart : (0~\u2368\u00af1-2-/\u2218\u23781,1,\u2368~) Of course, for certain arguments simply having more functions can be a performance penalty. Compare ]runtime of the two expressions with short\u21901=?10\u23742 and long\u21901=?1e6\u23742 Peppery code One of the code smells in APL is large amounts of code to achieve something relatively simple. This is usually (but not always!) an indication that the problem can be thought of in a different way to achieve a more elegant and efficient solution. Another code smell is when a solution is littered with the each operator F\u00a8 . These are explicit looping operations and often suggest that the code can be re-written to take advantage of the implicit iteration and potential parallelisation of the core primitives acting on flat arrays. arg\u2190?5 3\u237410 ]runtime -c \"{\u230a0.5+(+\u233f\u00f7\u2262)\u2349\u2375}arg\" \"{\u230a0.5+(+/\u2375)\u00f7\u2283\u233d\u2374\u2375}arg\" \"{\u230a0.5+\u00a8(+/\u00a8s)\u00f7c\u2190\u2262\u00a8s\u2190\u2193\u2375}arg\" {\u230a0.5+(+\u233f\u00f7\u2262)\u2349\u2375}arg \u2192 1.1E\u00af6 | 0% \u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395 {\u230a0.5+(+/\u2375)\u00f7\u2283\u233d\u2374\u2375}arg \u2192 8.6E\u00af7 | -25% \u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395 {\u230a0.5+\u00a8(+/\u00a8s)\u00f7c\u2190\u2262\u00a8s\u2190\u2193\u2375}arg \u2192 1.8E\u00af6 | +60% \u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395 Loop sometimes Some types of algorithms really aren't amenable to parallelisation and array-oriented techniques. These are usually problems with heavy dependence on intermediate results. Sometimes they can be encoded in a custom scan or reduction, but the overall algorithm isn't able to take advantage of parallelisation that primitive scans and reductions can. Another consideration is that sometimes an elegant-looking solution in APL is quite inefficient. Take the prime number filter we saw early on: Primes \u2190 {\u23782=+\u233f0=\u2218.|\u2368\u2373\u2375} An alternative coding uses the multiplication table: Primes \u2190 {i~\u2218.\u00d7\u2368i\u21901\u2193\u2373\u2375} Of course, the outer product \u2218.F indicates that the number of calculations to compute both of these solutions increases with the square of the input size. We say they have a computational complexity \" of order n squared \" or \\(O(n^2)\\) in big-O notation . This is a very inefficient way to find prime numbers. To see discussions around more efficient ways to compute prime numbers in APL, see the dfns page on prime numbers . Put simply, the fastest algorithm in general is the one which performs the fewest computations. Sometimes there are solutions in APL which use a relatively large amount of memory but are fast in time due to optimised primitives. However, sometimes the domain of the problem grows so large that even these solutions are outperformed by a scalar looping solution. When this is the case, if performance is very important for this part of your application, it can be a good idea to search for pre-existing high performance solutions, or to write the solution in a lower level language, and use \u2395NA to integrate it with your APL code. Try to find an optimised expression which uses the rank operator F\u2364k . What is the computational complexity of a custom reduction F/\u2375 ? What is the computational complexity of a custom scan? How do custom scans and reductions compare with primitive scans and reductions for + - \u00d7 \u00f7 ? Idioms APL idioms are short expressions to perform certain tasks. APLcart is a comprehensive, searchable list of idioms. Some of these include slightly obscure but performant versions of particular tasks, especially those related to partitioned functions . In Dyalog APL, there are also \"idioms\" which are specially recognised phrases, or combinations of characters, which are treated as individual tokens and executed with special code, rather than parsed symbol-by-symbol and executed function-at-a-time. These offer significant performance improvements for particular tasks, and are all listed: latest 17.1 12.1 Philosophical tangent In an ideal world, programmers could focus on writing purely the \"most readable\" or \"most maintainable\" versions of their code. Or, in some sense, simply write \"whatever feels right\" and the interpreter or compiler could analyse the program and determine the optimal. This is part of what compilers hope to achieve. However, even in one the strongest attempts at this so far, Julia, they emphasise that you still need to learn to write \"idiomatic Julia\" code. This means understanding how the language works both in terms of semantics and which constructs can be written in a particular way to lead to high performance. In Dyalog APL, one example of this is in the primitive operators. The key operator F\u2338 applies its operand function F to grouped major cells of its argument array. An alternative approach is to have a function {\u2282\u2375}\u2338 perform the grouping first and then to apply using each F\u00a8{\u2282\u2375}\u2338 . The end result of the computation is the same, but by having an operator, the interpreter implementors can use especially efficient special code for certain operand functions.","title":"Interpreter Internals"},{"location":"Interpreter-internals/#interpreter-internals","text":"Just some of the nitty-gritty under the covers.","title":"Interpreter Internals"},{"location":"Interpreter-internals/#storage","text":"Memory allocated to store an array needs space for: Each element of the array (which could be a reference to another array) 8\u00d7\u2262\u2374array bytes for the shape ( 4\u00d7 in 32-bit) 4 bytes for the type/rank For a reference, the object requires an 8-byte pointer, plus space for the contents of the object.","title":"Storage"},{"location":"Interpreter-internals/#data-types","text":"Internally, Dyalog represents data with the following types. As a program runs, occasionally the interpreter will squeeze arrays into the smallest data type that can represent a particular figure, which helps keep memory usage low and may allow the interpreter to use vectorised instructions for certain operations on certain data types.","title":"Data types"},{"location":"Interpreter-internals/#character","text":"\u2395DR'APL' \u235d 1-byte 80 \u2395DR'\u914d\u5217' \u235d 2-byte 160 \u2395DR\u2395\u2190\u2395UCS 128077 \u235d 4-byte \ud83d\udc4d 320","title":"Character"},{"location":"Interpreter-internals/#number","text":"\u2395DR 1 0 1 0 1 0 \u235d 1 bit 11 \u2395DR 42 \u235d 1 byte 83 \u2395DR 128 \u235d 2 byte 163 \u2395DR 2*15 \u235d 4 byte 323 \u2395DR 0J1 \u235d Complex (2\u00d78 byte double) 1289","title":"Number"},{"location":"Interpreter-internals/#floating-point-representation","text":"There are also 16-byte decimal floating point numbers available, but you need to enable them with \u2395FR . \u2395PP\u219034 \u25cb1 3.141592653589793 \u2395FR\u2190645 \u235d 64-bit float (default) \u25cb1 3.141592653589793 \u2395FR\u21901287 \u235d 128-bit decimal \u25cb1 3.141592653589793238462643383279503","title":"Floating-point representation"},{"location":"Interpreter-internals/#comparison-tolerance","text":"APL systems prefer to act like traditional arithmetic where possible. However, the base-2 (binary) representation used by computers is unable to represent certain decimal numbers precisely. Therefore, floating point arithmetic voids certain mathematical properties: \\({{1}\\over{3}} = 3 \\times {{5}\\over{9}} \\div 5\\) \u2395CT\u21901e\u00af14 \u235d Default comparison tolerance (1\u00f73)=3\u00d7(5\u00f79)\u00f75 1 \u2395CT\u21900 \u235d No comparison tolerance (1\u00f73)=3\u00d7(5\u00f79)\u00f75 0 \u2395FR\u2190645 \u22c4 \u2395CT\u21901E\u00af14 {\u2191\u2375(1=1+10*-\u2375)}\u237316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 \u2395FR\u21901287 \u22c4 \u2395\u2190\u2395DCT 1E\u00af28 {\u2191\u2375(1=1+10*-\u2375)}\u237330 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 For exact comparisons set \u2395CT to 0 , but beware: 10=+/100\u23740.1 1 \u2395CT\u21900 10=+/100\u23740.1 0 10-+/100\u23740.1 1.953992523E\u00af14","title":"Comparison tolerance"},{"location":"Interpreter-internals/#value-types","text":"If more than one name points to the same array value: a\u2190b\u21901 2 3 4 then there is a reference count internally, and only one copy of the data is stored in memory. If one of those arrays is modified: b[2]\u219099 then a copy of the data is taken at that point so that other arrays are unaffected: a b \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u25021 2 3 4\u25021 99 3 4\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 For a nested array, however, the elements are separate. a\u2190b\u2190(1 2 3)(4 5) if one of the elements is modified b[\u22822 1]\u219099 then the other elements remain shared between names. In this example, the 1 2 3 array remains shared.","title":"Value types"},{"location":"Interpreter-internals/#reference-types","text":"While APL arrays are pass-by-value, namespaces and other objects are pass-by-reference. nsref\u2190\u2395NS\u236c jsonref\u2190\u2395JSON'{}' \u2395FIX':Class myclass' ':Endclass' \u2395DR\u00a8nsref jsonref myclass 326 326 326 Although namespaces are pass-by-reference, the references themselves are still values: (ns1 ns2)\u2190\u2395NS\u00a82\u2374\u2282\u236c (ns1 ns2).var\u219042 99 a\u2190ns1 a.var 42 a\u2190ns2 a.var 99","title":"Reference types"},{"location":"Interpreter-internals/#configuration-parameters","text":"Many aspects of the interpreter environment can be modified before runtime using configuration parameters . The values of configuration parameters are determined by a hierarchy of scope on the operating system. On Microsoft Windows, these are often registry settings at the base level. On Unix-like systems, they are environment variables. For example, we can set parameters on the command line in a batch file before starting Dyalog. We can even create custom parameters. Save the following as a .bat file and run it on Windows @SET FOO=bar @START \"Dyalog\" \"C:\\Program Files\\Dyalog\\Dyalog APL-64 18.0 Unicode\\dyalog.exe\" See the value of a configuration parameter with \u2395NQ : \u2395\u21902\u2395NQ'.' 'GetEnvironment' 'FOO' bar You might find it useful to read the Dyalog for Microsoft Windows Installation and Configuration Guide and the Dyalog for UNIX Installation and Configuration Guide . Recent versions of Dyalog support universal configuration files which work across all supported platforms.","title":"Configuration parameters"},{"location":"Interpreter-internals/#what-am-i-running","text":"Here are some useful code snippets for finding information about the currently running interpreter: What version of Dyalog am I running? '#'\u2395WG'APLVersion' \u235d '#' is '.' in older versions of Dyalog For error reports, get the BuildID: \u2395\u21902\u2395NQ'#' 'GetBuildID' Am I a Unicode interpreter? 80=\u2395DR'' Am I big endian? \u236c\u237483 \u2395DR 256 What is my word width? 32\u00d71+'4'\u220a\u2283#\u2395WG'APLVersion' \u235d 64-bit has 64 in the platform name. Otherwise the interpreter is 32-bit.","title":"What am I running?"},{"location":"Interpreter-internals/#performance","text":"This course is intended to teach not only the symbols, syntax and system interactions of Dyalog APL, but also to try and teach you the APL way . This is a combination of array-oriented problem solving and ability to combine primitives to solve all manner of problems using computers. There are some inherent benefits to APL, such as the fact that exploring with APL can often lead you to optimal solutions to particular types of problems. Not only this, but the terseness makes it very easy to experiment and play with different approaches to the same problem. Besides APL itself, however, there are particular techniques, considerations, and special optimisations within the Dyalog interpreter that you should be aware of in case you find a performance bottleneck in your application and are wondering how to solve it.","title":"Performance"},{"location":"Interpreter-internals/#flat-array-techniques","text":"Nested arrays are a very convenient construct and can be used to write incredibly elegant expressions for certain operations. For example: \u2262\u00a8\u2286\u23681 1 1 0 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1 1 3 4 2 4 4 However, for long arguments this statement involves allocating many potentially disparate regions of memory and chasing pointers. Try to think of an approach which uses only flat arrays. Answer One solution from APLcart : (0~\u2368\u00af1-2-/\u2218\u23781,1,\u2368~) Of course, for certain arguments simply having more functions can be a performance penalty. Compare ]runtime of the two expressions with short\u21901=?10\u23742 and long\u21901=?1e6\u23742","title":"Flat array techniques"},{"location":"Interpreter-internals/#peppery-code","text":"One of the code smells in APL is large amounts of code to achieve something relatively simple. This is usually (but not always!) an indication that the problem can be thought of in a different way to achieve a more elegant and efficient solution. Another code smell is when a solution is littered with the each operator F\u00a8 . These are explicit looping operations and often suggest that the code can be re-written to take advantage of the implicit iteration and potential parallelisation of the core primitives acting on flat arrays. arg\u2190?5 3\u237410 ]runtime -c \"{\u230a0.5+(+\u233f\u00f7\u2262)\u2349\u2375}arg\" \"{\u230a0.5+(+/\u2375)\u00f7\u2283\u233d\u2374\u2375}arg\" \"{\u230a0.5+\u00a8(+/\u00a8s)\u00f7c\u2190\u2262\u00a8s\u2190\u2193\u2375}arg\" {\u230a0.5+(+\u233f\u00f7\u2262)\u2349\u2375}arg \u2192 1.1E\u00af6 | 0% \u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395 {\u230a0.5+(+/\u2375)\u00f7\u2283\u233d\u2374\u2375}arg \u2192 8.6E\u00af7 | -25% \u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395 {\u230a0.5+\u00a8(+/\u00a8s)\u00f7c\u2190\u2262\u00a8s\u2190\u2193\u2375}arg \u2192 1.8E\u00af6 | +60% \u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395\u2395","title":"Peppery code"},{"location":"Interpreter-internals/#loop-sometimes","text":"Some types of algorithms really aren't amenable to parallelisation and array-oriented techniques. These are usually problems with heavy dependence on intermediate results. Sometimes they can be encoded in a custom scan or reduction, but the overall algorithm isn't able to take advantage of parallelisation that primitive scans and reductions can. Another consideration is that sometimes an elegant-looking solution in APL is quite inefficient. Take the prime number filter we saw early on: Primes \u2190 {\u23782=+\u233f0=\u2218.|\u2368\u2373\u2375} An alternative coding uses the multiplication table: Primes \u2190 {i~\u2218.\u00d7\u2368i\u21901\u2193\u2373\u2375} Of course, the outer product \u2218.F indicates that the number of calculations to compute both of these solutions increases with the square of the input size. We say they have a computational complexity \" of order n squared \" or \\(O(n^2)\\) in big-O notation . This is a very inefficient way to find prime numbers. To see discussions around more efficient ways to compute prime numbers in APL, see the dfns page on prime numbers . Put simply, the fastest algorithm in general is the one which performs the fewest computations. Sometimes there are solutions in APL which use a relatively large amount of memory but are fast in time due to optimised primitives. However, sometimes the domain of the problem grows so large that even these solutions are outperformed by a scalar looping solution. When this is the case, if performance is very important for this part of your application, it can be a good idea to search for pre-existing high performance solutions, or to write the solution in a lower level language, and use \u2395NA to integrate it with your APL code. Try to find an optimised expression which uses the rank operator F\u2364k . What is the computational complexity of a custom reduction F/\u2375 ? What is the computational complexity of a custom scan? How do custom scans and reductions compare with primitive scans and reductions for + - \u00d7 \u00f7 ?","title":"Loop sometimes"},{"location":"Interpreter-internals/#idioms","text":"APL idioms are short expressions to perform certain tasks. APLcart is a comprehensive, searchable list of idioms. Some of these include slightly obscure but performant versions of particular tasks, especially those related to partitioned functions . In Dyalog APL, there are also \"idioms\" which are specially recognised phrases, or combinations of characters, which are treated as individual tokens and executed with special code, rather than parsed symbol-by-symbol and executed function-at-a-time. These offer significant performance improvements for particular tasks, and are all listed: latest 17.1 12.1","title":"Idioms"},{"location":"Interpreter-internals/#philosophical-tangent","text":"In an ideal world, programmers could focus on writing purely the \"most readable\" or \"most maintainable\" versions of their code. Or, in some sense, simply write \"whatever feels right\" and the interpreter or compiler could analyse the program and determine the optimal. This is part of what compilers hope to achieve. However, even in one the strongest attempts at this so far, Julia, they emphasise that you still need to learn to write \"idiomatic Julia\" code. This means understanding how the language works both in terms of semantics and which constructs can be written in a particular way to lead to high performance. In Dyalog APL, one example of this is in the primitive operators. The key operator F\u2338 applies its operand function F to grouped major cells of its argument array. An alternative approach is to have a function {\u2282\u2375}\u2338 perform the grouping first and then to apply using each F\u00a8{\u2282\u2375}\u2338 . The end result of the computation is the same, but by having an operator, the interpreter implementors can use especially efficient special code for certain operand functions.","title":"Philosophical tangent"},{"location":"Loops/","text":"Loops and recursion Looping is an incredibly basic and fundamental programming construct which you will notice we have barely used at all so far. Or at least, we haven't used many explicit loops. Terminology The type of looping over items in a collection as provided by for and while loops is sometimes referred to as scalar looping . Other types of looping in APL might, for example, process each row of a matrix in turn but process whole rows at a time. In contrast, each \u00a8 is a mechanism for looping over every item of an array (the scalars ); its operand function can see arrays nested within the scalars. An introduction to an introduction to an introduction to an introduction to an int... {\u237a\u21901 1 \u22c4 \u2375=2:\u237a \u22c4 (\u237a,(+/\u00af2\u2191\u237a))\u2207\u2375-1} Try the dfn above with various numeric arguments and consider the following questions: Which symbol refers to the function itself? Which symbol separates expressions? Which part represents a conditional? This is where one part of code executes only if a preceding statement is true. What is the default left argument? What happens if you call this function dyadically? Give the function an appropriate name . When a function calls itself like this it is called recursion . APL tends to rely less on explicit iteration and recursion than most popular programming languages, but it is good to be able to do it when you need to. If a function gets stuck in an infinite loop, use Action \u2192 Interrupt in the menu. You can also use the key combination Ctrl+Break to interrupt a running function. Write the shortest dfn which causes infinite recursion. Write the shortest dfn which causes infinite recursion unless its argument is 0 . The factorial function multiplies integers up to \u2375 . Write the factorial function as a recursive dfn called Factorial . Use the primitive !\u2375 factorial function to check your solution. Write an expression for the factorial function as a reduction (an expression which includes f/ for some function f ). A sort of detour Dyalog's grade-up \u234b and grade-down \u2352 functions are able to sort any array . However, it is interesting and useful to look at other approaches to sorting. Here is a function 'NSort' for sorting numeric lists. NSort\u2190{0=\u2374\u2375:\u236c \u22c4 (U/\u2375),\u2207(~U\u2190\u2375=\u230a/\u2375)/\u2375} Try NSort with some numeric arguments. Here it is presented piece-by-piece. For each comment prompt \u235d , write a brief description of what that part of the function does. The first one has been done for you. NSort\u2190{ 0=\u2374\u2375:\u236c \u235d Reached end of list, return empty numeric vector \u22c4 \u235d (U/\u2375), \u235d \u2207 \u235d (~U\u2190\u2375=\u230a/\u2375) \u235d /\u2375 \u235d } Below is a function TSort for sorting character matrices. TSort\u2190{\u237a[((\u2374\u2375)[2])S \u237a\u2373\u2375]} S\u2190{\u237a=0:\u2375 \u22c4 (\u237a-1)S \u2375[\u234b\u2375[;\u237a];]} Examine TSort and replace \u237a below with an appropriate left argument to sort the character matrix WORDS . WORDS\u2190\u2191'DOLPHIN' 'BRACKEN' 'SAUCER' 'MAGNET' 'FLOP' \u237a TSort WORDS BRACKEN DOLPHIN FLOP MAGNET SAUCER What do the following expressions tell you about the \u234b grade-up and \u2352 grade-down functions on high-rank arrays? \u234b4 2 2\u2374'ABDCAADCBCDECDEF' 2 1 3 4 \u23524 2 2\u2374'ABDCAADCBCDECDEF' 4 3 1 2 You have the power One common type of iteration is to apply the same function again to the result of the previous application. In traditional mathematics, this is expressed with superscript notation: \\(f(x) = 1 + x\\) Increment \\(p(x,y) = f^y(x)\\) Add \\(m(x,y) = p^y(x,0)\\) Multiply We can express this with the power operator: Inc\u2190{1+\u2375} Plus\u2190{(Inc\u2363\u237a)\u2375} Times\u2190{\u237a(Plus\u2363\u2375)0} Power\u2190{\u237a(Times\u2363\u2375)1} Primitive iterations are still loops You might have noticed this already, but it is important to know that the rank operator F\u2364j k l is conceptually a loop. It just happens to be that certain operations are parallelisable, and some of those are parallelised within the Dyalog interpreter. We will give some details later in the section on performance . Reduction is a loop Primitive reductions are often optimised. For example, plus-reduction +/ is able to take advantage of vector instructions on certain machines and and-reduction \u2227/ can quit early if a zero is found in the array. We can observe differences by writing a custom function and comparing runtimes: ]runtime +/?1e7\u23740 * Benchmarking \"+/?1e7\u23740\" (ms) CPU (avg): 94 Elapsed: 99 ]runtime {\u237a+\u2375}/?1e7\u23740 * Benchmarking \"{\u237a+\u2375}/?1e7\u23740\" (ms) CPU (avg): 3688 Elapsed: 3723 Moving windows Windowed-reduction \u237a F/ \u2375 is an extension to reduction which applies an F-reduction F/ for a function F on a sliding window of size \u237a . It is useful to use catenate to display the windowed selection of the array to which the reduction will be applied: 3,/\u237310 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u25021 2 3\u25022 3 4\u25023 4 5\u25024 5 6\u25025 6 7\u25026 7 8\u25027 8 9\u25028 9 10\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518 3+/\u237310 6 9 12 15 18 21 24 27 You can think of this as a special case of stencil code , for which the primitive operator stencil \u233a was added in version 16.0. 1\u2193\u00af1\u2193{+/\u2375}\u233a3\u22a2\u237310 6 9 12 15 18 21 24 27 Don't forget scan! Scan F\\\u2375 is another construct which is simple in a way that misleads you into thinking it is only used for very specific things. It is exactly a reduction F/ on successive prefixes of \u2375 . The final value is F/\u2375 . +/\u237310 55 +\\\u237310 1 3 6 10 15 21 28 36 45 55 \u2308\\2 0 3 \u00af1 4 2 6 2 2 3 3 4 4 6 However, scan can be used in many scenarios that you might not expect. Scans are often used in high performance expressions of partitioned-application functions which nowadays can be implemented with partitioning primitives ( \u237a\u2282\u2375 and \u237a\u2286\u2375 ), nested arrays and the each operator F\u00a8 . For example, one YouTube video comparing APL and Haskell demonstrates one of the big differences in the APL approach in contrast to other types of programming. 4 {1\u2193\u220a' '\u2218,\u00a8\u237a\u2191' '(\u2260\u2286\u22a2)\u2375} 'take the first four words' take the first four 4 {\u2375\u233f\u2368\u237a>+\\' '=\u2375} 'take the first four words' take the first four Despite both having types of function composition, Haskell and other functional programming languages tend to focus on the composition of those functions as the fundamental process to finding and refining solutions. In APL, we are usually most interested in the fundamental data transformation that is occuring, and using APL's inherently parallel, array-at-a-time primitives to achieve that transformation in a way that can tend towards simple and fast code. Between integer and boolean arguments alone there are more interesting constructs than can be covered well here. You can find more on this topic by going to the following links: Watch the Dyalog webinar about Boolean Scans and Reductions Experiment with the examples in an interactive notebook on TryAPL You can view the static notebook online For and While The traditional control structures such as for loops , while loops and if statements weren't introduced in Dyalog until version 8.0 in 1996 . Usually, they are only used for program control on the outer levels, or if an algorithm explicitly requires that type of scalar looping . The syntax is mentioned in the section on user-defined functions . Peformance note When constructing loops, think about whether unnecessary computation is being performed. For example, :While LikelyToBeFales :AndIf ExpensiveTest is probably better than :While LikelyToBeFales\u2227ExpensiveTest You will also often see: :While PreCondition :AndIf OnlyComputableIfPreCondition Problem set 8 Bell Numbers A Bell number counts the possible partitions of a set. The n th Bell number \\(B_n\\) counts the ways you can partition a set of \\(n\\) elements. Here we will investigate 3 ways of computing Bell numbers. Brute force Write a function BellBrute which counts all of the unique partitions of length \u2375 by creating partitions as nested arrays. Hint Binary representations of decimal numbers can be used as partition vectors. Triangle scheme Implement the triangle scheme for calculations. Recurrance relation of binomial coefficients The Bell numbers satisfy a recurrence relation involving binomial coefficients: \\(B_{n+1} = \\sum_{k=0}^{n}\\binom{n}{k}B_k\\) Implement BellRecur using this formula. Four is Magic Rosetta Code has the full problem description. Start with a number. Spell that number out in words, count the number of letters and say it all aloud. For example, start with 6, print 'Six is three' and continue with the number 3. Once you reach 4, print four is magic . FourMagic 11 Eleven is six, six is three, three is five, five is four, four is magic. Hash counting string This problem is from week 102 of the Perl Weekly Challenge . Write a monadic function HashCount which takes a scalar integer argument and returns a simple character vector where: the string consists only of digits 0-9 and octothorpes AKA hashes, \u2018#\u2019 there are no two consecutive hashes: \u2018##\u2019 does not appear in your string the last character is a hash the number immediately preceding each hash (if it exists) is the position of that hash in the string, with the position being counted up from 1 HashCount 1 # HashCount 2 2# HashCount 3 #3# HashCount 10 #3#5#7#10# HashCount 14 2#4#6#8#11#14# Backspace Write a function Backspace which takes a simple numeric vector argument and treats 0 s like backspaces, removing successive numbers to their left unless none remain. Backspace 1 2 0 1 Backspace 1 5 5 0 2 0 0 8 1 8 For an extra challenge, modify your function so that it can also accept a character vector where \\b is treated as a single token and signifies a backspace character.","title":"Loops and Recursion"},{"location":"Loops/#loops-and-recursion","text":"Looping is an incredibly basic and fundamental programming construct which you will notice we have barely used at all so far. Or at least, we haven't used many explicit loops. Terminology The type of looping over items in a collection as provided by for and while loops is sometimes referred to as scalar looping . Other types of looping in APL might, for example, process each row of a matrix in turn but process whole rows at a time. In contrast, each \u00a8 is a mechanism for looping over every item of an array (the scalars ); its operand function can see arrays nested within the scalars.","title":"Loops and recursion"},{"location":"Loops/#an-introduction-to-an-introduction-to-an-introduction-to-an-introduction-to-an-int","text":"{\u237a\u21901 1 \u22c4 \u2375=2:\u237a \u22c4 (\u237a,(+/\u00af2\u2191\u237a))\u2207\u2375-1} Try the dfn above with various numeric arguments and consider the following questions: Which symbol refers to the function itself? Which symbol separates expressions? Which part represents a conditional? This is where one part of code executes only if a preceding statement is true. What is the default left argument? What happens if you call this function dyadically? Give the function an appropriate name . When a function calls itself like this it is called recursion . APL tends to rely less on explicit iteration and recursion than most popular programming languages, but it is good to be able to do it when you need to. If a function gets stuck in an infinite loop, use Action \u2192 Interrupt in the menu. You can also use the key combination Ctrl+Break to interrupt a running function. Write the shortest dfn which causes infinite recursion. Write the shortest dfn which causes infinite recursion unless its argument is 0 . The factorial function multiplies integers up to \u2375 . Write the factorial function as a recursive dfn called Factorial . Use the primitive !\u2375 factorial function to check your solution. Write an expression for the factorial function as a reduction (an expression which includes f/ for some function f ).","title":"An introduction to an introduction to an introduction to an introduction to an int..."},{"location":"Loops/#a-sort-of-detour","text":"Dyalog's grade-up \u234b and grade-down \u2352 functions are able to sort any array . However, it is interesting and useful to look at other approaches to sorting. Here is a function 'NSort' for sorting numeric lists. NSort\u2190{0=\u2374\u2375:\u236c \u22c4 (U/\u2375),\u2207(~U\u2190\u2375=\u230a/\u2375)/\u2375} Try NSort with some numeric arguments. Here it is presented piece-by-piece. For each comment prompt \u235d , write a brief description of what that part of the function does. The first one has been done for you. NSort\u2190{ 0=\u2374\u2375:\u236c \u235d Reached end of list, return empty numeric vector \u22c4 \u235d (U/\u2375), \u235d \u2207 \u235d (~U\u2190\u2375=\u230a/\u2375) \u235d /\u2375 \u235d } Below is a function TSort for sorting character matrices. TSort\u2190{\u237a[((\u2374\u2375)[2])S \u237a\u2373\u2375]} S\u2190{\u237a=0:\u2375 \u22c4 (\u237a-1)S \u2375[\u234b\u2375[;\u237a];]} Examine TSort and replace \u237a below with an appropriate left argument to sort the character matrix WORDS . WORDS\u2190\u2191'DOLPHIN' 'BRACKEN' 'SAUCER' 'MAGNET' 'FLOP' \u237a TSort WORDS BRACKEN DOLPHIN FLOP MAGNET SAUCER What do the following expressions tell you about the \u234b grade-up and \u2352 grade-down functions on high-rank arrays? \u234b4 2 2\u2374'ABDCAADCBCDECDEF' 2 1 3 4 \u23524 2 2\u2374'ABDCAADCBCDECDEF' 4 3 1 2","title":"A sort of detour"},{"location":"Loops/#you-have-the-power","text":"One common type of iteration is to apply the same function again to the result of the previous application. In traditional mathematics, this is expressed with superscript notation: \\(f(x) = 1 + x\\) Increment \\(p(x,y) = f^y(x)\\) Add \\(m(x,y) = p^y(x,0)\\) Multiply We can express this with the power operator: Inc\u2190{1+\u2375} Plus\u2190{(Inc\u2363\u237a)\u2375} Times\u2190{\u237a(Plus\u2363\u2375)0} Power\u2190{\u237a(Times\u2363\u2375)1}","title":"You have the power"},{"location":"Loops/#primitive-iterations-are-still-loops","text":"You might have noticed this already, but it is important to know that the rank operator F\u2364j k l is conceptually a loop. It just happens to be that certain operations are parallelisable, and some of those are parallelised within the Dyalog interpreter. We will give some details later in the section on performance .","title":"Primitive iterations are still loops"},{"location":"Loops/#reduction-is-a-loop","text":"Primitive reductions are often optimised. For example, plus-reduction +/ is able to take advantage of vector instructions on certain machines and and-reduction \u2227/ can quit early if a zero is found in the array. We can observe differences by writing a custom function and comparing runtimes: ]runtime +/?1e7\u23740 * Benchmarking \"+/?1e7\u23740\" (ms) CPU (avg): 94 Elapsed: 99 ]runtime {\u237a+\u2375}/?1e7\u23740 * Benchmarking \"{\u237a+\u2375}/?1e7\u23740\" (ms) CPU (avg): 3688 Elapsed: 3723","title":"Reduction is a loop"},{"location":"Loops/#moving-windows","text":"Windowed-reduction \u237a F/ \u2375 is an extension to reduction which applies an F-reduction F/ for a function F on a sliding window of size \u237a . It is useful to use catenate to display the windowed selection of the array to which the reduction will be applied: 3,/\u237310 \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u25021 2 3\u25022 3 4\u25023 4 5\u25024 5 6\u25025 6 7\u25026 7 8\u25027 8 9\u25028 9 10\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518 3+/\u237310 6 9 12 15 18 21 24 27 You can think of this as a special case of stencil code , for which the primitive operator stencil \u233a was added in version 16.0. 1\u2193\u00af1\u2193{+/\u2375}\u233a3\u22a2\u237310 6 9 12 15 18 21 24 27","title":"Moving windows"},{"location":"Loops/#dont-forget-scan","text":"Scan F\\\u2375 is another construct which is simple in a way that misleads you into thinking it is only used for very specific things. It is exactly a reduction F/ on successive prefixes of \u2375 . The final value is F/\u2375 . +/\u237310 55 +\\\u237310 1 3 6 10 15 21 28 36 45 55 \u2308\\2 0 3 \u00af1 4 2 6 2 2 3 3 4 4 6 However, scan can be used in many scenarios that you might not expect. Scans are often used in high performance expressions of partitioned-application functions which nowadays can be implemented with partitioning primitives ( \u237a\u2282\u2375 and \u237a\u2286\u2375 ), nested arrays and the each operator F\u00a8 . For example, one YouTube video comparing APL and Haskell demonstrates one of the big differences in the APL approach in contrast to other types of programming. 4 {1\u2193\u220a' '\u2218,\u00a8\u237a\u2191' '(\u2260\u2286\u22a2)\u2375} 'take the first four words' take the first four 4 {\u2375\u233f\u2368\u237a>+\\' '=\u2375} 'take the first four words' take the first four Despite both having types of function composition, Haskell and other functional programming languages tend to focus on the composition of those functions as the fundamental process to finding and refining solutions. In APL, we are usually most interested in the fundamental data transformation that is occuring, and using APL's inherently parallel, array-at-a-time primitives to achieve that transformation in a way that can tend towards simple and fast code. Between integer and boolean arguments alone there are more interesting constructs than can be covered well here. You can find more on this topic by going to the following links: Watch the Dyalog webinar about Boolean Scans and Reductions Experiment with the examples in an interactive notebook on TryAPL You can view the static notebook online","title":"Don't forget scan!"},{"location":"Loops/#for-and-while","text":"The traditional control structures such as for loops , while loops and if statements weren't introduced in Dyalog until version 8.0 in 1996 . Usually, they are only used for program control on the outer levels, or if an algorithm explicitly requires that type of scalar looping . The syntax is mentioned in the section on user-defined functions . Peformance note When constructing loops, think about whether unnecessary computation is being performed. For example, :While LikelyToBeFales :AndIf ExpensiveTest is probably better than :While LikelyToBeFales\u2227ExpensiveTest You will also often see: :While PreCondition :AndIf OnlyComputableIfPreCondition","title":"For and While"},{"location":"Loops/#problem-set-8","text":"","title":"Problem set 8"},{"location":"Loops/#bell-numbers","text":"A Bell number counts the possible partitions of a set. The n th Bell number \\(B_n\\) counts the ways you can partition a set of \\(n\\) elements. Here we will investigate 3 ways of computing Bell numbers. Brute force Write a function BellBrute which counts all of the unique partitions of length \u2375 by creating partitions as nested arrays. Hint Binary representations of decimal numbers can be used as partition vectors. Triangle scheme Implement the triangle scheme for calculations. Recurrance relation of binomial coefficients The Bell numbers satisfy a recurrence relation involving binomial coefficients: \\(B_{n+1} = \\sum_{k=0}^{n}\\binom{n}{k}B_k\\) Implement BellRecur using this formula.","title":"Bell Numbers"},{"location":"Loops/#four-is-magic","text":"Rosetta Code has the full problem description. Start with a number. Spell that number out in words, count the number of letters and say it all aloud. For example, start with 6, print 'Six is three' and continue with the number 3. Once you reach 4, print four is magic . FourMagic 11 Eleven is six, six is three, three is five, five is four, four is magic.","title":"Four is Magic"},{"location":"Loops/#hash-counting-string","text":"This problem is from week 102 of the Perl Weekly Challenge . Write a monadic function HashCount which takes a scalar integer argument and returns a simple character vector where: the string consists only of digits 0-9 and octothorpes AKA hashes, \u2018#\u2019 there are no two consecutive hashes: \u2018##\u2019 does not appear in your string the last character is a hash the number immediately preceding each hash (if it exists) is the position of that hash in the string, with the position being counted up from 1 HashCount 1 # HashCount 2 2# HashCount 3 #3# HashCount 10 #3#5#7#10# HashCount 14 2#4#6#8#11#14#","title":"Hash counting string"},{"location":"Loops/#backspace","text":"Write a function Backspace which takes a simple numeric vector argument and treats 0 s like backspaces, removing successive numbers to their left unless none remain. Backspace 1 2 0 1 Backspace 1 5 5 0 2 0 0 8 1 8 For an extra challenge, modify your function so that it can also accept a character vector where \\b is treated as a single token and signifies a backspace character.","title":"Backspace"},{"location":"Namespaces/","text":"Namespaces and other objects If you are familiar with Object Oriented Programming ( OOP ) concepts and have experience using them from another language, then Dyalog's classes and namespaces should hopefully feel quite straightforward to you. Two documents are worth looking at, whether or not you are familiar with OOP: Object Oriented Programming for APL Programmers A Quick Introduction to Object Oriented Programming for Impatient APL Programmers If nested arrays are arrays inside arrays; namespaces are a bit like a workspace within a workspace. They are objects which contain collections of names, and these names can be listed as before, but using the dot . syntax from object-oriented programming. )ns ns \u235d Create an empty namespace called ns ns.var\u21901 2 3 \u235d Create a variable in ns called var ns.fn\u2190{\u237a,\u2375} \u235d Create a function in ns called fn \u2395nl-9 \u235d List the names of objects in the current namespace \u250c\u2500\u2500\u2510 \u2502ns\u2502 \u2514\u2500\u2500\u2518 ns.\u2395nl-\u23739 \u235d List all names in ns \u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502fn\u2502var\u2502 \u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2518 )cs ns \u235d Change into ns \u2395this.\u2395nl-\u23739 \u235d The current namespace is \u2395THIS \u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502fn\u2502var\u2502 \u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2518 #.\u2395nl-\u23739 \u235d The root namespace is # \u250c\u2500\u2500\u2510 \u2502ns\u2502 \u2514\u2500\u2500\u2518 Mutable objects Variables are pass-by-value . This means that if one name is used to assign another name, changes to the first name are not reflected in the second name. var1\u21901 2 3 var2\u2190var1 \u235d The value of var1 is assigned to var2 var1\u2190var1+6 \u235d The value of var2 is changed \u2395\u2190var2 \u235d var2 retains the previous value 1 2 3 Namespaces are objects and are pass-by-reference . All names which are assigned a reference (or pointer ) can be used to refer to the original object. )ns ns1 #.ns1 ns1.name\u2190'Bob' ns2\u2190ns1 ns2.name\u2190'Steve' \u2395\u2190ns1.name Steve It is possible to Discussion Should there be a difference between (\u2395NS\u236c)(\u2395NS\u236c) and (2\u2374\u2395NS\u236c) ? With \"by value\" semantics? With \"by reference\" semantics? What properties should two namespaces have in order to compare equal? Which of the following scenarios would be faster? Using \"by value\" semantics? By reference: when they originate from the same call to \u2395NS ? Can you find a way to achieve \"by value\" semantics when using namespaces? Discussion notes Should there be a difference between (\u2395NS\u236c)(\u2395NS\u236c) and (2\u2374\u2395NS\u236c) ? No difference in this case, there are just empty namespaces: (2\u2374\u2395NS\u236c)\u2261(\u2395NS\u236c)(\u2395NS\u236c) Yes. In (\u2395NS\u236c)(\u2395NS\u236c) we create two entities. In (2\u2374\u2395NS\u236c) we create only one. What properties should two namespaces have in order to compare equal? Which of the following scenarios would be faster? By value : when the two namespace have the exact same content. This is slow as it requires recursively inspecting each namespace for its contents and doing comparisons on every member. By reference : When the two namespaces originate from the same call to \u2395NS . This is fast as it requires only the comparison of two pointers. Clone (or make a deep copy of ) a namespace ns1\u2190\u2395NS\u236c ns1.vec\u21901 2 3 ns3\u2190\u2395NS ns1 ns3.vec[2]\u219010 \u235d Only the new copy is changed ]disp ns1.vec ns3.vec \u250c\u2192\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u25027 8 9\u25027 10 9\u2502 \u2514~\u2500\u2500\u2500\u2192\u2534~\u2500\u2500\u2500\u2500\u2192\u2518 Dyadic execute \u234e Namespaces can be used as a simple dictionary structure. value \u2190 dictionary.name \u235d Get value dictionary.name \u2190 value \u235d Set value But how do we do this when the name can vary? Use variables to store the name. ns\u2190\u2395NS\u236c name\u2190'foo' ns\u234ename,'\u21901 2 3' 10\u00d7ns.foo 10 20 30 Warning Beware: \u234e is potentially dangerous: ns\u2190\u2395NS\u236c name\u2190'\u2395OFF\u22c4' \u235d !!! value\u21901 2 3 ns {\u237a.{\u234e\u237a,'\u2190\u2375'}/\u2375} name value In production, validate your arguments . Modifying namespaces In some applications, it is useful to keep a namespace as an object that holds the state of something. It is reasonable in this case to write a tradfn that uses a namespace reference as both its argument and result. While tradfns can have the side effect of modifying a namespace, we strongly recommend that functions take arguments and return results anyway. \u2207 nsref \u2190 rate Modify nsref nsref.var +\u2190 rate \u2207 Code organisation Having modular code organisation is a very sensible idea. However, it is a recent invention relative to APL. In a newer application, it is not hard to imagine a utils namespace, a maths namespace, an interface namespace and so on. In older applications, such compartmentalisation is often achieved using a naming convention. For example: \u2395NL 3 displayINPUT displaySHOW mathsAVG mathsDET mathsSTDEV utilLINES utilSPLIT This type of code organisation is known as a flat workspace structure . Names and references In Dyalog there are both named and unnamed namespaces. Considering our use of the word \"name\" to refer to a token in the workspace, beginning with a letter, that refers to an array or function or operator, this is certainly a little confusing. When creating or modifying a namespace, we can assign the namespace to a name which is a namespace reference. nsref \u2190 \u2395NS\u236c nsref.var \u2190 1 2 3 \u2395\u2190nsref However, we can also use dyadic \u2395NS to give the namespace a name. This name also becomes the namespace's default display form . The default display form of an unnamed namespace is [Namespace] . If we assign a reference at the same time, we now have a two ways to refer to the namespace. However, notice that the namespace's name (shown by the display form) stays the same throughout as we are referring to the same namespace object. nsref \u2190 'nsname'\u2395NS\u236c \u235d Assigning to the reference is optional \u2395\u2190nsref \u22c4 \u2395\u2190nsname nsref2 \u2190 nsname \u2395\u2190nsref2 Display form The display form of an APL array is what is displayed when you execute an expression to display it: x \u2190 1 2 3 x \u235d The display form of x (depending on ]box settings) 1 2 3 \u2395\u2190x \u235d The display form of x (depending on ]box settings) 1 2 3 Namespaces have a default display form. The display form can be altered with \u2395DF: abc.\u2395DF '#.abc' \u22c4 abc #.abc def.\u2395DF 'Hello' \u22c4 def Hello (abc def).\u2395DF \u2395NULL \u22c4 abc def \u235d reset to default #.[Namespace] #.def Scripted namespaces Store the source namespace as a single piece of text: )ed \u235fns \u235d equivalent to '\u235f'\u2395ED'ns' or \u2395FIX ':Namespace ns' 'var\u2190123' ':EndNamespace' ns.var 123 \u2395SRC ns :Namespace ns var\u2190123 :EndNamespace Note Every time we \u201dfix\u201d, the namespace is reset per the script. This means that ns.var\u2190456 would become 123 since the definition var\u2190123 is found in the script. ns.var\u2190456 \u2395SRC ns :Namespace ns var\u2190123 :EndNamespace ns.var 456 \u2395FIX \u2395SRC ns \u235d similar to editing and fixing ns.var 123 The table below compares some methods for a namespace in the workspace versus a namespace script with text source. Display Form Script Set: \u2375.\u2395DF Set: \u2395FIX source Get: \u2355\u2375 Get: \u2395SRC \u2375 Reset: \u2375.\u2395DF \u2395NULL Reset: \u2395FIX \u2395SRC \u2375 :Require It is possible to have a script depend on other scripts. To do so, use the :require keyword. Problem set 9 Are namespaces created with )NS scripted or unscripted? Use \u2395FIX to create an unnamed, scripted namespace What happens if you try to edit this script using the Dyalog editor? Request handler Create a namespace called req containing a variable status with the value 200 a method Method which is the function {4+2\u00d7\u2375} Within the req namespace, apply Method to status and store the result in status Write a function Into that copies a workspace into a namespace dfns\u2190\u2395NS\u236c 'dfns.dws' Into dfns dfns.disp dfns.morse 'SOS' \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502...\u2502---\u2502...\u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 Hint See the documentation for \u2395NS . Write a function that swaps the values of two variables, the names of which are given as a 2-element nested vector of character vectors \u237a . ns\u2190\u2395NS\u236c ns.(aa bb)\u219010 20 ns your_function 'aa' 'bb' ns.(aa bb) 20 10 Write an expression that swaps the values of the variables named x in the namespaces ns1 and ns2 . ns1\u2190\u2395NS\u236c \u22c4 ns2\u2190\u2395NS\u236c ns1.x\u219010 \u22c4 ns2.x\u219020 ns1.y\u219030 \u22c4 ns2.y\u219040 your_expression ns1.x ns1.y ns2.x ns2.y 20 30 10 40 Write a function ScalarRef that returns a scalar Boolean value indicating whether its argument is a scalar namespace. ns\u2190\u2395NS\u236c \u22c4 ns.a\u219010 ]disp ScalarRef\u00a8 ns.a 'abc' (ns ns) ns (\u2395ns\u236c) 42 0 0 0 1 1 0 Use one or more of these scalar namespace properties: Name Class (\u2395NC) is 9 (ref; non-scalar arrays and non-nss are 2) Data Representation (\u2395DR) is 326 (pointer) Depth (\u2261) is 0 (simple scalar) Allows dot syntax (ns.name) Write a function RefMask that returns an array of the same structure as its argument, but with bits indicating the namespace references. ]disp RefMask (\u2282\u2282\u2282\u22821 2 ns) 3 ns (2 2\u2374'abc',\u2395NS\u236c) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u25020\u25021\u25020 0\u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502 \u2502 \u25020 1\u2502 \u2502\u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502\u2502 \u2502 \u2502 \u2502 \u2502\u2502\u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502\u2502\u2502 \u2502 \u2502 \u2502 \u2502\u2502\u2502\u2502\u25020 0 1\u2502\u2502\u2502\u2502\u2502 \u2502 \u2502 \u2502 \u2502\u2502\u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\u2502\u2502 \u2502 \u2502 \u2502 \u2502\u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\u2502 \u2502 \u2502 \u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 \u2502 \u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2518 Write a function Fetch which takes namespace reference as left argument and a nested vector of character vector keys as right argument and returns the corresponding values from the namespace. Write a function IsRoot FindRoot \u2395SE.Dyalog.Utils \u2395SE FindRoot # # FindRoot \u2395NS\u236c # What are our roots? Write a function FindRoots that takes an arbitrary array of namespaces and finds the root for each namespace. Line \u2395SE.Dyalog.Utils \u2395SE \u2395SE.Dyalog \u2395SE.Dyalog.Utils Line \u2395SE.cbbot.bandsb2.sb.io \u2395SE \u2395SE.cbbot \u2395SE.cbbot.bandsb2 \u2395SE.cbbot.bandsb2.sb \u2395SE.cbbot.bandsb2.sb.io Where are my children? Write a function that lists all the children of a given namespace. Hint Note: \u2395NL is Name List, not Children List Plan: You'll have to crawl through the entire workspace Think: How could namespaces still be out of reach?","title":"Namespaces and Other Objects"},{"location":"Namespaces/#namespaces-and-other-objects","text":"If you are familiar with Object Oriented Programming ( OOP ) concepts and have experience using them from another language, then Dyalog's classes and namespaces should hopefully feel quite straightforward to you. Two documents are worth looking at, whether or not you are familiar with OOP: Object Oriented Programming for APL Programmers A Quick Introduction to Object Oriented Programming for Impatient APL Programmers If nested arrays are arrays inside arrays; namespaces are a bit like a workspace within a workspace. They are objects which contain collections of names, and these names can be listed as before, but using the dot . syntax from object-oriented programming. )ns ns \u235d Create an empty namespace called ns ns.var\u21901 2 3 \u235d Create a variable in ns called var ns.fn\u2190{\u237a,\u2375} \u235d Create a function in ns called fn \u2395nl-9 \u235d List the names of objects in the current namespace \u250c\u2500\u2500\u2510 \u2502ns\u2502 \u2514\u2500\u2500\u2518 ns.\u2395nl-\u23739 \u235d List all names in ns \u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502fn\u2502var\u2502 \u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2518 )cs ns \u235d Change into ns \u2395this.\u2395nl-\u23739 \u235d The current namespace is \u2395THIS \u250c\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502fn\u2502var\u2502 \u2514\u2500\u2500\u2534\u2500\u2500\u2500\u2518 #.\u2395nl-\u23739 \u235d The root namespace is # \u250c\u2500\u2500\u2510 \u2502ns\u2502 \u2514\u2500\u2500\u2518","title":"Namespaces and other objects"},{"location":"Namespaces/#mutable-objects","text":"Variables are pass-by-value . This means that if one name is used to assign another name, changes to the first name are not reflected in the second name. var1\u21901 2 3 var2\u2190var1 \u235d The value of var1 is assigned to var2 var1\u2190var1+6 \u235d The value of var2 is changed \u2395\u2190var2 \u235d var2 retains the previous value 1 2 3 Namespaces are objects and are pass-by-reference . All names which are assigned a reference (or pointer ) can be used to refer to the original object. )ns ns1 #.ns1 ns1.name\u2190'Bob' ns2\u2190ns1 ns2.name\u2190'Steve' \u2395\u2190ns1.name Steve It is possible to Discussion Should there be a difference between (\u2395NS\u236c)(\u2395NS\u236c) and (2\u2374\u2395NS\u236c) ? With \"by value\" semantics? With \"by reference\" semantics? What properties should two namespaces have in order to compare equal? Which of the following scenarios would be faster? Using \"by value\" semantics? By reference: when they originate from the same call to \u2395NS ? Can you find a way to achieve \"by value\" semantics when using namespaces? Discussion notes Should there be a difference between (\u2395NS\u236c)(\u2395NS\u236c) and (2\u2374\u2395NS\u236c) ? No difference in this case, there are just empty namespaces: (2\u2374\u2395NS\u236c)\u2261(\u2395NS\u236c)(\u2395NS\u236c) Yes. In (\u2395NS\u236c)(\u2395NS\u236c) we create two entities. In (2\u2374\u2395NS\u236c) we create only one. What properties should two namespaces have in order to compare equal? Which of the following scenarios would be faster? By value : when the two namespace have the exact same content. This is slow as it requires recursively inspecting each namespace for its contents and doing comparisons on every member. By reference : When the two namespaces originate from the same call to \u2395NS . This is fast as it requires only the comparison of two pointers. Clone (or make a deep copy of ) a namespace ns1\u2190\u2395NS\u236c ns1.vec\u21901 2 3 ns3\u2190\u2395NS ns1 ns3.vec[2]\u219010 \u235d Only the new copy is changed ]disp ns1.vec ns3.vec \u250c\u2192\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u25027 8 9\u25027 10 9\u2502 \u2514~\u2500\u2500\u2500\u2192\u2534~\u2500\u2500\u2500\u2500\u2192\u2518","title":"Mutable objects"},{"location":"Namespaces/#dyadic-execute","text":"Namespaces can be used as a simple dictionary structure. value \u2190 dictionary.name \u235d Get value dictionary.name \u2190 value \u235d Set value But how do we do this when the name can vary? Use variables to store the name. ns\u2190\u2395NS\u236c name\u2190'foo' ns\u234ename,'\u21901 2 3' 10\u00d7ns.foo 10 20 30 Warning Beware: \u234e is potentially dangerous: ns\u2190\u2395NS\u236c name\u2190'\u2395OFF\u22c4' \u235d !!! value\u21901 2 3 ns {\u237a.{\u234e\u237a,'\u2190\u2375'}/\u2375} name value In production, validate your arguments .","title":"Dyadic execute \u234e"},{"location":"Namespaces/#modifying-namespaces","text":"In some applications, it is useful to keep a namespace as an object that holds the state of something. It is reasonable in this case to write a tradfn that uses a namespace reference as both its argument and result. While tradfns can have the side effect of modifying a namespace, we strongly recommend that functions take arguments and return results anyway. \u2207 nsref \u2190 rate Modify nsref nsref.var +\u2190 rate \u2207","title":"Modifying namespaces"},{"location":"Namespaces/#code-organisation","text":"Having modular code organisation is a very sensible idea. However, it is a recent invention relative to APL. In a newer application, it is not hard to imagine a utils namespace, a maths namespace, an interface namespace and so on. In older applications, such compartmentalisation is often achieved using a naming convention. For example: \u2395NL 3 displayINPUT displaySHOW mathsAVG mathsDET mathsSTDEV utilLINES utilSPLIT This type of code organisation is known as a flat workspace structure .","title":"Code organisation"},{"location":"Namespaces/#names-and-references","text":"In Dyalog there are both named and unnamed namespaces. Considering our use of the word \"name\" to refer to a token in the workspace, beginning with a letter, that refers to an array or function or operator, this is certainly a little confusing. When creating or modifying a namespace, we can assign the namespace to a name which is a namespace reference. nsref \u2190 \u2395NS\u236c nsref.var \u2190 1 2 3 \u2395\u2190nsref However, we can also use dyadic \u2395NS to give the namespace a name. This name also becomes the namespace's default display form . The default display form of an unnamed namespace is [Namespace] . If we assign a reference at the same time, we now have a two ways to refer to the namespace. However, notice that the namespace's name (shown by the display form) stays the same throughout as we are referring to the same namespace object. nsref \u2190 'nsname'\u2395NS\u236c \u235d Assigning to the reference is optional \u2395\u2190nsref \u22c4 \u2395\u2190nsname nsref2 \u2190 nsname \u2395\u2190nsref2","title":"Names and references"},{"location":"Namespaces/#display-form","text":"The display form of an APL array is what is displayed when you execute an expression to display it: x \u2190 1 2 3 x \u235d The display form of x (depending on ]box settings) 1 2 3 \u2395\u2190x \u235d The display form of x (depending on ]box settings) 1 2 3 Namespaces have a default display form. The display form can be altered with \u2395DF: abc.\u2395DF '#.abc' \u22c4 abc #.abc def.\u2395DF 'Hello' \u22c4 def Hello (abc def).\u2395DF \u2395NULL \u22c4 abc def \u235d reset to default #.[Namespace] #.def","title":"Display form"},{"location":"Namespaces/#scripted-namespaces","text":"Store the source namespace as a single piece of text: )ed \u235fns \u235d equivalent to '\u235f'\u2395ED'ns' or \u2395FIX ':Namespace ns' 'var\u2190123' ':EndNamespace' ns.var 123 \u2395SRC ns :Namespace ns var\u2190123 :EndNamespace Note Every time we \u201dfix\u201d, the namespace is reset per the script. This means that ns.var\u2190456 would become 123 since the definition var\u2190123 is found in the script. ns.var\u2190456 \u2395SRC ns :Namespace ns var\u2190123 :EndNamespace ns.var 456 \u2395FIX \u2395SRC ns \u235d similar to editing and fixing ns.var 123 The table below compares some methods for a namespace in the workspace versus a namespace script with text source. Display Form Script Set: \u2375.\u2395DF Set: \u2395FIX source Get: \u2355\u2375 Get: \u2395SRC \u2375 Reset: \u2375.\u2395DF \u2395NULL Reset: \u2395FIX \u2395SRC \u2375","title":"Scripted namespaces"},{"location":"Namespaces/#require","text":"It is possible to have a script depend on other scripts. To do so, use the :require keyword.","title":":Require"},{"location":"Namespaces/#problem-set-9","text":"Are namespaces created with )NS scripted or unscripted? Use \u2395FIX to create an unnamed, scripted namespace What happens if you try to edit this script using the Dyalog editor? Request handler Create a namespace called req containing a variable status with the value 200 a method Method which is the function {4+2\u00d7\u2375} Within the req namespace, apply Method to status and store the result in status Write a function Into that copies a workspace into a namespace dfns\u2190\u2395NS\u236c 'dfns.dws' Into dfns dfns.disp dfns.morse 'SOS' \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502...\u2502---\u2502...\u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 Hint See the documentation for \u2395NS . Write a function that swaps the values of two variables, the names of which are given as a 2-element nested vector of character vectors \u237a . ns\u2190\u2395NS\u236c ns.(aa bb)\u219010 20 ns your_function 'aa' 'bb' ns.(aa bb) 20 10 Write an expression that swaps the values of the variables named x in the namespaces ns1 and ns2 . ns1\u2190\u2395NS\u236c \u22c4 ns2\u2190\u2395NS\u236c ns1.x\u219010 \u22c4 ns2.x\u219020 ns1.y\u219030 \u22c4 ns2.y\u219040 your_expression ns1.x ns1.y ns2.x ns2.y 20 30 10 40 Write a function ScalarRef that returns a scalar Boolean value indicating whether its argument is a scalar namespace. ns\u2190\u2395NS\u236c \u22c4 ns.a\u219010 ]disp ScalarRef\u00a8 ns.a 'abc' (ns ns) ns (\u2395ns\u236c) 42 0 0 0 1 1 0 Use one or more of these scalar namespace properties: Name Class (\u2395NC) is 9 (ref; non-scalar arrays and non-nss are 2) Data Representation (\u2395DR) is 326 (pointer) Depth (\u2261) is 0 (simple scalar) Allows dot syntax (ns.name) Write a function RefMask that returns an array of the same structure as its argument, but with bits indicating the namespace references. ]disp RefMask (\u2282\u2282\u2282\u22821 2 ns) 3 ns (2 2\u2374'abc',\u2395NS\u236c) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u252c\u2500\u252c\u2500\u2500\u2500\u2510 \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u25020\u25021\u25020 0\u2502 \u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502 \u2502 \u25020 1\u2502 \u2502\u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502\u2502 \u2502 \u2502 \u2502 \u2502\u2502\u2502\u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2510\u2502\u2502\u2502\u2502 \u2502 \u2502 \u2502 \u2502\u2502\u2502\u2502\u25020 0 1\u2502\u2502\u2502\u2502\u2502 \u2502 \u2502 \u2502 \u2502\u2502\u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\u2502\u2502 \u2502 \u2502 \u2502 \u2502\u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502\u2502 \u2502 \u2502 \u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\u2502 \u2502 \u2502 \u2502 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2534\u2500\u2534\u2500\u2500\u2500\u2518 Write a function Fetch which takes namespace reference as left argument and a nested vector of character vector keys as right argument and returns the corresponding values from the namespace. Write a function IsRoot FindRoot \u2395SE.Dyalog.Utils \u2395SE FindRoot # # FindRoot \u2395NS\u236c # What are our roots? Write a function FindRoots that takes an arbitrary array of namespaces and finds the root for each namespace. Line \u2395SE.Dyalog.Utils \u2395SE \u2395SE.Dyalog \u2395SE.Dyalog.Utils Line \u2395SE.cbbot.bandsb2.sb.io \u2395SE \u2395SE.cbbot \u2395SE.cbbot.bandsb2 \u2395SE.cbbot.bandsb2.sb \u2395SE.cbbot.bandsb2.sb.io Where are my children? Write a function that lists all the children of a given namespace. Hint Note: \u2395NL is Name List, not Children List Plan: You'll have to crawl through the entire workspace Think: How could namespaces still be out of reach?","title":"Problem set 9"},{"location":"Operators/","text":"Operators About Dyalog APL is not a functional programming language, but those familiar with functional languages will recognise APL's operators as higher-order functions . Operators in Dyalog can be: monadic (take a single left operand as in F/ ) dyadic (take a left and a right operand as in F\u2364k ) but they cannot be ambivalent. However, the functions derived from operators can be monadic, dyadic or ambivalent in terms of arguments. Abmivalent dfns usually have a default left argument ( \u237a\u2190default ) and ambivalent tradfns test if their left argument exists ( 0=\u2395NC'left_arg' ). Primitive We have already used a few primitive operators, but there is a complete summary of primitive operators in the online documentation. Quick guide For some commonly used operators Operator Calling syntax Used for Reduce F/ F\u233f Accumulation N-wise reduce nF/ nF\u233f Windowed-reduction Scan F\u2340 Accumulation with intermediate results Each F\u00a8 Looping / element-wise application over non-simple scalars Rank F\u2364k Looping / pair-wise application over cells Power F\u2363n F\u2363G Iteration Key F\u2338 Grouping The Inner Product Many people who have studied mathematics are familiar with one kind of inner product: matrix multiplication. (3 3\u23743 6 5 2)+.\u00d73 3\u23741 0 \u00af1 For two vectors: 1 3 6((+/\u00d7)\u2261+.\u00d7)1 0 \u00af1 The generalisation to any two functions leads to some neat encodings: 'abbcde'+.='cbccfe' \u235d How many equal? 1 3 4 5 2+.>0 3 3 6 3 \u235d How many greater than? As a particularly interesting example, the transitive closure of a connectivity matrix shows which nodes can reach which other nodes in a graph. cm\u21905 5\u23741 0 0 1 0 0 0 0 0 (\u2228.\u2227\u2368\u2228\u22a2)\u2363\u2261cm Traditional Just like their function counterparts , traditional operators or tradops have a definition syntax which reflects their calling syntax: \u2395VR'TradOp' \u2207 {result}\u2190{left}(LF TradOp RF)right [1] \u235d Dyadic operator which returns an ambivalent function [2] :If 0=\u2395NC'left' [3] result\u2190LF RF right [4] :Else [5] result\u2190LF left RF right [6] :EndIf \u2207 3 (\u00f7 TradOp +) 5 \u235d Shy results \u2395\u21903 (\u00f7 TradOp +) 5 \u235d The result Dop Dops can be named or anonymous. They are just like dfns, except \u237a\u237a refers to its left operand and, if dyadic, \u2375\u2375 refers to its right operand. For recursion, double-del \u2207\u2207 is used to refer to the operator itself (and therefore must be used with operands to become a function when called), whereas a single del \u2207 is used to refer to the derived function. Quirks of primitive operators Reduce and replicate Reduce and replicate are both represented by forward-slash / (and forward-slash-bar \u233f for their first-axis equivalents). Operators bind tightly (see the binding table in the online documentation ) to function operands, so a forward-slash in a function train will be interpreted as reduce. To force it to be the function replicate, use atop and right-tack . (2\u2218|\u22a2\u2364/\u22a2)\u237310 Of course this is subjective, but sometimes even simple functions look nicer as dfns: {\u2375\u233f\u23682|\u2375}\u237310 Primitive dyadic operators For no particular reason other than a technical limitation, dyadic primitive operators cannot be assigned to names. This is not a very useful thing to do in any case, but if you try this and find it does not work, just know that it is not supposed to work. If you must do this, the workaround is to wrap the operator in a simple dop. For example, _Rank_\u2190{\u237a\u2190\u22a2 \u22c4 \u237a (\u237a\u237a\u2364\u2375\u2375) \u2375} . Problem set 11 Filter The _Filter operator returns only scalars of \u2375 which satisfy a predicate \u237a\u237a . That is, \u2375 is part of the result where 1=\u237a\u237a \u2375 . Write the _Filter operator as a dop . 2\u2218|_Filter \u237320 \u235d Odd numbers 1 3 5 7 9 11 13 15 17 19 {(\u22a2=\u230a)0.5*\u2368\u2375}_Filter \u2373100 \u235d Square numbers 1 4 9 16 25 36 49 64 81 100 Apply The _Apply_ operator will return its argument array \u2375 , but with its right operand function \u2375\u2375 applied to elements for which 1=\u237a\u237a \u2375 . 3+_Apply_ 2\u2218|\u22a2\u237310 1 5 3 4 5 6 7 8 9 10 Which primitive operator behaves like this? What can that primitive operator do which is missing from the description of _Apply_ ? Implement a simple version of _Apply_ without using that primitive operator. Numerical integration This problem is from Phase 2 of the 2019 APL Problem Solving Competition . The definite integral of a real valued function can be interpreted as the area under its graph over some interval (unless the function is negative or the endpoints are flipped but let's not get into that). The same integral (left) approximated using the trapezoid rule (middle) and Simpson's rule (right). Red is overestimate and purple is underestimate. Contrary to what introductory courses in calculus might lead you to believe, symbolic integration is not in general feasible. The function you want to integrate might not have an antiderivative in closed form (expressed in terms of \u201cstandard\u201d mathematical functions; and even if it does, it might be too hard to find), or the function itself might not be given in closed form, but rather as the result of some measurement, simulation, or something similar. In such cases, numerical methods must be employed. There are several such methods, three of which we will implement in this problem set as APL user-defined operators. Trapezoid Rule In the trapezoid rule, the integral of a function \\(f\\) over an interval \\([a,b]\\) is estimated by dividing \\([a,b]\\) into \\(n\\) sub-intervals of size \\(\\Delta x=(b-a)/n\\) , and approximating \\(f\\) by a straight line within each (see the figure above). This means that \\(f\\) only needs to be evaluated in the \\(n+1\\) points \\({x_i}=a+i\\Delta x\\) . Putting it all together we get: \\({T_n}={{\\Delta x}\\over{2}}(f(x_0)+2f(x_1)+2f(x_2)+\\cdots+2f(x_{n-1})+f(x_n))\\) Write an APL operator, _Trapezoid , that: takes a left operand which is a scalar function. takes a positive integer left argument which is the number of subintervals. takes a 2-element numeric vector right argument which represents an interval \\([a,b]\\) where \\(a<b\\) . returns \\(T_n\\) for the given function and interval. Example: 1 \u235f_Trapezoid 1,*1 0.8591409142 (\u23734) \u235f_Trapezoid \u00a8 \u22821,*1 0.8591409142 0.9623362015 0.9829803154 0.9903650088 Simpson's Rule Using Simpson's rule the interval is similarly divided but, instead of approximating \\(f\\) by a straight line, the sub-intervals are paired up and \\(f\\) is approximated by a parabola (see the figure above). In general, this reduces the error but leads to the slightly more involved formula: \\(S_n = {{\\Delta x}\\over{3}} (f(x_0)+4f(x_1)+2f(x_2)+4f(x_3)+2f(x_4)+\\cdots+4f(x_{n-1})+f(x_n))\\) Write an operator, _Simpson , that: takes a left operand which is a scalar function takes an even, positive, integer left argument which is the number of sub-intervals. takes a 2-element vector right argument which represents an interval \\([a,b]\\) where \\(a<b\\) . returns \\(S_n\\) for the given function and interval. Example: 2 \u235f_Simpson 1,*1 0.9967346307 (2\u00d7\u23734) \u235f_Simpson\u00a8 \u22821,*1 0.9967346307 0.9997079446 0.999936071 0.9999788955 Romberg's Method This problem is significantly more difficult than the previous two. If you are not confident to try it straight away, feel free to skip it and come back later. Romberg's method generalizes the Trapezoid and Simpson's rules. As it turns out, given that \\(f\\) has enough continuous derivatives, by using Taylor's formula, the error of the Trapezoid rule can be expressed in terms of these. Then, using a technique known as Richardson extrapolation one can combine approximations using different numbers of subintervals to cancel out term after term of the error. Glossing over a ton of (really cool!) detail we can define the Romberg method using the following recurrence: \\({R^0_n}=T_{2^n}\\) \\({R^m_n}={1\\over{4^m-1}}(4^m R^{m-1}_n - R^{m-1}_{n-1})\\) Write an operator, _Romberg , that: takes a left operand which is a scalar function takes an integer left argument greater than or equal to \\(0\\) representing \\(n\\) . takes a 2-element vector right argument which represents an interval \\([a,b]\\) where \\(a<b\\) . returns \\(R^n_n\\) for the given function and interval. Try to find a solution that performs no unnecessary computation. That is, \\(f\\) should be computed at most once in each point, and \\(R^m_n\\) should be computed at most once for each \\(m\\) and \\(n\\) . Example: ( \u03041+\u23734)\u235fRomberg \u0308\u22821,*1 \u235d Recognize the first two values? 0.8591409142 0.9967346307 0.9999061655 0.9999984001 When in Rome... This problem is from the 2012 APL Problem Solving Competition . Roman numerals, as used today, are based on seven symbols: Symbol Value I \\(1\\) V \\(5\\) X \\(10\\) L \\(50\\) C \\(100\\) D \\(500\\) M \\(1000\\) Numbers are formed by combining symbols together and adding the values. For example, MMVI is \\(1000 + 1000 + 5 + 1 = 2006\\) . Generally, symbols are placed in order of value, starting with the largest values. When smaller values precede larger values, the smaller values are subtracted from the larger values, and the result is added to the total. For example MCMXLIV is \\(1000 + (1000 \u2212 100) + (50 \u2212 10) + (5 \u2212 1) = 1944\\) . There has never been a universally accepted set of rules for Roman numerals. Because of this lack of standardization, there may be multiple ways of representing the same number in Roman numerals. Despite the lack of standardization, an additional set of rules has been frequently applied for the last few hundred years. The symbols I , X , C and M can be repeated three times in succession, but no more, unless the third and fourth are separated by a smaller value, as in XXXIX . D , L and V can never be repeated. I can be subtracted from V and X only. X can be subtracted from L and C only. C can be subtracted from D and M only. V , L and D can never be subtracted. Only one small-value symbol may be subtracted from any large-value symbol. A number written in Arabic numerals can be broken into digits. For example, 1903 is composed of \\(1\\) , \\(9\\) , \\(0\\) , and \\(3\\) . To write the Roman numeral, each of the non-zero digits should be treated separately. In the above example, 1000= CM and \\(3\\) is III . Therefore, \\(1903\\) is MCMIII . Using this additional set of rules, there is only one possible Roman numeral for any given number. In addition, for this problem, we will add the following rules: \\(0\\) (zero) should be represented by an empty character vector Negative numbers should be preceded by an APL high minus ( \u00af ) Non-integers should be rounded up (0.5 and above rounds up) Larger numbers simply have a number of leading M's. For example, \\(5005\\) is represented as MMMMMV The _Roman Operator Write a monadic operator _Roman that takes a function left operand and derived a function which is able to do computation on Roman numerals. 'III'+_Roman'II' V \u2373_Roman'X' \u250c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2510 \u2502I\u2502II\u2502III\u2502IV\u2502V\u2502VI\u2502VII\u2502VIII\u2502IX\u2502X\u2502 \u2514\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2518 +/_Roman\u2373_Roman'X' LV Don't worry about \"mixed\" types. We don't expect this to work: 'II' 'III'\u2374_Roman\u23736 But the following should: 'II' 'III'\u2374_Roman\u2373_Roman'VI' \u250c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502I \u2502II\u2502III\u2502 \u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502IV\u2502V \u2502VI \u2502 \u2514\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2518 Use ]Display to get the full description of the structure. Single Roman symbols are simple character scalars, whereas compound numbers are enclosed character vectors. ]Display 2 3\u2374_Roman\u2373_Roman'VI' \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2193 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502 \u2502 I \u2502II\u2502 \u2502III\u2502 \u2502 \u2502 - \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502 \u2502 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2510 \u2502 \u2502 \u2502IV\u2502 V \u2502VI\u2502 \u2502 \u2502 \u2514\u2500\u2500\u2518 - \u2514\u2500\u2500\u2518 \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Under Over The over operator \u237a\u237a\u2365\u2375\u2375 was introduced in Dyalog in version 18.0. It can be thought of as applying the left operand function \u237a\u237a to arguments which have been pre-processed using the right operand function \u2375\u2375 . Example: 1 3 2 +_O_\u00d7 5 0 \u00af5 \u235d Sum of signs 'some text'\u2261_O_ 0\u2218(819\u2336)'SOME TEXT' \u235d Case-insensitive match The under (or dual ) operator \u237a\u237a\u2362\u2375\u2375 has not been implemented in Dyalog. However, it can be partially modelled. It is the same as over \u2365 , except that the inverse of \u2375\u2375 is applied to the result. Write the operator _U_ to model the behaviour of under. Example: 3 +_U_\u235f 5 \u235d Multiplication is addition under logarithm 15 3 \u00d7_U_* 5 \u235d Plus is times under power 8 'C'+_U_(\u2395A\u2218\u2373)'D' \u235d 7=3+4 G Hint Use the power operator F\u2363n to derive an inverse function. Key without \u2338 The key operator groups major cells of \u2375 according to keys \u237a , where \u237a\u2261\u2365\u2262\u2375 . When called monadically, the derived function using key will use \u2375 itself as the keys. Write the operator _Key which works like \u2338 but does not use the \u2338 glyph. Example: {\u237a,\u2262\u2375}_Key 'mississippi' m 1 i 4 s 4 p 2 {\u237a(\u2262\u2375)}_Key 5 2\u23741 0 0 \u250c\u2500\u2500\u2500\u252c\u2500\u2510 \u25021 0\u25022\u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2524 \u25020 1\u25022\u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2524 \u25020 0\u25021\u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2518 'aabcc'{\u2282\u2375}_Key 5 2\u23741 0 0 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u25021 0\u25020 0\u25021 0\u2502 \u25020 1\u2502 \u25020 1\u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518","title":"Operators"},{"location":"Operators/#operators","text":"","title":"Operators"},{"location":"Operators/#about","text":"Dyalog APL is not a functional programming language, but those familiar with functional languages will recognise APL's operators as higher-order functions . Operators in Dyalog can be: monadic (take a single left operand as in F/ ) dyadic (take a left and a right operand as in F\u2364k ) but they cannot be ambivalent. However, the functions derived from operators can be monadic, dyadic or ambivalent in terms of arguments. Abmivalent dfns usually have a default left argument ( \u237a\u2190default ) and ambivalent tradfns test if their left argument exists ( 0=\u2395NC'left_arg' ).","title":"About"},{"location":"Operators/#primitive","text":"We have already used a few primitive operators, but there is a complete summary of primitive operators in the online documentation.","title":"Primitive"},{"location":"Operators/#quick-guide","text":"For some commonly used operators Operator Calling syntax Used for Reduce F/ F\u233f Accumulation N-wise reduce nF/ nF\u233f Windowed-reduction Scan F\u2340 Accumulation with intermediate results Each F\u00a8 Looping / element-wise application over non-simple scalars Rank F\u2364k Looping / pair-wise application over cells Power F\u2363n F\u2363G Iteration Key F\u2338 Grouping","title":"Quick guide"},{"location":"Operators/#the-inner-product","text":"Many people who have studied mathematics are familiar with one kind of inner product: matrix multiplication. (3 3\u23743 6 5 2)+.\u00d73 3\u23741 0 \u00af1 For two vectors: 1 3 6((+/\u00d7)\u2261+.\u00d7)1 0 \u00af1 The generalisation to any two functions leads to some neat encodings: 'abbcde'+.='cbccfe' \u235d How many equal? 1 3 4 5 2+.>0 3 3 6 3 \u235d How many greater than? As a particularly interesting example, the transitive closure of a connectivity matrix shows which nodes can reach which other nodes in a graph. cm\u21905 5\u23741 0 0 1 0 0 0 0 0 (\u2228.\u2227\u2368\u2228\u22a2)\u2363\u2261cm","title":"The Inner Product"},{"location":"Operators/#traditional","text":"Just like their function counterparts , traditional operators or tradops have a definition syntax which reflects their calling syntax: \u2395VR'TradOp' \u2207 {result}\u2190{left}(LF TradOp RF)right [1] \u235d Dyadic operator which returns an ambivalent function [2] :If 0=\u2395NC'left' [3] result\u2190LF RF right [4] :Else [5] result\u2190LF left RF right [6] :EndIf \u2207 3 (\u00f7 TradOp +) 5 \u235d Shy results \u2395\u21903 (\u00f7 TradOp +) 5 \u235d The result","title":"Traditional"},{"location":"Operators/#dop","text":"Dops can be named or anonymous. They are just like dfns, except \u237a\u237a refers to its left operand and, if dyadic, \u2375\u2375 refers to its right operand. For recursion, double-del \u2207\u2207 is used to refer to the operator itself (and therefore must be used with operands to become a function when called), whereas a single del \u2207 is used to refer to the derived function.","title":"Dop"},{"location":"Operators/#quirks-of-primitive-operators","text":"","title":"Quirks of primitive operators"},{"location":"Operators/#reduce-and-replicate","text":"Reduce and replicate are both represented by forward-slash / (and forward-slash-bar \u233f for their first-axis equivalents). Operators bind tightly (see the binding table in the online documentation ) to function operands, so a forward-slash in a function train will be interpreted as reduce. To force it to be the function replicate, use atop and right-tack . (2\u2218|\u22a2\u2364/\u22a2)\u237310 Of course this is subjective, but sometimes even simple functions look nicer as dfns: {\u2375\u233f\u23682|\u2375}\u237310","title":"Reduce and replicate"},{"location":"Operators/#primitive-dyadic-operators","text":"For no particular reason other than a technical limitation, dyadic primitive operators cannot be assigned to names. This is not a very useful thing to do in any case, but if you try this and find it does not work, just know that it is not supposed to work. If you must do this, the workaround is to wrap the operator in a simple dop. For example, _Rank_\u2190{\u237a\u2190\u22a2 \u22c4 \u237a (\u237a\u237a\u2364\u2375\u2375) \u2375} .","title":"Primitive dyadic operators"},{"location":"Operators/#problem-set-11","text":"","title":"Problem set 11"},{"location":"Operators/#filter","text":"The _Filter operator returns only scalars of \u2375 which satisfy a predicate \u237a\u237a . That is, \u2375 is part of the result where 1=\u237a\u237a \u2375 . Write the _Filter operator as a dop . 2\u2218|_Filter \u237320 \u235d Odd numbers 1 3 5 7 9 11 13 15 17 19 {(\u22a2=\u230a)0.5*\u2368\u2375}_Filter \u2373100 \u235d Square numbers 1 4 9 16 25 36 49 64 81 100","title":"Filter"},{"location":"Operators/#apply","text":"The _Apply_ operator will return its argument array \u2375 , but with its right operand function \u2375\u2375 applied to elements for which 1=\u237a\u237a \u2375 . 3+_Apply_ 2\u2218|\u22a2\u237310 1 5 3 4 5 6 7 8 9 10 Which primitive operator behaves like this? What can that primitive operator do which is missing from the description of _Apply_ ? Implement a simple version of _Apply_ without using that primitive operator.","title":"Apply"},{"location":"Operators/#numerical-integration","text":"This problem is from Phase 2 of the 2019 APL Problem Solving Competition . The definite integral of a real valued function can be interpreted as the area under its graph over some interval (unless the function is negative or the endpoints are flipped but let's not get into that). The same integral (left) approximated using the trapezoid rule (middle) and Simpson's rule (right). Red is overestimate and purple is underestimate. Contrary to what introductory courses in calculus might lead you to believe, symbolic integration is not in general feasible. The function you want to integrate might not have an antiderivative in closed form (expressed in terms of \u201cstandard\u201d mathematical functions; and even if it does, it might be too hard to find), or the function itself might not be given in closed form, but rather as the result of some measurement, simulation, or something similar. In such cases, numerical methods must be employed. There are several such methods, three of which we will implement in this problem set as APL user-defined operators.","title":"Numerical integration"},{"location":"Operators/#trapezoid-rule","text":"In the trapezoid rule, the integral of a function \\(f\\) over an interval \\([a,b]\\) is estimated by dividing \\([a,b]\\) into \\(n\\) sub-intervals of size \\(\\Delta x=(b-a)/n\\) , and approximating \\(f\\) by a straight line within each (see the figure above). This means that \\(f\\) only needs to be evaluated in the \\(n+1\\) points \\({x_i}=a+i\\Delta x\\) . Putting it all together we get: \\({T_n}={{\\Delta x}\\over{2}}(f(x_0)+2f(x_1)+2f(x_2)+\\cdots+2f(x_{n-1})+f(x_n))\\) Write an APL operator, _Trapezoid , that: takes a left operand which is a scalar function. takes a positive integer left argument which is the number of subintervals. takes a 2-element numeric vector right argument which represents an interval \\([a,b]\\) where \\(a<b\\) . returns \\(T_n\\) for the given function and interval. Example: 1 \u235f_Trapezoid 1,*1 0.8591409142 (\u23734) \u235f_Trapezoid \u00a8 \u22821,*1 0.8591409142 0.9623362015 0.9829803154 0.9903650088","title":"Trapezoid Rule"},{"location":"Operators/#simpsons-rule","text":"Using Simpson's rule the interval is similarly divided but, instead of approximating \\(f\\) by a straight line, the sub-intervals are paired up and \\(f\\) is approximated by a parabola (see the figure above). In general, this reduces the error but leads to the slightly more involved formula: \\(S_n = {{\\Delta x}\\over{3}} (f(x_0)+4f(x_1)+2f(x_2)+4f(x_3)+2f(x_4)+\\cdots+4f(x_{n-1})+f(x_n))\\) Write an operator, _Simpson , that: takes a left operand which is a scalar function takes an even, positive, integer left argument which is the number of sub-intervals. takes a 2-element vector right argument which represents an interval \\([a,b]\\) where \\(a<b\\) . returns \\(S_n\\) for the given function and interval. Example: 2 \u235f_Simpson 1,*1 0.9967346307 (2\u00d7\u23734) \u235f_Simpson\u00a8 \u22821,*1 0.9967346307 0.9997079446 0.999936071 0.9999788955","title":"Simpson's Rule"},{"location":"Operators/#rombergs-method","text":"This problem is significantly more difficult than the previous two. If you are not confident to try it straight away, feel free to skip it and come back later. Romberg's method generalizes the Trapezoid and Simpson's rules. As it turns out, given that \\(f\\) has enough continuous derivatives, by using Taylor's formula, the error of the Trapezoid rule can be expressed in terms of these. Then, using a technique known as Richardson extrapolation one can combine approximations using different numbers of subintervals to cancel out term after term of the error. Glossing over a ton of (really cool!) detail we can define the Romberg method using the following recurrence: \\({R^0_n}=T_{2^n}\\) \\({R^m_n}={1\\over{4^m-1}}(4^m R^{m-1}_n - R^{m-1}_{n-1})\\) Write an operator, _Romberg , that: takes a left operand which is a scalar function takes an integer left argument greater than or equal to \\(0\\) representing \\(n\\) . takes a 2-element vector right argument which represents an interval \\([a,b]\\) where \\(a<b\\) . returns \\(R^n_n\\) for the given function and interval. Try to find a solution that performs no unnecessary computation. That is, \\(f\\) should be computed at most once in each point, and \\(R^m_n\\) should be computed at most once for each \\(m\\) and \\(n\\) . Example: ( \u03041+\u23734)\u235fRomberg \u0308\u22821,*1 \u235d Recognize the first two values? 0.8591409142 0.9967346307 0.9999061655 0.9999984001","title":"Romberg's Method"},{"location":"Operators/#when-in-rome","text":"This problem is from the 2012 APL Problem Solving Competition . Roman numerals, as used today, are based on seven symbols: Symbol Value I \\(1\\) V \\(5\\) X \\(10\\) L \\(50\\) C \\(100\\) D \\(500\\) M \\(1000\\) Numbers are formed by combining symbols together and adding the values. For example, MMVI is \\(1000 + 1000 + 5 + 1 = 2006\\) . Generally, symbols are placed in order of value, starting with the largest values. When smaller values precede larger values, the smaller values are subtracted from the larger values, and the result is added to the total. For example MCMXLIV is \\(1000 + (1000 \u2212 100) + (50 \u2212 10) + (5 \u2212 1) = 1944\\) . There has never been a universally accepted set of rules for Roman numerals. Because of this lack of standardization, there may be multiple ways of representing the same number in Roman numerals. Despite the lack of standardization, an additional set of rules has been frequently applied for the last few hundred years. The symbols I , X , C and M can be repeated three times in succession, but no more, unless the third and fourth are separated by a smaller value, as in XXXIX . D , L and V can never be repeated. I can be subtracted from V and X only. X can be subtracted from L and C only. C can be subtracted from D and M only. V , L and D can never be subtracted. Only one small-value symbol may be subtracted from any large-value symbol. A number written in Arabic numerals can be broken into digits. For example, 1903 is composed of \\(1\\) , \\(9\\) , \\(0\\) , and \\(3\\) . To write the Roman numeral, each of the non-zero digits should be treated separately. In the above example, 1000= CM and \\(3\\) is III . Therefore, \\(1903\\) is MCMIII . Using this additional set of rules, there is only one possible Roman numeral for any given number. In addition, for this problem, we will add the following rules: \\(0\\) (zero) should be represented by an empty character vector Negative numbers should be preceded by an APL high minus ( \u00af ) Non-integers should be rounded up (0.5 and above rounds up) Larger numbers simply have a number of leading M's. For example, \\(5005\\) is represented as MMMMMV The _Roman Operator Write a monadic operator _Roman that takes a function left operand and derived a function which is able to do computation on Roman numerals. 'III'+_Roman'II' V \u2373_Roman'X' \u250c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2510 \u2502I\u2502II\u2502III\u2502IV\u2502V\u2502VI\u2502VII\u2502VIII\u2502IX\u2502X\u2502 \u2514\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2518 +/_Roman\u2373_Roman'X' LV Don't worry about \"mixed\" types. We don't expect this to work: 'II' 'III'\u2374_Roman\u23736 But the following should: 'II' 'III'\u2374_Roman\u2373_Roman'VI' \u250c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u2502I \u2502II\u2502III\u2502 \u251c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u2502IV\u2502V \u2502VI \u2502 \u2514\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2500\u2518 Use ]Display to get the full description of the structure. Single Roman symbols are simple character scalars, whereas compound numbers are enclosed character vectors. ]Display 2 3\u2374_Roman\u2373_Roman'VI' \u250c\u2192\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2193 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2500\u2510 \u2502 \u2502 I \u2502II\u2502 \u2502III\u2502 \u2502 \u2502 - \u2514\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2502 \u2502 \u250c\u2192\u2500\u2510 \u250c\u2192\u2500\u2510 \u2502 \u2502 \u2502IV\u2502 V \u2502VI\u2502 \u2502 \u2502 \u2514\u2500\u2500\u2518 - \u2514\u2500\u2500\u2518 \u2502 \u2514\u220a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"When in Rome..."},{"location":"Operators/#under-over","text":"The over operator \u237a\u237a\u2365\u2375\u2375 was introduced in Dyalog in version 18.0. It can be thought of as applying the left operand function \u237a\u237a to arguments which have been pre-processed using the right operand function \u2375\u2375 . Example: 1 3 2 +_O_\u00d7 5 0 \u00af5 \u235d Sum of signs 'some text'\u2261_O_ 0\u2218(819\u2336)'SOME TEXT' \u235d Case-insensitive match The under (or dual ) operator \u237a\u237a\u2362\u2375\u2375 has not been implemented in Dyalog. However, it can be partially modelled. It is the same as over \u2365 , except that the inverse of \u2375\u2375 is applied to the result. Write the operator _U_ to model the behaviour of under. Example: 3 +_U_\u235f 5 \u235d Multiplication is addition under logarithm 15 3 \u00d7_U_* 5 \u235d Plus is times under power 8 'C'+_U_(\u2395A\u2218\u2373)'D' \u235d 7=3+4 G Hint Use the power operator F\u2363n to derive an inverse function.","title":"Under Over"},{"location":"Operators/#key-without","text":"The key operator groups major cells of \u2375 according to keys \u237a , where \u237a\u2261\u2365\u2262\u2375 . When called monadically, the derived function using key will use \u2375 itself as the keys. Write the operator _Key which works like \u2338 but does not use the \u2338 glyph. Example: {\u237a,\u2262\u2375}_Key 'mississippi' m 1 i 4 s 4 p 2 {\u237a(\u2262\u2375)}_Key 5 2\u23741 0 0 \u250c\u2500\u2500\u2500\u252c\u2500\u2510 \u25021 0\u25022\u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2524 \u25020 1\u25022\u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2524 \u25020 0\u25021\u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2518 'aabcc'{\u2282\u2375}_Key 5 2\u23741 0 0 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u25021 0\u25020 0\u25021 0\u2502 \u25020 1\u2502 \u25020 1\u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518","title":"Key without \u2338"},{"location":"Outer-product/","text":"Creating a Matrix The \"outer product\" \u2218.F operator applies its function operand F between all combinations of elements of its left and right argument arrays. F\u2190{\u237a+\u2375} 1 2 3 \u2218.F 10 20 30 11 21 31 12 22 32 13 23 33 For example, the catenate function \u237a,\u2375 (comma) will join two lists together. We can use the outer product to join combinations of words from two lists. 1 4 9 , 6 5 4 1 4 9 6 5 4 'joined up' , 'text vectors' joined uptext vectors 'chicken' 'pork' 'vegetable' \u2218., ' chow mein' ' with cashew nuts' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502chicken chow mein \u2502chicken with cashew nuts \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502pork chow mein \u2502pork with cashew nuts \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502vegetable chow mein\u2502vegetable with cashew nuts\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Note If you do not see lines around the output of the last expression above in your interpreter session, turn boxing on: ]box on Was OFF \u23733 3 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u25021 1\u25021 2\u25021 3\u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u25022 1\u25022 2\u25022 3\u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u25023 1\u25023 2\u25023 3\u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518 Reduce down Reduce-first F\u233f on a matrix will reduce down columns instead of along rows. \u2218.\u00f7\u2368\u23733 1 0.5 0.3333333333 2 1 0.6666666667 3 1.5 1 +/\u2218.\u00f7\u2368\u23733 \u235d Sum of rows 1.833333333 3.666666667 5.5 +\u233f\u2218.\u00f7\u2368\u23733 \u235d Sum of columns 6 3 2 Comparison Functions Up to now the only comparison function we have seen is \u237a=\u2375 . You should be aware that APL includes logical comparison functions < \u2264 = \u2260 \u2265 > . Furthermore, most necessary primitives have been explicitly introduced before each problem set. Many APL interpreters include a language bar to aid with typing symbols. Necessary constructs will continue to be introduced in each section. However, you are encouraged to explore the language bar and experiment with the primitive functions, as these constitute your core vocabulary for solving problems. As you continue through these sessions fewer outright explanations will be given, and you are encouraged to experiment with the given examples to develop an understanding of the language. It is also worth mentioning at this point that pressing F1 in Dyalog with the text cursor on a primitive will open the help for that primitive. Problem Set 4 Back to School Write a function to produce the multiplication table from 1 to \u2375 . MulTable 7 1 2 3 4 5 6 7 2 4 6 8 10 12 14 3 6 9 12 15 18 21 4 8 12 16 20 24 28 5 10 15 20 25 30 35 6 12 18 24 30 36 42 7 14 21 28 35 42 49 Write a function to produce the addition table from 0 to \u2375 . AddTable 6 0 1 2 3 4 5 6 1 2 3 4 5 6 7 2 3 4 5 6 7 8 3 4 5 6 7 8 9 4 5 6 7 8 9 10 5 6 7 8 9 10 11 6 7 8 9 10 11 12 Making the Grade Score Range 0-64 65-69 70-79 80-89 90-100 Letter Grade F D C B A Write a function that, given an array of integer test scores in the inclusive range 0 to 100, returns a list of letter grades according to the table above. Grade 0 10 75 78 85 FFCCB Optimus Prime A prime number is divisible by only itself and 1 . Write a dfn which returns all of the prime numbers between 1 and \u2375 . Primes 10 2 3 5 7 Primes 30 2 3 5 7 11 13 17 19 23 29","title":"The Outer Product"},{"location":"Outer-product/#creating-a-matrix","text":"The \"outer product\" \u2218.F operator applies its function operand F between all combinations of elements of its left and right argument arrays. F\u2190{\u237a+\u2375} 1 2 3 \u2218.F 10 20 30 11 21 31 12 22 32 13 23 33 For example, the catenate function \u237a,\u2375 (comma) will join two lists together. We can use the outer product to join combinations of words from two lists. 1 4 9 , 6 5 4 1 4 9 6 5 4 'joined up' , 'text vectors' joined uptext vectors 'chicken' 'pork' 'vegetable' \u2218., ' chow mein' ' with cashew nuts' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502chicken chow mein \u2502chicken with cashew nuts \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502pork chow mein \u2502pork with cashew nuts \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502vegetable chow mein\u2502vegetable with cashew nuts\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Note If you do not see lines around the output of the last expression above in your interpreter session, turn boxing on: ]box on Was OFF \u23733 3 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510 \u25021 1\u25021 2\u25021 3\u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u25022 1\u25022 2\u25022 3\u2502 \u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524 \u25023 1\u25023 2\u25023 3\u2502 \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518","title":"Creating a Matrix"},{"location":"Outer-product/#reduce-down","text":"Reduce-first F\u233f on a matrix will reduce down columns instead of along rows. \u2218.\u00f7\u2368\u23733 1 0.5 0.3333333333 2 1 0.6666666667 3 1.5 1 +/\u2218.\u00f7\u2368\u23733 \u235d Sum of rows 1.833333333 3.666666667 5.5 +\u233f\u2218.\u00f7\u2368\u23733 \u235d Sum of columns 6 3 2","title":"Reduce down"},{"location":"Outer-product/#comparison-functions","text":"Up to now the only comparison function we have seen is \u237a=\u2375 . You should be aware that APL includes logical comparison functions < \u2264 = \u2260 \u2265 > . Furthermore, most necessary primitives have been explicitly introduced before each problem set. Many APL interpreters include a language bar to aid with typing symbols. Necessary constructs will continue to be introduced in each section. However, you are encouraged to explore the language bar and experiment with the primitive functions, as these constitute your core vocabulary for solving problems. As you continue through these sessions fewer outright explanations will be given, and you are encouraged to experiment with the given examples to develop an understanding of the language. It is also worth mentioning at this point that pressing F1 in Dyalog with the text cursor on a primitive will open the help for that primitive.","title":"Comparison Functions"},{"location":"Outer-product/#problem-set-4","text":"Back to School Write a function to produce the multiplication table from 1 to \u2375 . MulTable 7 1 2 3 4 5 6 7 2 4 6 8 10 12 14 3 6 9 12 15 18 21 4 8 12 16 20 24 28 5 10 15 20 25 30 35 6 12 18 24 30 36 42 7 14 21 28 35 42 49 Write a function to produce the addition table from 0 to \u2375 . AddTable 6 0 1 2 3 4 5 6 1 2 3 4 5 6 7 2 3 4 5 6 7 8 3 4 5 6 7 8 9 4 5 6 7 8 9 10 5 6 7 8 9 10 11 6 7 8 9 10 11 12 Making the Grade Score Range 0-64 65-69 70-79 80-89 90-100 Letter Grade F D C B A Write a function that, given an array of integer test scores in the inclusive range 0 to 100, returns a list of letter grades according to the table above. Grade 0 10 75 78 85 FFCCB Optimus Prime A prime number is divisible by only itself and 1 . Write a dfn which returns all of the prime numbers between 1 and \u2375 . Primes 10 2 3 5 7 Primes 30 2 3 5 7 11 13 17 19 23 29","title":"Problem Set 4"},{"location":"Quad%20names/","text":"Quad names Overview There is a vendor-agnostic article about quad-names on the APL Wiki . This page is an overview focusing on application development with Dyalog. See the Dyalog online documentation for: a complete list of categorised system functions with descriptions a complete list of system variables with descriptions a complete list of system functions and variables System variables The Dyalog online documentation has a complete list of system variables . System variables describe the state of the system. Some variables are static and cannot change. Some variables are dynamic and can change without direct user intervention. The others can be changed by the user . .svstc{color: red;} .svdyn{color: orange;} .svset{color: blue;} \u2395A \u2395DM \u2395DMX \u2395PATH \u2395SM \u2395TRAP \u2395AN \u2395EN \u2395PP \u2395STACK \u2395TS \u2395AV \u2395FR \u2395PW \u2395TC \u2395USING \u2395AVU \u2395IO \u2395RL \u2395THIS \u2395WA \u2395CT \u2395LC \u2395RSI \u2395TID \u2395WSID \u2395D \u2395LX \u2395RTL \u2395TNAME \u2395WX \u2395DCT \u2395ML \u2395SE \u2395TNUMS \u2395XSI \u2395DIV \u2395NULL \u2395SI \u2395TPOOL Of course, the majority of the time you can refer to the help system to remind yourself exactly how each of these works. There are many system variables built up over the decades, many of which are kept mostly for backwards compatibility. In the following table, the system variables you are most likely to come across in existing code are highlighted in red . .sv{color: black;} .svimp{color: red;} \u2395A \u2395DM \u2395DMX \u2395PATH \u2395SM \u2395TRAP \u2395AN \u2395EN \u2395PP \u2395STACK \u2395TS \u2395AV \u2395FR \u2395PW \u2395TC \u2395USING \u2395AVU \u2395IO \u2395RL \u2395THIS \u2395WA \u2395CT \u2395LC \u2395RSI \u2395TID \u2395WSID \u2395D \u2395LX \u2395RTL \u2395TNAME \u2395WX \u2395DCT \u2395ML \u2395SE \u2395TNUMS \u2395XSI \u2395DIV \u2395NULL \u2395SI \u2395TPOOL Constant \u2395A \u235d Upper-case alphabet ABCDEFGHIJKLMNOPQRSTUVWXYZ \u2395D \u235d Digits 0-9 0123456789 \u2395AN \u235d User's ID dyalog \u2395NULL \u235d NULL constant [Null] \u2395TC \u235d BackSpace, LineFeed, CarriageReturn \u2395UCS\u2395TC \u235d BackSpace, LineFeed, CarriageReturn 8 10 13 Dynamic \u2395AV \u235d List of APL characters \u2395DM \u235d Last error message \u2395DMX \u235d \u2395DM+\u2395EN in a thread safe form \u2395EN \u235d Last error number \u2395RTL \u235d Response time limit \u2395SE \u235d The session object \u2395TS \u235d Current date/time \u2395THIS \u235d Current object Settable \u2395AVU characters to use in \u2395AV \u2395CT Comparison Tolerance \u2395DCT Decimal Comparison Tolerance \u2395DIV how to handle division by 0 \u2395FR float decimal system in use \u2395IO index origin \u2395ML Migration Level \u2395LX Latent eXpression \u2395PATH where to find functions Division control \u2395DIV\u21900 \u235d Default 3\u00f70 DOMAIN ERROR: Divide by zero 3\u00f70 \u2227 0\u00f70 1 \u2395DIV\u21901 3\u00f70 0 0\u00f70 0 Print Precision The number of significant digits in the display of numeric output. \u2395PP\u21903 \u00f7812 0.00123 \u2262'123' 3 \u2395PP\u219017 \u00f7812 0.0012315270935960591 \u2262'12315270935960591' 17 Print Width The Print Width \u2395PW sets the number of characters in the session before wrapping to a new line. It can be assigned to directly, or set to automatically adjust based on the IDE windows size. In the Microsoft Windows IDE, go to Options \u2192 Configure \u2192 Session and tick Auto PW . In the RIDE, go to Edit \u2192 Preferences \u2192 General \u2192 Session and tick Auto PW . System functions In this course, we try to introduce relevant quad-names in appropriate contexts. However, not every quad-name is shown in this tutorial. A complete collection of categorised system functions is available from the Dyalog online documentation . Further treatment of system functions is provided in Chapter L of Mastering Dyalog APL .","title":"Quad Names"},{"location":"Quad%20names/#quad-names","text":"","title":"Quad names"},{"location":"Quad%20names/#overview","text":"There is a vendor-agnostic article about quad-names on the APL Wiki . This page is an overview focusing on application development with Dyalog. See the Dyalog online documentation for: a complete list of categorised system functions with descriptions a complete list of system variables with descriptions a complete list of system functions and variables","title":"Overview"},{"location":"Quad%20names/#system-variables","text":"The Dyalog online documentation has a complete list of system variables . System variables describe the state of the system. Some variables are static and cannot change. Some variables are dynamic and can change without direct user intervention. The others can be changed by the user . .svstc{color: red;} .svdyn{color: orange;} .svset{color: blue;} \u2395A \u2395DM \u2395DMX \u2395PATH \u2395SM \u2395TRAP \u2395AN \u2395EN \u2395PP \u2395STACK \u2395TS \u2395AV \u2395FR \u2395PW \u2395TC \u2395USING \u2395AVU \u2395IO \u2395RL \u2395THIS \u2395WA \u2395CT \u2395LC \u2395RSI \u2395TID \u2395WSID \u2395D \u2395LX \u2395RTL \u2395TNAME \u2395WX \u2395DCT \u2395ML \u2395SE \u2395TNUMS \u2395XSI \u2395DIV \u2395NULL \u2395SI \u2395TPOOL Of course, the majority of the time you can refer to the help system to remind yourself exactly how each of these works. There are many system variables built up over the decades, many of which are kept mostly for backwards compatibility. In the following table, the system variables you are most likely to come across in existing code are highlighted in red . .sv{color: black;} .svimp{color: red;} \u2395A \u2395DM \u2395DMX \u2395PATH \u2395SM \u2395TRAP \u2395AN \u2395EN \u2395PP \u2395STACK \u2395TS \u2395AV \u2395FR \u2395PW \u2395TC \u2395USING \u2395AVU \u2395IO \u2395RL \u2395THIS \u2395WA \u2395CT \u2395LC \u2395RSI \u2395TID \u2395WSID \u2395D \u2395LX \u2395RTL \u2395TNAME \u2395WX \u2395DCT \u2395ML \u2395SE \u2395TNUMS \u2395XSI \u2395DIV \u2395NULL \u2395SI \u2395TPOOL","title":"System variables"},{"location":"Quad%20names/#constant","text":"\u2395A \u235d Upper-case alphabet ABCDEFGHIJKLMNOPQRSTUVWXYZ \u2395D \u235d Digits 0-9 0123456789 \u2395AN \u235d User's ID dyalog \u2395NULL \u235d NULL constant [Null] \u2395TC \u235d BackSpace, LineFeed, CarriageReturn \u2395UCS\u2395TC \u235d BackSpace, LineFeed, CarriageReturn 8 10 13","title":"Constant"},{"location":"Quad%20names/#dynamic","text":"\u2395AV \u235d List of APL characters \u2395DM \u235d Last error message \u2395DMX \u235d \u2395DM+\u2395EN in a thread safe form \u2395EN \u235d Last error number \u2395RTL \u235d Response time limit \u2395SE \u235d The session object \u2395TS \u235d Current date/time \u2395THIS \u235d Current object","title":"Dynamic"},{"location":"Quad%20names/#settable","text":"\u2395AVU characters to use in \u2395AV \u2395CT Comparison Tolerance \u2395DCT Decimal Comparison Tolerance \u2395DIV how to handle division by 0 \u2395FR float decimal system in use \u2395IO index origin \u2395ML Migration Level \u2395LX Latent eXpression \u2395PATH where to find functions","title":"Settable"},{"location":"Quad%20names/#division-control","text":"\u2395DIV\u21900 \u235d Default 3\u00f70 DOMAIN ERROR: Divide by zero 3\u00f70 \u2227 0\u00f70 1 \u2395DIV\u21901 3\u00f70 0 0\u00f70 0","title":"Division control"},{"location":"Quad%20names/#print-precision","text":"The number of significant digits in the display of numeric output. \u2395PP\u21903 \u00f7812 0.00123 \u2262'123' 3 \u2395PP\u219017 \u00f7812 0.0012315270935960591 \u2262'12315270935960591' 17","title":"Print Precision"},{"location":"Quad%20names/#print-width","text":"The Print Width \u2395PW sets the number of characters in the session before wrapping to a new line. It can be assigned to directly, or set to automatically adjust based on the IDE windows size. In the Microsoft Windows IDE, go to Options \u2192 Configure \u2192 Session and tick Auto PW . In the RIDE, go to Edit \u2192 Preferences \u2192 General \u2192 Session and tick Auto PW .","title":"Print Width"},{"location":"Quad%20names/#system-functions","text":"In this course, we try to introduce relevant quad-names in appropriate contexts. However, not every quad-name is shown in this tutorial. A complete collection of categorised system functions is available from the Dyalog online documentation . Further treatment of system functions is provided in Chapter L of Mastering Dyalog APL .","title":"System functions"},{"location":"Quirks/","text":"Out in the wild Much of what is presented in this course is what is called modern APL in that it contains extensions to the original mathematical notation . The term \"modern APL\" generally means APL implementations with some form of general nested arrays. Dyalog maintains long-term backwards compatibility, meaning that code which ran on Dyalog version 1 can be run on the latest version with little or no modification. Therefore it is good to be aware of all of the language constructs, even if some of them have fallen out of fashion in newly-written code. Branch Despite long and widespread use in many programming languages, :If :Else -style control structures are a relatively recent introduction to some APLs. Early on, the only way to control the flow of execution in APL was to using the branching arrow \u2192 . \u2192ln \u235d Go to integer line number ln or label ln: \u21920 \u235d Exit current function and resume calling line \u2192\u2395LC \u235d Resume suspended execution \u2192 \u235d Clear one stack suspension \u2192condition/ln \u235d If condition is true (1), go to line ln, otherwise go to next line \u2207 r\u2190BFac n \u235d Branching Factorial [1] \u235d {\u2375=1:\u2375 \u22c4 \u2375\u00d7\u2207 \u2375-1} [2] \u2192(n=1)/4 [3] r\u2190n\u00d7BFac n-1 \u22c4 \u21920 [4] r\u2190n \u2207 Keeping track of line numbers in this way would be a hassle for large programs. The introduction of labels makes understanding code easier. \u2207 r\u2190BFacL n \u235d Branching Factorial [1] \u235d with Label [2] \u235d {\u2375=1:\u2375 \u22c4 \u2375\u00d7\u2207 \u2375-1} [3] \u2192(n=1)/end [4] r\u2190n\u00d7BFac n-1 \u22c4 \u21920 [5] end:r\u2190n \u2207 The use of :GoTo might be more suggestive to those unfamiliar with \u2192 . \u2207 r\u2190BFacG n \u235d Branching Factorial [1] \u235d with GoTo [2] \u235d {\u2375=1:\u2375 \u22c4 \u2375\u00d7\u2207 \u2375-1} [3] :If n=1 [4] :GoTo end [5] :EndIf [6] r\u2190n\u00d7BFac n-1 [7] :Return [8] end:r\u2190n \u2207 You might prefer to use conditional keywords to keep blocks of statements together in a predictable way. \u2207 r\u2190BFacI n \u235d Branching Factorial [1] \u235d with If [2] \u235d {\u2375=1:\u2375 \u22c4 \u2375\u00d7\u2207 \u2375-1} [3] :If n=1 [4] r\u2190n [5] :Else [6] r\u2190n\u00d7BFac n-1 [7] :EndIf \u2207 The axis operator Before the rank operator was invented 1 , certain functions had comparable behaviour when used in conjunction with the axis operator . However, the axis operator is not a true operator: it is not general, does not fit the standard function-operator syntax and does not work with user-defined functions. However, there are some useful applications of the axis operator which are handy to know. Some can be replicated with combinations of both \u2364 rank and \u2349 transpose, for example. A\u21902 3 4\u2374\u2395A ,[1 2]A \u235d Merge first two axes ,[2 3]A \u235d Merge last two axes (2 3\u2374\u23736),[1]2 3\u2374\u2395A \u235d Catenate first axis (2 3\u2374\u23736),2 3\u2374\u2395A \u235d Catenate last axis (2 3\u2374\u23736),[0.5]2 3\u2374\u2395A \u235d Laminate before 1st axis (2 3\u2374\u23736),[2.5]2 3\u2374\u2395A \u235d Laminate after 2nd axis \u2282[1 3]A \u235d Enclose matrices along the first and third axes As an exercise, try to reformulate the expressions above using only combinations of the operand functions enclose ( \u2282\u2375 ), ravel ( ,\u2375 ) or catenate-first ( \u236a\u2375 ); the rank operator ( F\u2364k ); and dyadic transpose ( \u237a\u2349\u2375 ). Answers A\u21902 3 4\u2374\u2395A \u2349,\u23642\u22a22 3 1\u2349A \u235d Transpose and ravel matrices ,\u23642\u22a2A \u235d Ravel matrices (2 3\u2374\u23736)\u236a2 3\u2374\u2395A \u235d Catenate first axis (2 3\u2374\u23736)(\u236a\u23641)2 3\u2374\u2395A \u235d Catenate vectors (2 3\u2374\u23736)(2 3 1\u2349,\u23640\u23641)2 3\u2374\u2395A \u235d Laminate scalars within each pair of rows and transpose the result (2 3\u2374\u23736)(,\u23640\u23641)2 3\u2374\u2395A \u235d Laminate scalars within each pair of rows \u2282\u23642\u22a23 1 2\u2349A \u235d Enclose matrices after transpose Knowledge of the axis operator is required for anyone maintaining code which uses it, and it should be used to retain style unless all uses are to be replaced systematically with the rank operator. In any case, some people feel it provides pleasant syntactic sugar over the equivalent expressions which use rank and transpose. Portable defaults All system functions and variables have default values. However, to guarantee that your code will run correctly when copied into other users' code bases, it is a good idea to set some of these values at the top level of the namespaces or functions which constitute the entry points of your application. It is common to see (\u2395ML \u2395IO)\u21901 or similar at the top of production functions and scripted namespaces. Migration level The system variable \u2395ML (\" quad-em-ell \") specifies a \"migration level\" in order to allow code bases from other APL systems to work unmodified in Dyalog. In particular, some primitive symbols (like \u2283 and \u2191 ) have different definitions depending on the migration level. By default, this is set to 1. Index origin Due to its origin as a notational tool for teaching, arrays are indexed starting from 1 by default. However, some users are accustomed or find it convenient for indexing to start from 0 instead. In this way, it can be considered an \"offset from the beginning of the array\" rather than an ordinal index. Dyalog provides a way to choose whether arrays are indexed starting from zero or one: 'ABCD'[1] A \u2395IO\u21900 \u235d Quad eye-oh gets zero 'ABCD'[1] B APLers all agree that it would be better if there was only one option for \u2395IO , but none of them can agree on what it should be. The author is sure that saying \"the zero-th element\" is incorrect. The first element may be labelled 0, but it is still the first element. Caution with namespace references It is a good idea to organise code bases into namespaces which each serve a particular purpose. In this case, you will likely want to somehow access names in one namespace from calling functions in a different namespace. There are ways to do this, but they should all be used with caution. \u2395CS is a system function to change the current namespace. You can set the local search path for names using \u2395PATH . For example, if you have a collection of utilities in #.utils , you do not need to keep referring to those functions by their full paths #.utils.Foo #.utils.Goo if you set \u2395PATH\u2190'#.utils' . :With was really designed when working with GUI objects: \u2207 make caption [1] :With 'MyForm' \u2395WC 'Form' [2] Caption\u2190caption [3] Coord\u2190'Pixel' [4] Size\u2190400 800 \u22c4 Posn\u219020 30 [5] onClose\u2190'HandleClose' ... However, some users think that \u2395PATH , :With and \u2395CS simply make applications more difficult to debug when something goes wrong. In large functions, debugging can become difficult if namespaces and search paths are altered far from where an error occurs. This is especially problematic in tradfns with dynamic scope, if you forget to localise \u2395PATH within a function. One recommendation is to assign a reference to a long namespace path at the top of a function or namespace: str\u2190#.utils.strings str.(nl split) char_vec_with_embedded_newlines Auxiliary processors Auxiliary Processors AKA APs are a legacy mechanism akin to using compiled shared native libraries with \u2395NA . We do not recommended using them in new projects, but they remain for the support of existing systems. They were generally used when equivalent functionality written in APL was not performant, or not possible at the time. For example, in the past, set functions such as Index-Of \u237a\u2373\u2375 and Membership \u237a\u220a\u2375 were slow. For some time, APs had the general advantage that the interpreter would not crash due to an error in an AP, but these days their performance is relatively poor due to having to copy data in and out of the active workspace. The performance of primitive functions is much better now than in the past and APs are a deprecated feature. For some applications, you might want to see the documentation archive for information about the XUtils AP . Underscored alphabet See the online documentation for the underscored alphabet Before Unicode... before personal computers... before software fonts ... before electronic hardware fonts ... was... the typewriter! Due to its age, the history of APL is enough to appreciate many of the modern features that we take for granted in computing. The first APL ( Iverson Notation ) was written by hand. Some of the earliest APLs on computers were on mainframe computers and accessed via teletype terminals such as the IBM Selectric typewriter . These typewriters had type balls (colloquially referred to as \"golf balls\") which could be swapped out to enable different fonts - including an APL font. It is quite interesting to see such a system in action, for example in this demonstration of APL from 1975 , you can hear the typewriter aggressively rattling off keystrokes as the result of computation is relayed back to the terminal. While all of this is now historical curiosity, one hangover might be relevant if you are working on older code bases. Older APL systems did not have lower case letters. Instead, there was the alphabet ( \u2395A ), and an underscored alphabet ( \u2395\u24b6 - although in some fonts this is rendered as a circled-A \u24b6). In recent versions of Dyalog, some accented characters have been co-opted for compatibility with older applications. Refactoring It is usually best to continue code in the style in which you find it. This can include continuing to use many of the constructs which are here presented as \"historical quirks\". However, if an important part of the code base has become very difficult to reason about and debug, it might be worth your time to refactor it using more modern constructs and practices. This is referred to as \"paying down technical debt\", as the debt is accrued when the original author wrote code which makes it difficult, and therefore takes more time and money, to maintain. After paying the technical debt, it is hoped that future maintenance is far less resource intensive - so it is always a tradeoff between spending time now to make code nicer for the future, or spending time later wondering how the thing even works. Hui, R.K. and Kromberg, M.J., 2020. APL Since 1978. Proceedings of the ACM on Programming Languages. Section 3.1","title":"Historical Quirks"},{"location":"Quirks/#out-in-the-wild","text":"Much of what is presented in this course is what is called modern APL in that it contains extensions to the original mathematical notation . The term \"modern APL\" generally means APL implementations with some form of general nested arrays. Dyalog maintains long-term backwards compatibility, meaning that code which ran on Dyalog version 1 can be run on the latest version with little or no modification. Therefore it is good to be aware of all of the language constructs, even if some of them have fallen out of fashion in newly-written code.","title":"Out in the wild"},{"location":"Quirks/#branch","text":"Despite long and widespread use in many programming languages, :If :Else -style control structures are a relatively recent introduction to some APLs. Early on, the only way to control the flow of execution in APL was to using the branching arrow \u2192 . \u2192ln \u235d Go to integer line number ln or label ln: \u21920 \u235d Exit current function and resume calling line \u2192\u2395LC \u235d Resume suspended execution \u2192 \u235d Clear one stack suspension \u2192condition/ln \u235d If condition is true (1), go to line ln, otherwise go to next line \u2207 r\u2190BFac n \u235d Branching Factorial [1] \u235d {\u2375=1:\u2375 \u22c4 \u2375\u00d7\u2207 \u2375-1} [2] \u2192(n=1)/4 [3] r\u2190n\u00d7BFac n-1 \u22c4 \u21920 [4] r\u2190n \u2207 Keeping track of line numbers in this way would be a hassle for large programs. The introduction of labels makes understanding code easier. \u2207 r\u2190BFacL n \u235d Branching Factorial [1] \u235d with Label [2] \u235d {\u2375=1:\u2375 \u22c4 \u2375\u00d7\u2207 \u2375-1} [3] \u2192(n=1)/end [4] r\u2190n\u00d7BFac n-1 \u22c4 \u21920 [5] end:r\u2190n \u2207 The use of :GoTo might be more suggestive to those unfamiliar with \u2192 . \u2207 r\u2190BFacG n \u235d Branching Factorial [1] \u235d with GoTo [2] \u235d {\u2375=1:\u2375 \u22c4 \u2375\u00d7\u2207 \u2375-1} [3] :If n=1 [4] :GoTo end [5] :EndIf [6] r\u2190n\u00d7BFac n-1 [7] :Return [8] end:r\u2190n \u2207 You might prefer to use conditional keywords to keep blocks of statements together in a predictable way. \u2207 r\u2190BFacI n \u235d Branching Factorial [1] \u235d with If [2] \u235d {\u2375=1:\u2375 \u22c4 \u2375\u00d7\u2207 \u2375-1} [3] :If n=1 [4] r\u2190n [5] :Else [6] r\u2190n\u00d7BFac n-1 [7] :EndIf \u2207","title":"Branch"},{"location":"Quirks/#the-axis-operator","text":"Before the rank operator was invented 1 , certain functions had comparable behaviour when used in conjunction with the axis operator . However, the axis operator is not a true operator: it is not general, does not fit the standard function-operator syntax and does not work with user-defined functions. However, there are some useful applications of the axis operator which are handy to know. Some can be replicated with combinations of both \u2364 rank and \u2349 transpose, for example. A\u21902 3 4\u2374\u2395A ,[1 2]A \u235d Merge first two axes ,[2 3]A \u235d Merge last two axes (2 3\u2374\u23736),[1]2 3\u2374\u2395A \u235d Catenate first axis (2 3\u2374\u23736),2 3\u2374\u2395A \u235d Catenate last axis (2 3\u2374\u23736),[0.5]2 3\u2374\u2395A \u235d Laminate before 1st axis (2 3\u2374\u23736),[2.5]2 3\u2374\u2395A \u235d Laminate after 2nd axis \u2282[1 3]A \u235d Enclose matrices along the first and third axes As an exercise, try to reformulate the expressions above using only combinations of the operand functions enclose ( \u2282\u2375 ), ravel ( ,\u2375 ) or catenate-first ( \u236a\u2375 ); the rank operator ( F\u2364k ); and dyadic transpose ( \u237a\u2349\u2375 ). Answers A\u21902 3 4\u2374\u2395A \u2349,\u23642\u22a22 3 1\u2349A \u235d Transpose and ravel matrices ,\u23642\u22a2A \u235d Ravel matrices (2 3\u2374\u23736)\u236a2 3\u2374\u2395A \u235d Catenate first axis (2 3\u2374\u23736)(\u236a\u23641)2 3\u2374\u2395A \u235d Catenate vectors (2 3\u2374\u23736)(2 3 1\u2349,\u23640\u23641)2 3\u2374\u2395A \u235d Laminate scalars within each pair of rows and transpose the result (2 3\u2374\u23736)(,\u23640\u23641)2 3\u2374\u2395A \u235d Laminate scalars within each pair of rows \u2282\u23642\u22a23 1 2\u2349A \u235d Enclose matrices after transpose Knowledge of the axis operator is required for anyone maintaining code which uses it, and it should be used to retain style unless all uses are to be replaced systematically with the rank operator. In any case, some people feel it provides pleasant syntactic sugar over the equivalent expressions which use rank and transpose.","title":"The axis operator"},{"location":"Quirks/#portable-defaults","text":"All system functions and variables have default values. However, to guarantee that your code will run correctly when copied into other users' code bases, it is a good idea to set some of these values at the top level of the namespaces or functions which constitute the entry points of your application. It is common to see (\u2395ML \u2395IO)\u21901 or similar at the top of production functions and scripted namespaces.","title":"Portable defaults"},{"location":"Quirks/#migration-level","text":"The system variable \u2395ML (\" quad-em-ell \") specifies a \"migration level\" in order to allow code bases from other APL systems to work unmodified in Dyalog. In particular, some primitive symbols (like \u2283 and \u2191 ) have different definitions depending on the migration level. By default, this is set to 1.","title":"Migration level"},{"location":"Quirks/#index-origin","text":"Due to its origin as a notational tool for teaching, arrays are indexed starting from 1 by default. However, some users are accustomed or find it convenient for indexing to start from 0 instead. In this way, it can be considered an \"offset from the beginning of the array\" rather than an ordinal index. Dyalog provides a way to choose whether arrays are indexed starting from zero or one: 'ABCD'[1] A \u2395IO\u21900 \u235d Quad eye-oh gets zero 'ABCD'[1] B APLers all agree that it would be better if there was only one option for \u2395IO , but none of them can agree on what it should be. The author is sure that saying \"the zero-th element\" is incorrect. The first element may be labelled 0, but it is still the first element.","title":"Index origin"},{"location":"Quirks/#caution-with-namespace-references","text":"It is a good idea to organise code bases into namespaces which each serve a particular purpose. In this case, you will likely want to somehow access names in one namespace from calling functions in a different namespace. There are ways to do this, but they should all be used with caution. \u2395CS is a system function to change the current namespace. You can set the local search path for names using \u2395PATH . For example, if you have a collection of utilities in #.utils , you do not need to keep referring to those functions by their full paths #.utils.Foo #.utils.Goo if you set \u2395PATH\u2190'#.utils' . :With was really designed when working with GUI objects: \u2207 make caption [1] :With 'MyForm' \u2395WC 'Form' [2] Caption\u2190caption [3] Coord\u2190'Pixel' [4] Size\u2190400 800 \u22c4 Posn\u219020 30 [5] onClose\u2190'HandleClose' ... However, some users think that \u2395PATH , :With and \u2395CS simply make applications more difficult to debug when something goes wrong. In large functions, debugging can become difficult if namespaces and search paths are altered far from where an error occurs. This is especially problematic in tradfns with dynamic scope, if you forget to localise \u2395PATH within a function. One recommendation is to assign a reference to a long namespace path at the top of a function or namespace: str\u2190#.utils.strings str.(nl split) char_vec_with_embedded_newlines","title":"Caution with namespace references"},{"location":"Quirks/#auxiliary-processors","text":"Auxiliary Processors AKA APs are a legacy mechanism akin to using compiled shared native libraries with \u2395NA . We do not recommended using them in new projects, but they remain for the support of existing systems. They were generally used when equivalent functionality written in APL was not performant, or not possible at the time. For example, in the past, set functions such as Index-Of \u237a\u2373\u2375 and Membership \u237a\u220a\u2375 were slow. For some time, APs had the general advantage that the interpreter would not crash due to an error in an AP, but these days their performance is relatively poor due to having to copy data in and out of the active workspace. The performance of primitive functions is much better now than in the past and APs are a deprecated feature. For some applications, you might want to see the documentation archive for information about the XUtils AP .","title":"Auxiliary processors"},{"location":"Quirks/#underscored-alphabet","text":"See the online documentation for the underscored alphabet Before Unicode... before personal computers... before software fonts ... before electronic hardware fonts ... was... the typewriter! Due to its age, the history of APL is enough to appreciate many of the modern features that we take for granted in computing. The first APL ( Iverson Notation ) was written by hand. Some of the earliest APLs on computers were on mainframe computers and accessed via teletype terminals such as the IBM Selectric typewriter . These typewriters had type balls (colloquially referred to as \"golf balls\") which could be swapped out to enable different fonts - including an APL font. It is quite interesting to see such a system in action, for example in this demonstration of APL from 1975 , you can hear the typewriter aggressively rattling off keystrokes as the result of computation is relayed back to the terminal. While all of this is now historical curiosity, one hangover might be relevant if you are working on older code bases. Older APL systems did not have lower case letters. Instead, there was the alphabet ( \u2395A ), and an underscored alphabet ( \u2395\u24b6 - although in some fonts this is rendered as a circled-A \u24b6). In recent versions of Dyalog, some accented characters have been co-opted for compatibility with older applications.","title":"Underscored alphabet"},{"location":"Quirks/#refactoring","text":"It is usually best to continue code in the style in which you find it. This can include continuing to use many of the constructs which are here presented as \"historical quirks\". However, if an important part of the code base has become very difficult to reason about and debug, it might be worth your time to refactor it using more modern constructs and practices. This is referred to as \"paying down technical debt\", as the debt is accrued when the original author wrote code which makes it difficult, and therefore takes more time and money, to maintain. After paying the technical debt, it is hoped that future maintenance is far less resource intensive - so it is always a tradeoff between spending time now to make code nicer for the future, or spending time later wondering how the thing even works. Hui, R.K. and Kromberg, M.J., 2020. APL Since 1978. Proceedings of the ACM on Programming Languages. Section 3.1","title":"Refactoring"},{"location":"Reading/","text":"Further Reading Activity If you want to continue learning, using and practising APL but don't have a particular goal in mind, here are some things you can do now. Enjoy understanding articles on the APL Wiki. See how to generate the APL Wiki logo as an svg . Try to solve problems from the APL Problem Solving Competition . Many of the past Phase I (simple) problems can be tried with instant feedback on problems.tryapl.org . There are many similar problem solving sites. Trying to solve these in APL is an excellent way to test and improve your skills. Project Euler Rosalind.info Code Golf Stack Exchange Rosetta Code LeetCode Perl Weekly Challenge Drill yourself on APL idiom knowledge with the APLcart quiz . Explore the language, don't forget the language bar and basic help , summarised here: Dyalog Documentation Centre Dyalog Online Help Dyalog Forums Stack Overflow The APL Orchard Media We strongly recommend that you spend some time on a regular basis reading, watching, listening and exploring the existing APL media. As a language with a rich history, there have been a huge number of conferences, published papers and presentations where users and implementors discuss their activities and achievements. Dyalog.TV The Array Cast Podcast The Vector Journal of the British APL Association APL Quote Quad APL Conferences Dyalog User Meetings SIGAPL Code Report videos featuring APL Rodrigo's YouTube channel Videos by the late great John Scholes, inventor of dfns","title":"Further Reading"},{"location":"Reading/#further-reading","text":"","title":"Further Reading"},{"location":"Reading/#activity","text":"If you want to continue learning, using and practising APL but don't have a particular goal in mind, here are some things you can do now. Enjoy understanding articles on the APL Wiki. See how to generate the APL Wiki logo as an svg . Try to solve problems from the APL Problem Solving Competition . Many of the past Phase I (simple) problems can be tried with instant feedback on problems.tryapl.org . There are many similar problem solving sites. Trying to solve these in APL is an excellent way to test and improve your skills. Project Euler Rosalind.info Code Golf Stack Exchange Rosetta Code LeetCode Perl Weekly Challenge Drill yourself on APL idiom knowledge with the APLcart quiz . Explore the language, don't forget the language bar and basic help , summarised here: Dyalog Documentation Centre Dyalog Online Help Dyalog Forums Stack Overflow The APL Orchard","title":"Activity"},{"location":"Reading/#media","text":"We strongly recommend that you spend some time on a regular basis reading, watching, listening and exploring the existing APL media. As a language with a rich history, there have been a huge number of conferences, published papers and presentations where users and implementors discuss their activities and achievements. Dyalog.TV The Array Cast Podcast The Vector Journal of the British APL Association APL Quote Quad APL Conferences Dyalog User Meetings SIGAPL Code Report videos featuring APL Rodrigo's YouTube channel Videos by the late great John Scholes, inventor of dfns","title":"Media"},{"location":"Selecting-from-arrays/","text":"Search, Sort and Select Selecting from arrays In an array-oriented language, perhaps it's no surprise that there are umpteen ways to select values from arrays. There are also many ways to modify or assign values within arrays. The exact terminology can vary between array languages, but here we will refer to two types of fundamental array pieces: Scalars (0-cells) are the things returned by indexing expressions Elements (or items ) are the arrays inside of scalars. For a simple scalar this is the same thing ! Remember enclosing and diclosing scalars before? . These notes summarise the different constructs available. There is also a Dyalog webinar dedicated to selecting from arrays . Square bracket indexing This is the type of indexing we have used exclusively up to now. For vectors, it is very intuitive: 'LE CHAT'[6 4 1 2 3 5 6] THE CAT For higher rank arrays, we can return rectangular sub-arrays by separating the indices into each axis by a semicolon: (2 3 4\u2374\u2395A)[1 2;1 3;1 4] \u235d The corner elements of the cuboid AD IL MP UX What happens if you omit an axis? For example, array[3;4 5;;] ? What happens if you use too many or too few semicolons? Squad (A.K.A. \"Functional\") indexing Square-bracket indexing requires you to know the exact rank of the array and have the correct number of semicolons in your indexing expression. You might also notice that it is a special or anomalous syntax . There is also an index function \u237a\u2337\u2375 which has two distinctions: It is a function with the same syntax as other functions It applies to any rank array by automatically filling in less-major cells (those cells defined by trailing axes) (1 2)(2 3)\u2337(2 3 4\u2374\u2395A) (2 3 4\u2374\u2395A)[1 2;2 3;] Take and drop We can chop off the edges of an array using take \u237a\u2191\u2375 and drop \u237a\u2193\u2375 . \u00af1 3 2\u21912 3 4\u2374\u2395A MN QR UV 1 0 \u00af2\u21932 3 4\u2374\u2395A MN QR UV Note While similar subarrays can be retrieved using indexing, take or drop, note that take and drop return arrays of the same rank as their argument. \u2262\u23741 1\u21912 3 4\u2374\u2395A 3 \u2262\u23741 1\u23372 3 4\u2374\u2395A 1 Simple indexing The selection of rectangular sub-arrays as demonstrated above using square brackets [] and squad \u2337 is also known as simple indexing . Choose indexing Square brackets have a magic trick up their sleeve. Simple indexing with square brackets uses scalars or vectors separated by semicolons. If you index using square brackets and a nested vector of numeric vectors, you can select any collection of scalars. (2 3 4\u2374\u2395A)[(1 1 1)(2 1 4)(1 3 4)] An interesting relationship appears between indices into an array and indices into its ravel when \u2395IO\u21900 : \u2395IO\u21900 (2 3 4\u2374\u2395A)[\u2193[0]2 3 4\u22a40 15 11] \u2395A\u2337\u2368\u22822 3 4\u22a5\u2191[0](0 0 0)(1 0 3)(0 2 3) Reach indexing Indexing into an array will retrieve some cell of an array. If it is a nested array, then selecting a scalar will return an enclosed array. Sometimes what you actually want is the item inside of that scalar. While it is common and perfectly valid to simply use first \u2283\u2375 to disclose the contents of a scalar, the pick function \u237a\u2283\u2375 can be used to retrieve the element directly: 3\u2337'here' 'are' 'some' 'words' \u235d With ]Boxing on \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502words\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 3\u2283'here' 'are' 'some' 'words' words Reach indexing allows you to pull items from deep within a nested array: (2 1)(2 2) \u2283 2 3\u23740 1 2 (2 3\u2374'AB' 'CD' 'EF' 'GH' 'IJ' 'KL') 4 5 IJ Select / From Some APLers find squad-index semantics awkward, and have proposed yet another mechanism, called select or from . It can be defined as: I\u2190(\u2283\u2364\u22a3\u2337\u22a2)\u23640 99 Select provides the best of both simple indexing and choose indexing, allowing you to select arbitrary collections of cells. Warning Select is a very general and convenient function, but it is potentially much slower than using the in-built indexing constructs. We provide it here for completeness and your interest. So which type of indexing do I use? Over time you will learn from experience what is the most appropriate thing to use in different situations. However, here is a rough guide: Selection type Selection construct Arbitrary scalars from a vector Square bracket simple or compress Rectangular subarrays Simple Arbitrary scalars from an array of rank \u22652 Choose Nested arrays Reach Arbitrary collections of cells Select Searching and finding Membership \u237a\u220a\u2375 will return a boolean array indicating the elements in \u237a which are present in \u2375 . Find \u237a\u2377\u2375 will give a 1 indicating the location of the first element of \u237a when the entire array \u237a is found as a subarray in \u2375 . Index of \u237a\u2373\u2375 will return the index in \u2375 where \u237a is found as a major cell. text \u2190 2 3 4\u2374'SOME APPLES' text\u220a'LESS' 'LESS'\u2377text (1\u2337text)\u2373'LESS' Total Array Ordering To sort, index by the grade : Sort\u2190{(\u2282\u234b\u2375)\u2337\u2375} Sort 'the alphabet' Grouping is an incredibly common operation when handling data. The python \"dataframe\" framework Pandas has a groupby function and anybody who has used SQL is likely to be familiar with this idea . The key operator was introduced in Dyalog version 14.0. Begin to familiarise yourself by experimenting with the following examples: 'mississippi'{\u2262\u2375}\u2338'mississippi' {\u2262\u2375}\u2338'mississippi' 'interpreter'{\u237a\u2375}\u2338'mississippi' Interval index is a function for classifying data by boundaries. At this point it is worth familiarising yourself with older APL constructs which perform similar functionality to key, and are likely to exist in code bases written before Dyalog version 14.0. You already wrote Interval Index in problem set 4 using the outer product \u2218.F . See if you can rewrite that Grade function using interval index \u237a\u2378\u2375 . Try to write the interval index function \u237a\u2378\u2375 without using the \u2378 glyph Iverson's dictionary of APL defines monadic equals =\u2375 as \"nub in\": NubIn \u2190 (\u222a\u2261\u236499 \u00af1\u2364\u00af1 99\u22a2) NubIn 'abbcab' 1 0 0 0 1 0 0 1 1 0 0 1 0 0 0 1 0 0 NubIn 3 3\u23746\u2191\u2395A 1 0 1 0 1 0 Problem set 7 Search, sort, slice and select Write two indexing expressions which apply to a scalar and return that scalar Write a function IRep which is equivalent to \u237a/\u2375 but uses indexing instead of replicate. NVec \u2190 '' '34' 'donut' \u236c is a four-element nested vector. Use a single pick \u237a\u2283\u2375 to obtain the sub-item 'o' . From the nested 3D array Nest\u21902 3 4\u2374(\u237317),(\u22822 3\u2374'ab'(2 3\u2374'dyalog'),'defg'),\u2395A[\u23736] , use a single selection to obtain: The character scalar 'y' The numeric scalar 6 Two sorting expressions are {(\u2282\u234b\u2375)\u2337\u2375} and {\u2375[\u234b\u2375]} ? When might you use one over the other? When does {(\u2378\u2228/\u237a\u2377\u2375) \u2261 \u2378\u2227/\u2375\u220a\u237a} ? The membership function \u237a\u220a\u2375 checks whether elements of \u237a appear in \u2375 . Write a function E which checks whether major cells of \u237a appear as major cells of \u2375 . text E \u2191' APP' 'LESS' 0 1 1 0 0 0 Visit to the museum Here are some data and questions about visits to a museum. The section_names are the names of each of the four sections in the museum. section_names \u2190 'Bugs' 'Art' 'Fossils' 'Sea Life' The variable sections is a nested list of text matrices. Each matrix lists the items or creatures which belong to each section. sections \u2190 \u2191\u00a8('Grasshopper' 'Giant Cicada' 'Earth-boring Dung Beetle' 'Scarab Beetle' 'Miyama Stag' 'Giant Stag' 'Brown Cicada' 'Giraffe Stag' 'Horned Dynastid' 'Walking Stick' 'Walking Leaf') ('The Blue Boy by Thomas Gainsborough' ('Rooster and Hen with Hydrangeas by It',(\u2395ucs 333),' Jakuch',(\u2395ucs 363)) 'The Great Wave off Kanagawa by Hokusai' 'Mona Lisa by Leonardo da Vinci' 'Sunflowers by Vincent van Gogh' 'Still Life with Apples and Oranges by Paul C\u00e9zanne' 'Girl with a Pearl Earring by Johannes Vermeer' ('Shak',(\u2395ucs 333),'ki dog',(\u2395ucs 363),' by Unknown') 'David by Michelangelo di Lodovico Buonarroti Simoni' 'Rosetta Stone by Unknown') ('Amber' 'Ammonite' 'Diplodocus' 'Stegosaur' 'Tyrannosaurus Rex' 'Triceratops') ('Puffer Fish' 'Blue Marlin' 'Ocean Sunfish' 'Acorn Barnacle' 'Mantis Shrimp' 'Octopus' 'Pearl Oyster' 'Scallop' 'Sea Anemone' 'Sea Slug' 'Sea Star' 'Whelk' 'Horseshoe Crab') The visits table represents 1000 visits to museum sections over a two week period. The four columns represent: The section that was visited as an index into the section_names The day of the visit in Dyalog Date Number format. The arrival time in minutes from midnight. For example, 15:30 is 930 minutes. The departure time in minutes from midnight. \u2395RL\u219042 \u22c4 days\u219043589+?1000\u237428 \u22c4 (arr l\u00efv)\u2190539+?2\u2374\u22821000\u2374510 \u22c4 section\u2190?1000\u23744 visits\u2190(\u2282\u234bdays)\u2337section,days,(\u2282\u2218\u234b\u2337\u22a2)\u23641\u2349\u2191arr l\u00efv In the boolean matrix display , each row corresponds to a museum piece and each column corresponds to a day. A 1 indicates days when a particular museum piece was out on display. The order of rows corresponds to the order of pieces in the sections table. display \u2190 40 28\u2374(9/0),1,(4/0),1,(9/0),1,(3/0),(5/1),0,(10/1),0,(5/1),0,(8/1),0,(8/1),0,(4/1),0 0 1 1 0 1 0 1 0 1 1 0 1 0,(5/1),(3/0),1 0 1 0 1 1,(4/0),1 0 1 1 0 0 1 1 0,(6/1),0 1 0 1 0 0 1 1 0 0 1 1 0 1 0 0 1 1 0,(3/1),(3/0),(4/1),0 1 1 0 1 0 0,(7/1),0 1 0 1 1 0 1 1 0 1 1 0,(3/1),0 1 1 0,(4/1),0,(3/1),0 1 0,(3/1),0 0 1 1,(5/0),1 1 0,(3/1),0 1 0 0 1 1,(3/0),(5/1),0,(9/1),0,(3/1),0 1,(3/0),(5/1),0,(3/1),0,(3/1),(3/0),1 1 0 0 1 0 1,(4/0),1 1 0 1 0 1 0 1 0,(9/1),0,(7/1),0,(3/1),0 0 1 1 0 1 1 0 0 1 0 0 1 0,(5/1),0 1,(3/0),1 1 0 1 0 0,(3/1),0,(4/1),0 0 1 1,(7/0),(3/1),(3/0),1 1,(3/0),1 1 0 1 0 1,(6/0),1 1,(4/0),1 0 1 1,(5/0),1 0 1 0 1,(6/0),(3/1),(9/0),1 1,(3/0),1 0 1 0 1 1,(13/0),1 1,(11/0),1 0 1 1,(4/0),1 0 0,(4/1),0,(12/1),0,(5/1),0 1 0 0 1 1 0,(5/1),0,(4/1),0,(4/1),0 0 1,(5/0),1 1,(3/0),(8/1),0 0 1,(3/0),1,(3/0),1,(3/0),1 0 0 1 0 1 0 1 0 1 0 1 1 0,(3/1),(4/0),(3/1),0,(3/1),0 1 1,(3/0),(4/1),0 1 1 0 1 1,(3/0),1 1 0 1 0 1 0 1,(6/0),1 1,(14/0),(8/1),(4/0),(8/1),0,(3/1),0,(4/1),(6/0),1 0 0 1 1,(3/0),1 1 0 0 1 0 1 0 0 1 0 1,(5/0),1 0 0 1 0 1 0 0 1 1,(3/0),1,(8/0),1 0 1 0,(6/1),0 0,(7/1),0 1 1 0,(3/1),0,(9/1),0,(12/1),0 1 1 0,(9/1),0,(3/1),0 0,(3/1),(3/0),(3/1),0,(3/1),(5/0),(7/1),0 1 0,(5/1),0,(3/1),0 0,(3/1),0 0 1 1 0,(4/1),0 1,(3/0),(3/1),(5/0),1 0 1 1 0 1 0,(3/1),0,(5/1),0,(3/1),0,(4/1),0 1,(4/0),1 0 1 0 0 1 1,(5/0),1,(3/0),1 0 0 1 0 1,(3/0),1 0 1 0 0 1,(4/0),1 0 0 1,(6/0),1,(14/0),1 0 0,(4/1),(3/0),(6/1),0 0 1 0,(3/1),0,(4/1),0,(3/1),0 1 0 1,(3/0),(5/1),(3/0),1 0 0 1 0,(3/1),0 1,(4/0),1 0 1 1,(11/0),1,(15/0),(3/1),(4/0),1,(15/0),(5/1),0 1 0,(8/1),0,(3/1),(4/0),(5/1),0 1,(9/0),1 0 1 1 0 0 1 0 0 1,(4/0),1 0,(4/1),0,(7/1),(3/0),1 0 0 1,(3/0),(3/1),0 1 1 How many visitors arrived before 10AM? What was the most popular section by visit duration? Estimate the opening and closing times of each of the sections. Which animal being on display corresponded with the highest increase in visit duration for its section? Word Problems We are going to do some text processing on a dictionary of words. If you have access to the internet, the following expressions will download a text file dictionary (917kB in size) and store it as a nested vector of character vectors named words . ]Load HttpCommand words \u2190 (\u2395UCS 10) {(\u237a\u2260\u2375)\u2286\u2375} (HttpCommand.Get'https://tinyurl.com/y7asendy').Data If you have the file on your computer (maybe you were given it on a USB drive, for example) then you can load it into your workspace from disk using the following expressions. (content encoding newline) \u2190 \u2395NGET'/path/to/words.txt' words \u2190 (\u2395UCS newline) (\u2260\u2286\u22a2) content Now answer the following questions about words . How many words have at least 3 'e' s in them? How many words have exactly two consecutive 'e' s in them? The first three such words are Aberdeen Abderdeen's and Aileen . What is the shortest word with two consecutive 'a' s? What words have three consecutive double letters? For example, mississippi does not but misseetto does. Misseetto is not a real word. A palindrome is the same when reversed. For example, racecar is a palindrome but racecat is not. How many palindromes are there in words ? Which palindrome in words is the longest? How many words are in alphabetical order? Rain facts The 3D array rain gives the monthly rainfall in millimeters over 7 years in 5 countries. \u2395RL\u219042 \u22c4 rain\u2190?7 5 12\u2374250 Which month in each year in each country had the highest rainfall? In the data, the countries are in order 1 to 5. Sort the countries in descending order of average monthly rainfall Sort the countries in ascending order of total yearly rainfall","title":"Search, Sort and Select"},{"location":"Selecting-from-arrays/#search-sort-and-select","text":"","title":"Search, Sort and Select"},{"location":"Selecting-from-arrays/#selecting-from-arrays","text":"In an array-oriented language, perhaps it's no surprise that there are umpteen ways to select values from arrays. There are also many ways to modify or assign values within arrays. The exact terminology can vary between array languages, but here we will refer to two types of fundamental array pieces: Scalars (0-cells) are the things returned by indexing expressions Elements (or items ) are the arrays inside of scalars. For a simple scalar this is the same thing ! Remember enclosing and diclosing scalars before? . These notes summarise the different constructs available. There is also a Dyalog webinar dedicated to selecting from arrays .","title":"Selecting from arrays"},{"location":"Selecting-from-arrays/#square-bracket-indexing","text":"This is the type of indexing we have used exclusively up to now. For vectors, it is very intuitive: 'LE CHAT'[6 4 1 2 3 5 6] THE CAT For higher rank arrays, we can return rectangular sub-arrays by separating the indices into each axis by a semicolon: (2 3 4\u2374\u2395A)[1 2;1 3;1 4] \u235d The corner elements of the cuboid AD IL MP UX What happens if you omit an axis? For example, array[3;4 5;;] ? What happens if you use too many or too few semicolons?","title":"Square bracket indexing"},{"location":"Selecting-from-arrays/#squad-aka-functional-indexing","text":"Square-bracket indexing requires you to know the exact rank of the array and have the correct number of semicolons in your indexing expression. You might also notice that it is a special or anomalous syntax . There is also an index function \u237a\u2337\u2375 which has two distinctions: It is a function with the same syntax as other functions It applies to any rank array by automatically filling in less-major cells (those cells defined by trailing axes) (1 2)(2 3)\u2337(2 3 4\u2374\u2395A) (2 3 4\u2374\u2395A)[1 2;2 3;]","title":"Squad (A.K.A. \"Functional\") indexing"},{"location":"Selecting-from-arrays/#take-and-drop","text":"We can chop off the edges of an array using take \u237a\u2191\u2375 and drop \u237a\u2193\u2375 . \u00af1 3 2\u21912 3 4\u2374\u2395A MN QR UV 1 0 \u00af2\u21932 3 4\u2374\u2395A MN QR UV Note While similar subarrays can be retrieved using indexing, take or drop, note that take and drop return arrays of the same rank as their argument. \u2262\u23741 1\u21912 3 4\u2374\u2395A 3 \u2262\u23741 1\u23372 3 4\u2374\u2395A 1","title":"Take and drop"},{"location":"Selecting-from-arrays/#simple-indexing","text":"The selection of rectangular sub-arrays as demonstrated above using square brackets [] and squad \u2337 is also known as simple indexing .","title":"Simple indexing"},{"location":"Selecting-from-arrays/#choose-indexing","text":"Square brackets have a magic trick up their sleeve. Simple indexing with square brackets uses scalars or vectors separated by semicolons. If you index using square brackets and a nested vector of numeric vectors, you can select any collection of scalars. (2 3 4\u2374\u2395A)[(1 1 1)(2 1 4)(1 3 4)] An interesting relationship appears between indices into an array and indices into its ravel when \u2395IO\u21900 : \u2395IO\u21900 (2 3 4\u2374\u2395A)[\u2193[0]2 3 4\u22a40 15 11] \u2395A\u2337\u2368\u22822 3 4\u22a5\u2191[0](0 0 0)(1 0 3)(0 2 3)","title":"Choose indexing"},{"location":"Selecting-from-arrays/#reach-indexing","text":"Indexing into an array will retrieve some cell of an array. If it is a nested array, then selecting a scalar will return an enclosed array. Sometimes what you actually want is the item inside of that scalar. While it is common and perfectly valid to simply use first \u2283\u2375 to disclose the contents of a scalar, the pick function \u237a\u2283\u2375 can be used to retrieve the element directly: 3\u2337'here' 'are' 'some' 'words' \u235d With ]Boxing on \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502words\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 3\u2283'here' 'are' 'some' 'words' words Reach indexing allows you to pull items from deep within a nested array: (2 1)(2 2) \u2283 2 3\u23740 1 2 (2 3\u2374'AB' 'CD' 'EF' 'GH' 'IJ' 'KL') 4 5 IJ","title":"Reach indexing"},{"location":"Selecting-from-arrays/#select-from","text":"Some APLers find squad-index semantics awkward, and have proposed yet another mechanism, called select or from . It can be defined as: I\u2190(\u2283\u2364\u22a3\u2337\u22a2)\u23640 99 Select provides the best of both simple indexing and choose indexing, allowing you to select arbitrary collections of cells. Warning Select is a very general and convenient function, but it is potentially much slower than using the in-built indexing constructs. We provide it here for completeness and your interest.","title":"Select / From"},{"location":"Selecting-from-arrays/#so-which-type-of-indexing-do-i-use","text":"Over time you will learn from experience what is the most appropriate thing to use in different situations. However, here is a rough guide: Selection type Selection construct Arbitrary scalars from a vector Square bracket simple or compress Rectangular subarrays Simple Arbitrary scalars from an array of rank \u22652 Choose Nested arrays Reach Arbitrary collections of cells Select","title":"So which type of indexing do I use?"},{"location":"Selecting-from-arrays/#searching-and-finding","text":"Membership \u237a\u220a\u2375 will return a boolean array indicating the elements in \u237a which are present in \u2375 . Find \u237a\u2377\u2375 will give a 1 indicating the location of the first element of \u237a when the entire array \u237a is found as a subarray in \u2375 . Index of \u237a\u2373\u2375 will return the index in \u2375 where \u237a is found as a major cell. text \u2190 2 3 4\u2374'SOME APPLES' text\u220a'LESS' 'LESS'\u2377text (1\u2337text)\u2373'LESS'","title":"Searching and finding"},{"location":"Selecting-from-arrays/#total-array-ordering","text":"To sort, index by the grade : Sort\u2190{(\u2282\u234b\u2375)\u2337\u2375} Sort 'the alphabet' Grouping is an incredibly common operation when handling data. The python \"dataframe\" framework Pandas has a groupby function and anybody who has used SQL is likely to be familiar with this idea . The key operator was introduced in Dyalog version 14.0. Begin to familiarise yourself by experimenting with the following examples: 'mississippi'{\u2262\u2375}\u2338'mississippi' {\u2262\u2375}\u2338'mississippi' 'interpreter'{\u237a\u2375}\u2338'mississippi' Interval index is a function for classifying data by boundaries. At this point it is worth familiarising yourself with older APL constructs which perform similar functionality to key, and are likely to exist in code bases written before Dyalog version 14.0. You already wrote Interval Index in problem set 4 using the outer product \u2218.F . See if you can rewrite that Grade function using interval index \u237a\u2378\u2375 . Try to write the interval index function \u237a\u2378\u2375 without using the \u2378 glyph Iverson's dictionary of APL defines monadic equals =\u2375 as \"nub in\": NubIn \u2190 (\u222a\u2261\u236499 \u00af1\u2364\u00af1 99\u22a2) NubIn 'abbcab' 1 0 0 0 1 0 0 1 1 0 0 1 0 0 0 1 0 0 NubIn 3 3\u23746\u2191\u2395A 1 0 1 0 1 0","title":"Total Array Ordering"},{"location":"Selecting-from-arrays/#problem-set-7","text":"","title":"Problem set 7"},{"location":"Selecting-from-arrays/#search-sort-slice-and-select","text":"Write two indexing expressions which apply to a scalar and return that scalar Write a function IRep which is equivalent to \u237a/\u2375 but uses indexing instead of replicate. NVec \u2190 '' '34' 'donut' \u236c is a four-element nested vector. Use a single pick \u237a\u2283\u2375 to obtain the sub-item 'o' . From the nested 3D array Nest\u21902 3 4\u2374(\u237317),(\u22822 3\u2374'ab'(2 3\u2374'dyalog'),'defg'),\u2395A[\u23736] , use a single selection to obtain: The character scalar 'y' The numeric scalar 6 Two sorting expressions are {(\u2282\u234b\u2375)\u2337\u2375} and {\u2375[\u234b\u2375]} ? When might you use one over the other? When does {(\u2378\u2228/\u237a\u2377\u2375) \u2261 \u2378\u2227/\u2375\u220a\u237a} ? The membership function \u237a\u220a\u2375 checks whether elements of \u237a appear in \u2375 . Write a function E which checks whether major cells of \u237a appear as major cells of \u2375 . text E \u2191' APP' 'LESS' 0 1 1 0 0 0","title":"Search, sort, slice and select"},{"location":"Selecting-from-arrays/#visit-to-the-museum","text":"Here are some data and questions about visits to a museum. The section_names are the names of each of the four sections in the museum. section_names \u2190 'Bugs' 'Art' 'Fossils' 'Sea Life' The variable sections is a nested list of text matrices. Each matrix lists the items or creatures which belong to each section. sections \u2190 \u2191\u00a8('Grasshopper' 'Giant Cicada' 'Earth-boring Dung Beetle' 'Scarab Beetle' 'Miyama Stag' 'Giant Stag' 'Brown Cicada' 'Giraffe Stag' 'Horned Dynastid' 'Walking Stick' 'Walking Leaf') ('The Blue Boy by Thomas Gainsborough' ('Rooster and Hen with Hydrangeas by It',(\u2395ucs 333),' Jakuch',(\u2395ucs 363)) 'The Great Wave off Kanagawa by Hokusai' 'Mona Lisa by Leonardo da Vinci' 'Sunflowers by Vincent van Gogh' 'Still Life with Apples and Oranges by Paul C\u00e9zanne' 'Girl with a Pearl Earring by Johannes Vermeer' ('Shak',(\u2395ucs 333),'ki dog',(\u2395ucs 363),' by Unknown') 'David by Michelangelo di Lodovico Buonarroti Simoni' 'Rosetta Stone by Unknown') ('Amber' 'Ammonite' 'Diplodocus' 'Stegosaur' 'Tyrannosaurus Rex' 'Triceratops') ('Puffer Fish' 'Blue Marlin' 'Ocean Sunfish' 'Acorn Barnacle' 'Mantis Shrimp' 'Octopus' 'Pearl Oyster' 'Scallop' 'Sea Anemone' 'Sea Slug' 'Sea Star' 'Whelk' 'Horseshoe Crab') The visits table represents 1000 visits to museum sections over a two week period. The four columns represent: The section that was visited as an index into the section_names The day of the visit in Dyalog Date Number format. The arrival time in minutes from midnight. For example, 15:30 is 930 minutes. The departure time in minutes from midnight. \u2395RL\u219042 \u22c4 days\u219043589+?1000\u237428 \u22c4 (arr l\u00efv)\u2190539+?2\u2374\u22821000\u2374510 \u22c4 section\u2190?1000\u23744 visits\u2190(\u2282\u234bdays)\u2337section,days,(\u2282\u2218\u234b\u2337\u22a2)\u23641\u2349\u2191arr l\u00efv In the boolean matrix display , each row corresponds to a museum piece and each column corresponds to a day. A 1 indicates days when a particular museum piece was out on display. The order of rows corresponds to the order of pieces in the sections table. display \u2190 40 28\u2374(9/0),1,(4/0),1,(9/0),1,(3/0),(5/1),0,(10/1),0,(5/1),0,(8/1),0,(8/1),0,(4/1),0 0 1 1 0 1 0 1 0 1 1 0 1 0,(5/1),(3/0),1 0 1 0 1 1,(4/0),1 0 1 1 0 0 1 1 0,(6/1),0 1 0 1 0 0 1 1 0 0 1 1 0 1 0 0 1 1 0,(3/1),(3/0),(4/1),0 1 1 0 1 0 0,(7/1),0 1 0 1 1 0 1 1 0 1 1 0,(3/1),0 1 1 0,(4/1),0,(3/1),0 1 0,(3/1),0 0 1 1,(5/0),1 1 0,(3/1),0 1 0 0 1 1,(3/0),(5/1),0,(9/1),0,(3/1),0 1,(3/0),(5/1),0,(3/1),0,(3/1),(3/0),1 1 0 0 1 0 1,(4/0),1 1 0 1 0 1 0 1 0,(9/1),0,(7/1),0,(3/1),0 0 1 1 0 1 1 0 0 1 0 0 1 0,(5/1),0 1,(3/0),1 1 0 1 0 0,(3/1),0,(4/1),0 0 1 1,(7/0),(3/1),(3/0),1 1,(3/0),1 1 0 1 0 1,(6/0),1 1,(4/0),1 0 1 1,(5/0),1 0 1 0 1,(6/0),(3/1),(9/0),1 1,(3/0),1 0 1 0 1 1,(13/0),1 1,(11/0),1 0 1 1,(4/0),1 0 0,(4/1),0,(12/1),0,(5/1),0 1 0 0 1 1 0,(5/1),0,(4/1),0,(4/1),0 0 1,(5/0),1 1,(3/0),(8/1),0 0 1,(3/0),1,(3/0),1,(3/0),1 0 0 1 0 1 0 1 0 1 0 1 1 0,(3/1),(4/0),(3/1),0,(3/1),0 1 1,(3/0),(4/1),0 1 1 0 1 1,(3/0),1 1 0 1 0 1 0 1,(6/0),1 1,(14/0),(8/1),(4/0),(8/1),0,(3/1),0,(4/1),(6/0),1 0 0 1 1,(3/0),1 1 0 0 1 0 1 0 0 1 0 1,(5/0),1 0 0 1 0 1 0 0 1 1,(3/0),1,(8/0),1 0 1 0,(6/1),0 0,(7/1),0 1 1 0,(3/1),0,(9/1),0,(12/1),0 1 1 0,(9/1),0,(3/1),0 0,(3/1),(3/0),(3/1),0,(3/1),(5/0),(7/1),0 1 0,(5/1),0,(3/1),0 0,(3/1),0 0 1 1 0,(4/1),0 1,(3/0),(3/1),(5/0),1 0 1 1 0 1 0,(3/1),0,(5/1),0,(3/1),0,(4/1),0 1,(4/0),1 0 1 0 0 1 1,(5/0),1,(3/0),1 0 0 1 0 1,(3/0),1 0 1 0 0 1,(4/0),1 0 0 1,(6/0),1,(14/0),1 0 0,(4/1),(3/0),(6/1),0 0 1 0,(3/1),0,(4/1),0,(3/1),0 1 0 1,(3/0),(5/1),(3/0),1 0 0 1 0,(3/1),0 1,(4/0),1 0 1 1,(11/0),1,(15/0),(3/1),(4/0),1,(15/0),(5/1),0 1 0,(8/1),0,(3/1),(4/0),(5/1),0 1,(9/0),1 0 1 1 0 0 1 0 0 1,(4/0),1 0,(4/1),0,(7/1),(3/0),1 0 0 1,(3/0),(3/1),0 1 1 How many visitors arrived before 10AM? What was the most popular section by visit duration? Estimate the opening and closing times of each of the sections. Which animal being on display corresponded with the highest increase in visit duration for its section?","title":"Visit to the museum"},{"location":"Selecting-from-arrays/#word-problems","text":"We are going to do some text processing on a dictionary of words. If you have access to the internet, the following expressions will download a text file dictionary (917kB in size) and store it as a nested vector of character vectors named words . ]Load HttpCommand words \u2190 (\u2395UCS 10) {(\u237a\u2260\u2375)\u2286\u2375} (HttpCommand.Get'https://tinyurl.com/y7asendy').Data If you have the file on your computer (maybe you were given it on a USB drive, for example) then you can load it into your workspace from disk using the following expressions. (content encoding newline) \u2190 \u2395NGET'/path/to/words.txt' words \u2190 (\u2395UCS newline) (\u2260\u2286\u22a2) content Now answer the following questions about words . How many words have at least 3 'e' s in them? How many words have exactly two consecutive 'e' s in them? The first three such words are Aberdeen Abderdeen's and Aileen . What is the shortest word with two consecutive 'a' s? What words have three consecutive double letters? For example, mississippi does not but misseetto does. Misseetto is not a real word. A palindrome is the same when reversed. For example, racecar is a palindrome but racecat is not. How many palindromes are there in words ? Which palindrome in words is the longest? How many words are in alphabetical order?","title":"Word Problems"},{"location":"Selecting-from-arrays/#rain-facts","text":"The 3D array rain gives the monthly rainfall in millimeters over 7 years in 5 countries. \u2395RL\u219042 \u22c4 rain\u2190?7 5 12\u2374250 Which month in each year in each country had the highest rainfall? In the data, the countries are in order 1 to 5. Sort the countries in descending order of average monthly rainfall Sort the countries in ascending order of total yearly rainfall","title":"Rain facts"},{"location":"Selecting-from-lists/","text":"Selecting from lists Indexing In many other programming languages, \"selection\" is used to describe control structures such as \"if then else\" or \"switch case\" . In APL, we can get a similar effect by literally \"selecting\" elements from arrays. 'APPLE'[1 3 4] \u235d Select elements 1, 3 and 4 APL \u2378 1 0 0 1 0 1 \u235d Where are the 1s? 1 4 6 (\u23735) IsDivisibleBy 2 \u235d 1 Where \u237a is even 0 1 0 1 0 {\u2375[\u2378\u2375 IsDivisibleBy 123]}\u2395AVU \u235d Numbers in \u2395AVU divisible by 123 0 123 8364 246 Replicate/Compress Finding the indices of a boolean array using the where function \u2378\u2375 is an unnecessary extra step since we know that indices will never be repeated in this case. The replicate function \u237a/\u2375 (yes, some symbols have multiple meanings ) repeats elements of an array along rows. 1 2 3/'ABC' ABBCCC 1 2 3/2 3\u2374'DYALOG' DYYAAA LOOGGG 1 \u00af2 3/2 3\u2374'DYALOG' D AAA L GGG When used with a boolean array, the function is called compress . 0 1 0/2 3\u2374'DYALOG' Y O Shape/Reshape In the previous section you wrote the Tally function. There are two related primitive functions \u2262\u2375 and \u2374\u2375 . The examples above show the creation of arrays using reshape \u237a\u2374\u2375 . Take a moment to experiment with the shape \u2374 , tally \u2262 and reshape \u2374 functions to get a feel for how they behave. What is the shape of the shape of an array? What is the shape of the tally? Note You might find that some arguments to reshape produce intolerably long output. Use the command ]rows -fold=3 to truncate the output. Problem Set 3 Simple Simon Says Select These Elements Write a function to get even numbers from a numeric list. Even \u237310 2 4 6 8 10 Even 1 17 19 22 32 15 22 32 Write a function to get numbers which are divisible by 5 from a numeric list. Div5 \u237350 5 10 15 20 25 30 35 40 45 50 Div5 12 13 15 20 19 55 16 15 20 55 Write a function to get numbers which are divisible by \u237a from a numeric list. 3 Div \u237330 3 6 9 12 15 18 21 24 27 30 7 Div 11 17 21 42 18 7 0 70 21 42 7 0 70 Without without Write a dfn which doesn't use ~ to remove spaces from a text vector. NoSpace'here is some text' hereissometext NoSpace'there are more spaces here' therearemorespaceshere Where without Where Write a dfn which doesn't use \u2378 to find the indices of 1 s in a boolean vector. Where 0 1 0 1 0 0 1 2 4 7 sdrawkcab s'taht woN Write a dfn without using \u233d which reverses its right argument. Reverse 'Some characters' sretcarahc emoS Reverse \u237310 10 9 8 7 6 5 4 3 2 1","title":"Selecting from Lists"},{"location":"Selecting-from-lists/#selecting-from-lists","text":"","title":"Selecting from lists"},{"location":"Selecting-from-lists/#indexing","text":"In many other programming languages, \"selection\" is used to describe control structures such as \"if then else\" or \"switch case\" . In APL, we can get a similar effect by literally \"selecting\" elements from arrays. 'APPLE'[1 3 4] \u235d Select elements 1, 3 and 4 APL \u2378 1 0 0 1 0 1 \u235d Where are the 1s? 1 4 6 (\u23735) IsDivisibleBy 2 \u235d 1 Where \u237a is even 0 1 0 1 0 {\u2375[\u2378\u2375 IsDivisibleBy 123]}\u2395AVU \u235d Numbers in \u2395AVU divisible by 123 0 123 8364 246","title":"Indexing"},{"location":"Selecting-from-lists/#replicatecompress","text":"Finding the indices of a boolean array using the where function \u2378\u2375 is an unnecessary extra step since we know that indices will never be repeated in this case. The replicate function \u237a/\u2375 (yes, some symbols have multiple meanings ) repeats elements of an array along rows. 1 2 3/'ABC' ABBCCC 1 2 3/2 3\u2374'DYALOG' DYYAAA LOOGGG 1 \u00af2 3/2 3\u2374'DYALOG' D AAA L GGG When used with a boolean array, the function is called compress . 0 1 0/2 3\u2374'DYALOG' Y O","title":"Replicate/Compress"},{"location":"Selecting-from-lists/#shapereshape","text":"In the previous section you wrote the Tally function. There are two related primitive functions \u2262\u2375 and \u2374\u2375 . The examples above show the creation of arrays using reshape \u237a\u2374\u2375 . Take a moment to experiment with the shape \u2374 , tally \u2262 and reshape \u2374 functions to get a feel for how they behave. What is the shape of the shape of an array? What is the shape of the tally? Note You might find that some arguments to reshape produce intolerably long output. Use the command ]rows -fold=3 to truncate the output.","title":"Shape/Reshape"},{"location":"Selecting-from-lists/#problem-set-3","text":"Simple Simon Says Select These Elements Write a function to get even numbers from a numeric list. Even \u237310 2 4 6 8 10 Even 1 17 19 22 32 15 22 32 Write a function to get numbers which are divisible by 5 from a numeric list. Div5 \u237350 5 10 15 20 25 30 35 40 45 50 Div5 12 13 15 20 19 55 16 15 20 55 Write a function to get numbers which are divisible by \u237a from a numeric list. 3 Div \u237330 3 6 9 12 15 18 21 24 27 30 7 Div 11 17 21 42 18 7 0 70 21 42 7 0 70 Without without Write a dfn which doesn't use ~ to remove spaces from a text vector. NoSpace'here is some text' hereissometext NoSpace'there are more spaces here' therearemorespaceshere Where without Where Write a dfn which doesn't use \u2378 to find the indices of 1 s in a boolean vector. Where 0 1 0 1 0 0 1 2 4 7 sdrawkcab s'taht woN Write a dfn without using \u233d which reverses its right argument. Reverse 'Some characters' sretcarahc emoS Reverse \u237310 10 9 8 7 6 5 4 3 2 1","title":"Problem Set 3"},{"location":"Shape-Reshape/","text":"Shape Reshape Array basics Experiment with the expressions in the following block to gain an understanding of the functions used. Write a brief definition in English for each expression. For example: {2\u00d7\u2373\u2375} \u235d Even integers from 2 to 2\u00d7\u2375 inclusive . Use the language bar to discover the names of unfamiliar functions. 3 4\u2374\u237312 \u235d A 3 row, 4 column matrix of the integers from 1 to 12 inclusive \u2374cards\u2190'A23456789TJQK'\u2218.,'SCHD' \u2349cards (,cards)[?\u00d7/\u2374cards] alph\u21902 3 4\u2374\u2395A ,alph The shape of a scalar Use the match function \u237a\u2261\u2375 to determine which expressions below produce the empty character vector '' (\" quote-quote \") and which produce the empty numeric vector \u236c (\" zilde \"). 0\u23740 0\u2191\u2395A \u23730 0\u2374'' 0\u2374'def' 0 0\u2374'abc' 2 0 3\u2374\u23736 alph[\u2378alph='Z'] \u2308\u233f\u236c\u236c \u2395JSON'{}' \u2395JSON'[]' \u2395JSON'\"\"' A simple array contains only single numbers and/or characters as elements. Single numbers or characters are called scalars . Arrays generally can contain any other array. These are called nested arrays . For example cards is a nested matrix of character vectors. \u2374\u00a81 2 3 4 \u235d What is the shape of each number in \u23734? \u2374\u00a8'ABCDE' \u235d What is the shape of each letter in 5\u2191\u2395A? \u2374\u00a8cards \u235d What is the shape of each array in cards? Problem set 5 Write a function IsEmpty to determine if an array has an empty axis. IsEmpty 2 0 3\u2374\u23734 1 IsEmpty 2 2 3\u2374\u23734 0 IsEmpty 0 0 IsEmpty 0\u23740 1 Any simple array can be described using two vectors. Which two primitive functions (that is, functions represented by symbols) return these vectors when given a simple array argument? The rank of an array is the number of axes or dimensions an array has. If the shape of an array \u2375 is given by the vector result of the shape function \u2374\u2375 , give an expression for the rank of an array. Some Points in Space The positions of 5 points in 3D space are given by the matrix pos : pos\u21905 3\u23740 1 3 4 2 Write a function AddRows to add a vector to a matrix. 1 \u00af3 4 AddRows pos 1 \u00af2 7 5 \u00af1 4 2 0 8 3 \u00af3 5 4 1 6 Write a function NormRows to normalise each vector in pos so that the sum of squares of each vector is 1 . +/pos*2 10 20 26 5 29 +/(NormRows pos)\\*2 1 1 1 1 1 \u00f7/2-/pos 0.5 1 2 \u00af2 \u00af0.5 \u00f7/2-/NormRows pos \u235d Relative proportions stay the same 0.5 1 2 \u00af2 \u00af0.5 Hint The replicate / and reshape \u2374 functions might be useful. Bonus Write commutative versions of AddRows which will still work when the vector and matrix arguments are swapped. Without executing them, determine the shape of the results of the following expressions: 1 3 5\u2218.!2 4 6 8 1 2 3 + 4 5 6 {(+\u233f\u2375)\u00f7\u2262\u2375}3 1 4 1 5 +\u233f2 3\u2374\u23736 ?\u233f2 3\u23743/4 52 \u2308/(2 3\u2374\u23736)\u2218.\u00d7\u00af1+?5 4\u23740 Hint Of course, you can always check your answers using the shape function \u2374","title":"Shape Reshape"},{"location":"Shape-Reshape/#shape-reshape","text":"","title":"Shape Reshape"},{"location":"Shape-Reshape/#array-basics","text":"Experiment with the expressions in the following block to gain an understanding of the functions used. Write a brief definition in English for each expression. For example: {2\u00d7\u2373\u2375} \u235d Even integers from 2 to 2\u00d7\u2375 inclusive . Use the language bar to discover the names of unfamiliar functions. 3 4\u2374\u237312 \u235d A 3 row, 4 column matrix of the integers from 1 to 12 inclusive \u2374cards\u2190'A23456789TJQK'\u2218.,'SCHD' \u2349cards (,cards)[?\u00d7/\u2374cards] alph\u21902 3 4\u2374\u2395A ,alph","title":"Array basics"},{"location":"Shape-Reshape/#the-shape-of-a-scalar","text":"Use the match function \u237a\u2261\u2375 to determine which expressions below produce the empty character vector '' (\" quote-quote \") and which produce the empty numeric vector \u236c (\" zilde \"). 0\u23740 0\u2191\u2395A \u23730 0\u2374'' 0\u2374'def' 0 0\u2374'abc' 2 0 3\u2374\u23736 alph[\u2378alph='Z'] \u2308\u233f\u236c\u236c \u2395JSON'{}' \u2395JSON'[]' \u2395JSON'\"\"' A simple array contains only single numbers and/or characters as elements. Single numbers or characters are called scalars . Arrays generally can contain any other array. These are called nested arrays . For example cards is a nested matrix of character vectors. \u2374\u00a81 2 3 4 \u235d What is the shape of each number in \u23734? \u2374\u00a8'ABCDE' \u235d What is the shape of each letter in 5\u2191\u2395A? \u2374\u00a8cards \u235d What is the shape of each array in cards?","title":"The shape of a scalar"},{"location":"Shape-Reshape/#problem-set-5","text":"Write a function IsEmpty to determine if an array has an empty axis. IsEmpty 2 0 3\u2374\u23734 1 IsEmpty 2 2 3\u2374\u23734 0 IsEmpty 0 0 IsEmpty 0\u23740 1 Any simple array can be described using two vectors. Which two primitive functions (that is, functions represented by symbols) return these vectors when given a simple array argument? The rank of an array is the number of axes or dimensions an array has. If the shape of an array \u2375 is given by the vector result of the shape function \u2374\u2375 , give an expression for the rank of an array. Some Points in Space The positions of 5 points in 3D space are given by the matrix pos : pos\u21905 3\u23740 1 3 4 2 Write a function AddRows to add a vector to a matrix. 1 \u00af3 4 AddRows pos 1 \u00af2 7 5 \u00af1 4 2 0 8 3 \u00af3 5 4 1 6 Write a function NormRows to normalise each vector in pos so that the sum of squares of each vector is 1 . +/pos*2 10 20 26 5 29 +/(NormRows pos)\\*2 1 1 1 1 1 \u00f7/2-/pos 0.5 1 2 \u00af2 \u00af0.5 \u00f7/2-/NormRows pos \u235d Relative proportions stay the same 0.5 1 2 \u00af2 \u00af0.5 Hint The replicate / and reshape \u2374 functions might be useful. Bonus Write commutative versions of AddRows which will still work when the vector and matrix arguments are swapped. Without executing them, determine the shape of the results of the following expressions: 1 3 5\u2218.!2 4 6 8 1 2 3 + 4 5 6 {(+\u233f\u2375)\u00f7\u2262\u2375}3 1 4 1 5 +\u233f2 3\u2374\u23736 ?\u233f2 3\u23743/4 52 \u2308/(2 3\u2374\u23736)\u2218.\u00d7\u00af1+?5 4\u23740 Hint Of course, you can always check your answers using the shape function \u2374","title":"Problem set 5"},{"location":"Ufns/","text":"User defined functions This is a fairly brief introduction, and there are exercises at the end of this section to help solidify your understanding, but there is also a more extensive treatment of user-defined functions in the book Mastering Dyalog APL . The Three Function Styles So far, we have been reading and writing dfns . 3 {\u237a+\u2375} 5 \u235d Left argument \u237a, right argument \u2375 {\u2375>0:\u2375,\u2207 \u2375-1 \u22c4 \u2375}5 \u235d Guard is : (colon). The function itself is \u2207 (del) Fn \u2190 {\u237a\u2375} \u235d We can give functions names It is also possible to name functions which do not explicitly refer to their arguments. This is called tacit or point-free programming. Plus \u2190 + IndicesTo \u2190 \u2373 _Reduce \u2190 / Sum \u2190 Plus _Reduce Sum IndicesTo 10 There is a syntax for composing functions called trains . A two-train is an atop : 3(|-)5 2 |3-5 2 A three-train is a fork : 3(-\u00d7+)5 \u00af16 (3-5)\u00d7(3+5) \u00af16 Any further functions simply alternate between atop (even number of functions) and fork (odd number of functions). 3(|-\u00d7+)5 \u235d Absolute value of the product of sum and difference 16 3(\u2308|-\u00d7+)5 \u235d Max residue with the product of sum and difference 4 They allow some rather neat and memorable ways to write short functions. Mean \u2190 +\u233f \u00f7 \u2262 \u235d The sum divided by the count Mean 3 1 4 1 3 (+,-) 5 \u235d Plus and minus ','(\u2260\u2286\u22a2)'some,text' \u235d Split on commas Note Small unnamed dfns and tacit functions expand your vocabulary. One of my favourites is the \"split by delimiter\" train (\u2260\u2286\u22a2) . It looks like a beat-up face kaomoji . A similar phrase which can take multiple delimiters can be found on aplcart.info . Traditional functions Dyalog is a modern APL implementation. Since early APL implementations there has been a way of defining functions with a header line and named arguments and results. Since the introduction of dfns, functions of the original style are called traditional functions or tradfns . Mean \u2190 +\u233f\u00f7\u2262 \u235d A 3-train (fork) for the arithmetic mean Mean \u2190 {(+\u233f\u2375)\u00f7\u2262\u2375} \u235d A dfn for the arithmetic mean \u2207 m \u2190 Mean a \u235d A tradfn for the arithmetic mean m \u2190 (+\u233fa) \u00f7 \u2262a \u2207 Note Copy and paste everything between (and including) the two \u2207 del symbols into the session, and press Enter , to define a tradfn in your workspace. Using Shift+Enter with the cursor on a name will bring up an editor window for that named thing. A tradfn header reflects the calling syntax of the function. \u2207 {result}\u2190{optional}Tradfn argument;local1 [1] ;local2 \u235d Locals can be declared across multiple lines in the header [2] :If 0=\u2395NC'optional' [3] optional\u2190'no left argument' [4] :EndIf [5] local1\u2190'\u237a: ',optional [6] local2\u2190'\u2375: ',argument [7] global\u2190\u236a'TradFn last called with'local1 local2 [8] result\u2190\u236alocal1 local2 \u2207 Note The \u2207 del representation of the TradFn function above is the vector representation result of \u2395VR'TradFn' which can be directly input into the session. Try calling TradFn with one and two arguments. How can the result be made to display to the session? Inspect the variable global after calling TradFn with different arguments. Step through the function using Ctrl+Enter . Inspect \u2395NC'optional' when TradFn is called with one argument and when it is called with two arguments. Here is the smallest tradfn: \u2207 T \u2207 T is a function which takes no arguments, returns no results and has no effects. Results in {} curly braces are called shy results and do not print to the session by default, but can be passed to arguments. To ease debugging and write functions with predictable behaviour, it is generally best not to use shy results. Optional left arguments are a little awkward in tradfns. The dfn equivalent is a little nicer looking: {\u237a\u2190'default' \u22c4 \u237a,\u2375} . Name scope, locals and globals The scope of a name describes the circumstances under which it is visible to code. For most intents and purposes, you just need to know about the difference between how local and global names are defined in the syntax, and how name shadowing works. By default, names assigned in tradfns are global. This is mostly for historical reasons. Names declared in the header - the arguments, results, and names preceded by semicolons - are localised. By default, names in a dfn are local to that dfn. This is the preferred default in most modern programming languages. If we define a name in the current namespace, that name is visible only within that namespace unless referred to by its full namespace path (e.g. #.nsref.var ). 'ns1'\u2395ns\u236c \u22c4 ns1.var\u21901 2 3 'ns2'\u2395ns\u236c \u22c4 \u2395cs ns2 \u2395\u2190var \u2395\u2190#.ns1.var Let us now define a dfn and a tradfn: \u2207 Dfn\u2190{ [1] var\u2190'lexical'\u2375 [2] } \u2207 \u2207 Tradfn arg [1] var\u2190'dynamic'arg \u2207 Note While the \u2207 del representation of dfns can be used to define dfns in the session, dfns in scripted namespaces must be defined without \u2207 dels. If we call each of these functions, Tradfn will modify var in the workspace, but Dfn will not: Dfn var var 1 2 3 Tradfn var var \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502dynamic\u25021 2 3\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 Experiment with these altered definitions: \u2207 Dfn\u2190{ [1] var\u2218\u2190'lexical'\u2375 [2] } \u2207 \u2207 Tradfn arg;var [1] var\u2190'dynamic'arg \u2207 In Tradfns, references to local names within a function are said to \" shadow \" the same names from outer scopes. Notice how the following definition of Tradfn fails. \u2207 Tradfn arg;var [1] var,\u2190'dynamic'arg \u2207 A similar dfn succeeds because, in dfns, modification will search namespaces in the local scope and then any parent scopes. \u2207 Dfn\u2190{ [1] var,\u2190'lexical'\u2375 [2] } \u2207 For completeness, here we will also mention \u2395SHADOW . It is used when names are dynamically created using \u234e , \u2395FX or \u2395FIX but need to be localised. However, it is best to use the function syntax to establish name scope in general. Further information can be found in the specialists section on shadowed names in Mastering Dyalog APL. The technical distinction between dfns and tradfns is that tradfns have dynamic scope whereas dfns have lexical scope . For further explanation of how this affects the use of dfns, see section 5.5.3 of Mastering Dyalog APL . For another excellent introduction to lexical scoping, I can recommend the page on lexical scoping in the BQN documentation (BQN is another language inspired by APL). Avoid globals When possible, avoid using global variables. Pass parameters to functions as arguments unless this becomes very awkward. The use of global variables should be limited to state settings that affect the entire application, or tables containing databases that are shared globally. If you need global constants, it is a good idea to create them in a function in order to be able to use source code management / change tracking software. A function which uses globals is difficult, if not impossible, to run in parallel. If two copies of the function run in parallel and they update the global data, some kind of locking is required. Locking often defeats the potential benefits of parallel execution. Names should be localized unless they really really, really, really need to be global. An example of when to use globals is a switch which affects the entire application: \u2207 err\u2190Log msg [1] :If verbose [2] \u2395\u2190msg \u235d Display information to the user [3] :EndIf [4] PrintFile msg \u2207 Nested functions It is possible to define functions inside some other functions. Tacit functions can only include other user-defined functions by name Sort \u2190 {(\u2282\u234b\u2375)\u2337\u2375} CSI \u2190 Sort\u2365\u2395C \u235d Case-insensitive sort Dfns can contain tacit definitions and dfn definitions, as well as any named user-defined functions SortedMeans \u2190 { Sort \u2190 {(\u2282\u234b\u2375)\u2337\u2375} Mean \u2190 +\u233f\u00f71\u2308\u2262 Sort Mean\u00a8\u2375 } Tradfns can contain tacit definitions, dfn definitions and any named user-defined functions \u2207 result\u2190SortedMeans vectors;Mean;Sort [1] Sort\u2190{(\u2282\u234b\u2375)\u2337\u2375} [2] Mean\u2190+\u233f\u00f71\u2308\u2262 [3] result\u2190Sort Mean\u00a8vectors \u2207 Which style to use? While usage of different function styles varies throughout many applications, you might take inspiration from Ad\u00e1m's APL Style Guide , when writing brand new production code. When maintaining others' code, it is best to try to continue in the already established style. Dfns For medium sized functions and utilities. Nested dfns are fine, but never use multi-line dfns inline. MultiDfn\u2190{ \u235d A Dfn with nested in-line multi-line dfns (3{ \u235d These are confusing to read and trace through \u237a+2\u00d7\u2375 }\u237a){ x\u2190\u237a-4+\u2375 x-2\u00d7\u237a }3+\u2375 } Instead, give them names and then apply them. Named dfns should be multi-line so that they can be traced through, unless truly trivial. MultiDfn2\u2190{ \u235d The previous function rewritten more clearly y\u21903+2\u00d7\u237a x\u2190y-1+\u2375 x-2\u00d7y } Do not use a dfn instead of naming a variable. For example, instead of r\u2190{\u2375/\u236810\u2264\u2375}a,b write candidates\u2190a,b r\u2190candidates/\u236810\u2264candidates Tacit functions Best as short, pure functions , performing some specific task such as data transformation. Trains and functions derived from functions and operators (e.g. +/ ) can be used inline if they are not too complex. Tradfns Best used as program control and for dealing with system interactions. The use of control structures can make procedural tasks easier to debug. For example, if an error occurs during a loop or iteration. \u00af5{i\u2190\u237a+\u2373\u2375 \u22c4 i\u00f7i-2}10 \u235d A single line function cannot be traced through Note Use Ctrl+Enter to step through a multiline function. You can then use Shift+Enter to edit the function during execution and Esc to save your changes to the function and continue execution. \u2207 r\u2190a MultiLineError o;i [1] :For i :In a+\u2373o [2] r\u2190i+3 [3] r\u00f7r-2 [4] :EndFor \u2207 Problem set 10 Which style again? Which of the following function styles can have multiple lines? TradFns Dfns Tacit functions Which of the following function styles can be anonymous (unnamed)? Tradfns Dfns Tacit Think about which function style would be most appropriate in the following situations. Launching an application Applying a mathematical formula to an array of values A utility function to sort an array Reading and writing files Expressing the sum of two functions (f+g)(x) Downloading data from the internet GUI programming Checking if a function is a no-op for a particular array Defining a piecewise mathematical function Choo choo Translating functions Convert the following dfns into trains {\u2308/\u2262\u00a8\u2375} {1+\u237a-\u2375} {\u2228/\u237a\u220a\u2375} {(\u233d\u2375)\u2261\u2375} Convert the following trains into dfns (\u2308/-\u230a/) (+\u233f\u00f71\u2308\u2262) (\u22a2-|) (1\u2227\u22a2,\u00f7) Marking Tests Way back in problem set 4 you wrote a dfn to convert test scores into letter values. You were led to produce some function or expression similar to the following: Grade\u2190{'FDCBA'[+/\u2375\u2218.>80 70 60 50 0]} Grade 95 65 92 77 This is an array-oriented solution to this problem. However, if a human was manually grading test scores, they might take one scored paper at a time and decide on which letter grade to write by reading each score. Procedural pseudocode : scores = 93,85,45,10,70,16,93,63,41,7,95,45,76 For each score in scores: If score is greater than 80: Write \"A\" Else If score is greater than 70: Write \"B\" Else If score is greater than 60: Write \"C\" Else If score is greater than 50: Write \"D\" Else Write \"F\" Control Structures in Dyalog are keywords beginning with a : colon. :If :OrIf :AndIf :ElseIf :Else :EndIf :For :In :EndFor :While :EndWhile :Repeat :Until :Return Translate the pseudocode above into a tradfn called Grade2 using control stuctures. Rewrite the Grade function again as either a dfn or a tradfn called Grade3 which uses \u237a\u2378\u2375 interval index. Use the ]runtime user command to compare the computation time for each of the three grading functions. ]runtime -c \"Grade 10\u00d7\u237310\" \"Grade2 10\u00d7\u237310\" \"Grade3 10\u00d7\u237310\"","title":"User-defined Functions"},{"location":"Ufns/#user-defined-functions","text":"This is a fairly brief introduction, and there are exercises at the end of this section to help solidify your understanding, but there is also a more extensive treatment of user-defined functions in the book Mastering Dyalog APL .","title":"User defined functions"},{"location":"Ufns/#the-three-function-styles","text":"So far, we have been reading and writing dfns . 3 {\u237a+\u2375} 5 \u235d Left argument \u237a, right argument \u2375 {\u2375>0:\u2375,\u2207 \u2375-1 \u22c4 \u2375}5 \u235d Guard is : (colon). The function itself is \u2207 (del) Fn \u2190 {\u237a\u2375} \u235d We can give functions names It is also possible to name functions which do not explicitly refer to their arguments. This is called tacit or point-free programming. Plus \u2190 + IndicesTo \u2190 \u2373 _Reduce \u2190 / Sum \u2190 Plus _Reduce Sum IndicesTo 10 There is a syntax for composing functions called trains . A two-train is an atop : 3(|-)5 2 |3-5 2 A three-train is a fork : 3(-\u00d7+)5 \u00af16 (3-5)\u00d7(3+5) \u00af16 Any further functions simply alternate between atop (even number of functions) and fork (odd number of functions). 3(|-\u00d7+)5 \u235d Absolute value of the product of sum and difference 16 3(\u2308|-\u00d7+)5 \u235d Max residue with the product of sum and difference 4 They allow some rather neat and memorable ways to write short functions. Mean \u2190 +\u233f \u00f7 \u2262 \u235d The sum divided by the count Mean 3 1 4 1 3 (+,-) 5 \u235d Plus and minus ','(\u2260\u2286\u22a2)'some,text' \u235d Split on commas Note Small unnamed dfns and tacit functions expand your vocabulary. One of my favourites is the \"split by delimiter\" train (\u2260\u2286\u22a2) . It looks like a beat-up face kaomoji . A similar phrase which can take multiple delimiters can be found on aplcart.info .","title":"The Three Function Styles"},{"location":"Ufns/#traditional-functions","text":"Dyalog is a modern APL implementation. Since early APL implementations there has been a way of defining functions with a header line and named arguments and results. Since the introduction of dfns, functions of the original style are called traditional functions or tradfns . Mean \u2190 +\u233f\u00f7\u2262 \u235d A 3-train (fork) for the arithmetic mean Mean \u2190 {(+\u233f\u2375)\u00f7\u2262\u2375} \u235d A dfn for the arithmetic mean \u2207 m \u2190 Mean a \u235d A tradfn for the arithmetic mean m \u2190 (+\u233fa) \u00f7 \u2262a \u2207 Note Copy and paste everything between (and including) the two \u2207 del symbols into the session, and press Enter , to define a tradfn in your workspace. Using Shift+Enter with the cursor on a name will bring up an editor window for that named thing. A tradfn header reflects the calling syntax of the function. \u2207 {result}\u2190{optional}Tradfn argument;local1 [1] ;local2 \u235d Locals can be declared across multiple lines in the header [2] :If 0=\u2395NC'optional' [3] optional\u2190'no left argument' [4] :EndIf [5] local1\u2190'\u237a: ',optional [6] local2\u2190'\u2375: ',argument [7] global\u2190\u236a'TradFn last called with'local1 local2 [8] result\u2190\u236alocal1 local2 \u2207 Note The \u2207 del representation of the TradFn function above is the vector representation result of \u2395VR'TradFn' which can be directly input into the session. Try calling TradFn with one and two arguments. How can the result be made to display to the session? Inspect the variable global after calling TradFn with different arguments. Step through the function using Ctrl+Enter . Inspect \u2395NC'optional' when TradFn is called with one argument and when it is called with two arguments. Here is the smallest tradfn: \u2207 T \u2207 T is a function which takes no arguments, returns no results and has no effects. Results in {} curly braces are called shy results and do not print to the session by default, but can be passed to arguments. To ease debugging and write functions with predictable behaviour, it is generally best not to use shy results. Optional left arguments are a little awkward in tradfns. The dfn equivalent is a little nicer looking: {\u237a\u2190'default' \u22c4 \u237a,\u2375} .","title":"Traditional functions"},{"location":"Ufns/#name-scope-locals-and-globals","text":"The scope of a name describes the circumstances under which it is visible to code. For most intents and purposes, you just need to know about the difference between how local and global names are defined in the syntax, and how name shadowing works. By default, names assigned in tradfns are global. This is mostly for historical reasons. Names declared in the header - the arguments, results, and names preceded by semicolons - are localised. By default, names in a dfn are local to that dfn. This is the preferred default in most modern programming languages. If we define a name in the current namespace, that name is visible only within that namespace unless referred to by its full namespace path (e.g. #.nsref.var ). 'ns1'\u2395ns\u236c \u22c4 ns1.var\u21901 2 3 'ns2'\u2395ns\u236c \u22c4 \u2395cs ns2 \u2395\u2190var \u2395\u2190#.ns1.var Let us now define a dfn and a tradfn: \u2207 Dfn\u2190{ [1] var\u2190'lexical'\u2375 [2] } \u2207 \u2207 Tradfn arg [1] var\u2190'dynamic'arg \u2207 Note While the \u2207 del representation of dfns can be used to define dfns in the session, dfns in scripted namespaces must be defined without \u2207 dels. If we call each of these functions, Tradfn will modify var in the workspace, but Dfn will not: Dfn var var 1 2 3 Tradfn var var \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502dynamic\u25021 2 3\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 Experiment with these altered definitions: \u2207 Dfn\u2190{ [1] var\u2218\u2190'lexical'\u2375 [2] } \u2207 \u2207 Tradfn arg;var [1] var\u2190'dynamic'arg \u2207 In Tradfns, references to local names within a function are said to \" shadow \" the same names from outer scopes. Notice how the following definition of Tradfn fails. \u2207 Tradfn arg;var [1] var,\u2190'dynamic'arg \u2207 A similar dfn succeeds because, in dfns, modification will search namespaces in the local scope and then any parent scopes. \u2207 Dfn\u2190{ [1] var,\u2190'lexical'\u2375 [2] } \u2207 For completeness, here we will also mention \u2395SHADOW . It is used when names are dynamically created using \u234e , \u2395FX or \u2395FIX but need to be localised. However, it is best to use the function syntax to establish name scope in general. Further information can be found in the specialists section on shadowed names in Mastering Dyalog APL. The technical distinction between dfns and tradfns is that tradfns have dynamic scope whereas dfns have lexical scope . For further explanation of how this affects the use of dfns, see section 5.5.3 of Mastering Dyalog APL . For another excellent introduction to lexical scoping, I can recommend the page on lexical scoping in the BQN documentation (BQN is another language inspired by APL).","title":"Name scope, locals and globals"},{"location":"Ufns/#avoid-globals","text":"When possible, avoid using global variables. Pass parameters to functions as arguments unless this becomes very awkward. The use of global variables should be limited to state settings that affect the entire application, or tables containing databases that are shared globally. If you need global constants, it is a good idea to create them in a function in order to be able to use source code management / change tracking software. A function which uses globals is difficult, if not impossible, to run in parallel. If two copies of the function run in parallel and they update the global data, some kind of locking is required. Locking often defeats the potential benefits of parallel execution. Names should be localized unless they really really, really, really need to be global. An example of when to use globals is a switch which affects the entire application: \u2207 err\u2190Log msg [1] :If verbose [2] \u2395\u2190msg \u235d Display information to the user [3] :EndIf [4] PrintFile msg \u2207","title":"Avoid globals"},{"location":"Ufns/#nested-functions","text":"It is possible to define functions inside some other functions. Tacit functions can only include other user-defined functions by name Sort \u2190 {(\u2282\u234b\u2375)\u2337\u2375} CSI \u2190 Sort\u2365\u2395C \u235d Case-insensitive sort Dfns can contain tacit definitions and dfn definitions, as well as any named user-defined functions SortedMeans \u2190 { Sort \u2190 {(\u2282\u234b\u2375)\u2337\u2375} Mean \u2190 +\u233f\u00f71\u2308\u2262 Sort Mean\u00a8\u2375 } Tradfns can contain tacit definitions, dfn definitions and any named user-defined functions \u2207 result\u2190SortedMeans vectors;Mean;Sort [1] Sort\u2190{(\u2282\u234b\u2375)\u2337\u2375} [2] Mean\u2190+\u233f\u00f71\u2308\u2262 [3] result\u2190Sort Mean\u00a8vectors \u2207","title":"Nested functions"},{"location":"Ufns/#which-style-to-use","text":"While usage of different function styles varies throughout many applications, you might take inspiration from Ad\u00e1m's APL Style Guide , when writing brand new production code. When maintaining others' code, it is best to try to continue in the already established style.","title":"Which style to use?"},{"location":"Ufns/#dfns","text":"For medium sized functions and utilities. Nested dfns are fine, but never use multi-line dfns inline. MultiDfn\u2190{ \u235d A Dfn with nested in-line multi-line dfns (3{ \u235d These are confusing to read and trace through \u237a+2\u00d7\u2375 }\u237a){ x\u2190\u237a-4+\u2375 x-2\u00d7\u237a }3+\u2375 } Instead, give them names and then apply them. Named dfns should be multi-line so that they can be traced through, unless truly trivial. MultiDfn2\u2190{ \u235d The previous function rewritten more clearly y\u21903+2\u00d7\u237a x\u2190y-1+\u2375 x-2\u00d7y } Do not use a dfn instead of naming a variable. For example, instead of r\u2190{\u2375/\u236810\u2264\u2375}a,b write candidates\u2190a,b r\u2190candidates/\u236810\u2264candidates","title":"Dfns"},{"location":"Ufns/#tacit-functions","text":"Best as short, pure functions , performing some specific task such as data transformation. Trains and functions derived from functions and operators (e.g. +/ ) can be used inline if they are not too complex.","title":"Tacit functions"},{"location":"Ufns/#tradfns","text":"Best used as program control and for dealing with system interactions. The use of control structures can make procedural tasks easier to debug. For example, if an error occurs during a loop or iteration. \u00af5{i\u2190\u237a+\u2373\u2375 \u22c4 i\u00f7i-2}10 \u235d A single line function cannot be traced through Note Use Ctrl+Enter to step through a multiline function. You can then use Shift+Enter to edit the function during execution and Esc to save your changes to the function and continue execution. \u2207 r\u2190a MultiLineError o;i [1] :For i :In a+\u2373o [2] r\u2190i+3 [3] r\u00f7r-2 [4] :EndFor \u2207","title":"Tradfns"},{"location":"Ufns/#problem-set-10","text":"","title":"Problem set 10"},{"location":"Ufns/#which-style-again","text":"Which of the following function styles can have multiple lines? TradFns Dfns Tacit functions Which of the following function styles can be anonymous (unnamed)? Tradfns Dfns Tacit Think about which function style would be most appropriate in the following situations. Launching an application Applying a mathematical formula to an array of values A utility function to sort an array Reading and writing files Expressing the sum of two functions (f+g)(x) Downloading data from the internet GUI programming Checking if a function is a no-op for a particular array Defining a piecewise mathematical function","title":"Which style again?"},{"location":"Ufns/#choo-choo","text":"Translating functions Convert the following dfns into trains {\u2308/\u2262\u00a8\u2375} {1+\u237a-\u2375} {\u2228/\u237a\u220a\u2375} {(\u233d\u2375)\u2261\u2375} Convert the following trains into dfns (\u2308/-\u230a/) (+\u233f\u00f71\u2308\u2262) (\u22a2-|) (1\u2227\u22a2,\u00f7)","title":"Choo choo"},{"location":"Ufns/#marking-tests","text":"Way back in problem set 4 you wrote a dfn to convert test scores into letter values. You were led to produce some function or expression similar to the following: Grade\u2190{'FDCBA'[+/\u2375\u2218.>80 70 60 50 0]} Grade 95 65 92 77 This is an array-oriented solution to this problem. However, if a human was manually grading test scores, they might take one scored paper at a time and decide on which letter grade to write by reading each score. Procedural pseudocode : scores = 93,85,45,10,70,16,93,63,41,7,95,45,76 For each score in scores: If score is greater than 80: Write \"A\" Else If score is greater than 70: Write \"B\" Else If score is greater than 60: Write \"C\" Else If score is greater than 50: Write \"D\" Else Write \"F\" Control Structures in Dyalog are keywords beginning with a : colon. :If :OrIf :AndIf :ElseIf :Else :EndIf :For :In :EndFor :While :EndWhile :Repeat :Until :Return Translate the pseudocode above into a tradfn called Grade2 using control stuctures. Rewrite the Grade function again as either a dfn or a tradfn called Grade3 which uses \u237a\u2378\u2375 interval index. Use the ]runtime user command to compare the computation time for each of the three grading functions. ]runtime -c \"Grade 10\u00d7\u237310\" \"Grade2 10\u00d7\u237310\" \"Grade3 10\u00d7\u237310\"","title":"Marking Tests"},{"location":"Workspaces/","text":"Workspace basics We sure have made a lot of functions so far and we've typed many expressions into our REPL . There seem to be a few variables in our workspace as well. We should save them somewhere for later. What's a workspace? If you have been using Dyalog, the session log is the page with all of your input and output so far. You can scroll up the session log (with a mouse or using the Page Up key) and see everything you have done so far. A workspace is a collection of names. We can obtain some lists of names using system commands . )fns \u235d Functions )vars \u235d Variables (arrays) These commands have the special )COMMAND syntax, and are only used when interacting with the session. They return no result and cannot be used programmatically; they cannot be used in a function. What's in a workspace? ]Map See a diagram indicating the types of names in the current namespace. Also use the Workspace Explorer: go to Tools \u2192 Explorer in the Microsoft Windows IDE or View \u2192 Show Workspace Explorer in RIDE. ]Locate Search and replace strings (including function names, literal character vectors and comments) in functions, operators, namespaces and other objects. It does not search inside character array variables. You can also use Tools \u2192 Search in the Windows IDE. ]Peek Try an expression as if it was executed in a saved workspace without having to copy the contents of that workspace. ]peek dfns cal 2021 7 ]peek -? How big is a workspace? The data and code in the active workspace is limited to the maximum workspace size, or MAXWS ( maks-wuss ). The size of a .dws workspace file is usually much smaller than this. We can get the current value: \u2395\u21902\u2395NQ'.' 'GetEnvironment' 'MAXWS' The maximum workspace size can be set to a different value using the MAXWS configuration parameter . If you are using the Microsoft Windows IDE, you can go to Options \u2192 Configure \u2192 Workspace and set the maximum workspace size. In either case, the interpreter must be restarted for the change to take effect. The MAXWS setting is an adjustable software limitation, although there is also a hardware limitation: the amount of memory in the computer. Finally, you can see how much workspace is available with \u2395WA . System commands A table of system commands is provided in the online documentation. The session is sometimes used to refer to the interactive mode of operation (also known as calculator mode also known as immediate execution mode ), in contrast to under program control , which is when something happens as the result of a line in a program/function. For example: myvar \u2190 2\u00d7\u23733 \u235d Declare a variable in the session )erase myvar \u235d Use a system command to erase the variable If we try to use a system command inside a function, it won't work. \u235d The ]DInput user command lets us write mult-line dfns in the session ]dinput \u235d Alternatively, press Shift+Enter with the cursor | on a name MultiFn\u2190{ \u235d A multi-line dfn \u235d These statements are executed \"under program control\" \u2395\u21905+5 var \u2190 2+2 \u235d This variable only exists when this function is running )erase var \u235d This won't work } \u235d Now try to execute: MultiFn \u236c 10 VALUE ERROR: Undefined name: erase MultiFn[4] )erase var \u235d This won't work \u2227 Note Attempting to execute the above MultiFn function will cause the tracer to open by default. Simply press Esc to quit the suspended function and return to the session. System Functions Some quad-names are system variables , such as \u2395A , \u2395D and \u2395AV . Others are system functions , many of which are similar to system command counterparts. System Command System Function )SAVE /path/to/WorkspaceFile \u2395SAVE'/path/to/WorkspaceFile' )LOAD /path/to/WorkspaceFile \u2395LOAD'/path/to/WorkspaceFile' )ERASE name \u2395EX'name' Note \u2395SAVE will overwrite any existing workspace file without asking first. Use )SAVE when saving workspaces. In contrast to the system commands, which can only be used in the interactive session, system functions can be used in a function (A.K.A. under program control ). System functions are in-built functions with names of the form \u2395FUNCTION and do return a result. Some have shy results which can be used by subsequent functions, or printed to the session output with \u2395\u2190 ( quad-gets ). multifn\u2190{ \u235d These statements are executed \"under program control\" \u2395\u21905+5 var \u2190 2+2 \u235d This variable only exists when this function is running \u2395EX 'var' \u235d This will work, although it does not do anything useful in this dfn } The Name List \u2395NL function lists names according to their name class . \u2395NL 2 \u235d List variables as a text matrix \u2395NL 3 \u235d List functions \u2395NL-\u23739 \u235d List all names as a nested vector of character vectors \u2395CLEAR Prank your friends with the best function ever: BestFunctionEver\u2190{ _\u2190\u2395SAVE'/tmp/','_'@(' '\u2218=)\u2355\u2395TS \u2395CLEAR } \u2395OFF An event better function for pranks: BestFunctionEver\u2190{ _\u2190\u2395SAVE'/tmp/','_'@(' '\u2218=)\u2355\u2395TS \u2395OFF } \u2395OFF can also emit custom exit codes. Standard Dyalog exit codes are: 0: Successful exit from \u2395OFF , )OFF , )CONTINUE or graphical exit from the GUI 1: APL failed to start (for example: lack of memory, bad translate table in Classic) 2: APL received a SIGHUP or SIGTERM . 3: APL generated a syserror Saving and loading The example below shows how to save and load a workspace. ]cd /tmp )save MyFirstWS )clear )load MyFirstWS Uses of workspaces Distribution: For large applications, it will be inconvenient or undesirable to ship large collections of source files that are loaded at startup. Workspaces are often used as a mechanism for the distribution of packaged collections of code and data. Crash Analysis: When an application fails, it is often useful to save the workspace, complete with execution stack, code and data, for subsequent analysis and sometimes resumption of execution. Pausing work: In many ways, this is similar to crash analysis: sometimes you need to shut down your machine in the middle of things and resume later, but you don't want to be forced to start from scratch because you have created an interesting scenario with data in the workspace. Saving a workspace allows you to do this. Activities What is the rank of \u2395NL x for any scalar or vector x ? What is the rank of \u2395NL -x for any scalar or vector x ? Save Your Work Use ]cd to change to a directory on your machine where you would like to save your work Use )wsid WSName to change the name of your active workspace Use )save to save your workspace Note \u2395SAVE will overwrite any existing workspace file without asking first. Use )SAVE when saving workspaces.","title":"Workspace Basics"},{"location":"Workspaces/#workspace-basics","text":"We sure have made a lot of functions so far and we've typed many expressions into our REPL . There seem to be a few variables in our workspace as well. We should save them somewhere for later.","title":"Workspace basics"},{"location":"Workspaces/#whats-a-workspace","text":"If you have been using Dyalog, the session log is the page with all of your input and output so far. You can scroll up the session log (with a mouse or using the Page Up key) and see everything you have done so far. A workspace is a collection of names. We can obtain some lists of names using system commands . )fns \u235d Functions )vars \u235d Variables (arrays) These commands have the special )COMMAND syntax, and are only used when interacting with the session. They return no result and cannot be used programmatically; they cannot be used in a function.","title":"What's a workspace?"},{"location":"Workspaces/#whats-in-a-workspace","text":"]Map See a diagram indicating the types of names in the current namespace. Also use the Workspace Explorer: go to Tools \u2192 Explorer in the Microsoft Windows IDE or View \u2192 Show Workspace Explorer in RIDE. ]Locate Search and replace strings (including function names, literal character vectors and comments) in functions, operators, namespaces and other objects. It does not search inside character array variables. You can also use Tools \u2192 Search in the Windows IDE. ]Peek Try an expression as if it was executed in a saved workspace without having to copy the contents of that workspace. ]peek dfns cal 2021 7 ]peek -?","title":"What's in a workspace?"},{"location":"Workspaces/#how-big-is-a-workspace","text":"The data and code in the active workspace is limited to the maximum workspace size, or MAXWS ( maks-wuss ). The size of a .dws workspace file is usually much smaller than this. We can get the current value: \u2395\u21902\u2395NQ'.' 'GetEnvironment' 'MAXWS' The maximum workspace size can be set to a different value using the MAXWS configuration parameter . If you are using the Microsoft Windows IDE, you can go to Options \u2192 Configure \u2192 Workspace and set the maximum workspace size. In either case, the interpreter must be restarted for the change to take effect. The MAXWS setting is an adjustable software limitation, although there is also a hardware limitation: the amount of memory in the computer. Finally, you can see how much workspace is available with \u2395WA .","title":"How big is a workspace?"},{"location":"Workspaces/#system-commands","text":"A table of system commands is provided in the online documentation. The session is sometimes used to refer to the interactive mode of operation (also known as calculator mode also known as immediate execution mode ), in contrast to under program control , which is when something happens as the result of a line in a program/function. For example: myvar \u2190 2\u00d7\u23733 \u235d Declare a variable in the session )erase myvar \u235d Use a system command to erase the variable If we try to use a system command inside a function, it won't work. \u235d The ]DInput user command lets us write mult-line dfns in the session ]dinput \u235d Alternatively, press Shift+Enter with the cursor | on a name MultiFn\u2190{ \u235d A multi-line dfn \u235d These statements are executed \"under program control\" \u2395\u21905+5 var \u2190 2+2 \u235d This variable only exists when this function is running )erase var \u235d This won't work } \u235d Now try to execute: MultiFn \u236c 10 VALUE ERROR: Undefined name: erase MultiFn[4] )erase var \u235d This won't work \u2227 Note Attempting to execute the above MultiFn function will cause the tracer to open by default. Simply press Esc to quit the suspended function and return to the session.","title":"System commands"},{"location":"Workspaces/#system-functions","text":"Some quad-names are system variables , such as \u2395A , \u2395D and \u2395AV . Others are system functions , many of which are similar to system command counterparts. System Command System Function )SAVE /path/to/WorkspaceFile \u2395SAVE'/path/to/WorkspaceFile' )LOAD /path/to/WorkspaceFile \u2395LOAD'/path/to/WorkspaceFile' )ERASE name \u2395EX'name' Note \u2395SAVE will overwrite any existing workspace file without asking first. Use )SAVE when saving workspaces. In contrast to the system commands, which can only be used in the interactive session, system functions can be used in a function (A.K.A. under program control ). System functions are in-built functions with names of the form \u2395FUNCTION and do return a result. Some have shy results which can be used by subsequent functions, or printed to the session output with \u2395\u2190 ( quad-gets ). multifn\u2190{ \u235d These statements are executed \"under program control\" \u2395\u21905+5 var \u2190 2+2 \u235d This variable only exists when this function is running \u2395EX 'var' \u235d This will work, although it does not do anything useful in this dfn } The Name List \u2395NL function lists names according to their name class . \u2395NL 2 \u235d List variables as a text matrix \u2395NL 3 \u235d List functions \u2395NL-\u23739 \u235d List all names as a nested vector of character vectors","title":"System Functions"},{"location":"Workspaces/#clear","text":"Prank your friends with the best function ever: BestFunctionEver\u2190{ _\u2190\u2395SAVE'/tmp/','_'@(' '\u2218=)\u2355\u2395TS \u2395CLEAR }","title":"\u2395CLEAR"},{"location":"Workspaces/#off","text":"An event better function for pranks: BestFunctionEver\u2190{ _\u2190\u2395SAVE'/tmp/','_'@(' '\u2218=)\u2355\u2395TS \u2395OFF } \u2395OFF can also emit custom exit codes. Standard Dyalog exit codes are: 0: Successful exit from \u2395OFF , )OFF , )CONTINUE or graphical exit from the GUI 1: APL failed to start (for example: lack of memory, bad translate table in Classic) 2: APL received a SIGHUP or SIGTERM . 3: APL generated a syserror","title":"\u2395OFF"},{"location":"Workspaces/#saving-and-loading","text":"The example below shows how to save and load a workspace. ]cd /tmp )save MyFirstWS )clear )load MyFirstWS","title":"Saving and loading"},{"location":"Workspaces/#uses-of-workspaces","text":"Distribution: For large applications, it will be inconvenient or undesirable to ship large collections of source files that are loaded at startup. Workspaces are often used as a mechanism for the distribution of packaged collections of code and data. Crash Analysis: When an application fails, it is often useful to save the workspace, complete with execution stack, code and data, for subsequent analysis and sometimes resumption of execution. Pausing work: In many ways, this is similar to crash analysis: sometimes you need to shut down your machine in the middle of things and resume later, but you don't want to be forced to start from scratch because you have created an interesting scenario with data in the workspace. Saving a workspace allows you to do this.","title":"Uses of workspaces"},{"location":"Workspaces/#activities","text":"What is the rank of \u2395NL x for any scalar or vector x ? What is the rank of \u2395NL -x for any scalar or vector x ? Save Your Work Use ]cd to change to a directory on your machine where you would like to save your work Use )wsid WSName to change the name of your active workspace Use )save to save your workspace Note \u2395SAVE will overwrite any existing workspace file without asking first. Use )SAVE when saving workspaces.","title":"Activities"},{"location":"basic-syntax-and-arithmetic/","text":"Basic syntax Functions and arguments APL has two-argument, infix functions. These are called dyadic functions. 3 \u00d7 5 15 3 - 5 \u00af2 Some functions map between elements of their left and right argument arrays. It is easy to add lists of numbers together: 1 2 3 + 4 5 6 5 7 9 Negative numbers are written with a high minus \u00af to differentiate between negation ( -3 ) and literal negative numbers ( \u00af3 ). 1 2 3 - 1 0 \u00af1 0 2 4 There are also one-argument, prefix functions. These are called monadic functions. - 5 \u00af3 0 \u00af4 2 \u00af5 3 0 4 \u00af2 \u233d 1 2 3 4 5 5 4 3 2 1 Some symbols represent both a monadic and a dyadic function, but these are often closely related. As we will see later, even user-defined functions can be monadic, dyadic or even both (ambivalent). Singleton extension Dyadic functions can map between a single value and an array of values. 3 \u00d7 1 10 100 3 30 300 3 = 1 2 3 4 5 0 0 1 0 0 Try this: replace the functions in the previous two expressions with: max \u237a\u2308\u2375 min \u237a\u230a\u2375 less-than < While experimenting, you may cause a LENGTH ERROR : 1 2+3 4 5 LENGTH ERROR: Mismatched left and right argument shapes 1 2+3 4 5 \u2227 Functions such as + \u00d7 \u2308 apply between elements of two arrays of the same shape, or between one element and many if one of the arguments is a single value. However, if the arrays are of two different shapes, it is not clear how the function should be applied. Of course, you may want to apply a function between all combinations of elements of the left and right argument , but that will be addressed soon enough. Order of execution Expressions are executed from right to left. 10\u00d7\u23732+5 10 20 30 40 50 60 70 Show me step-by-step To start, there is a literal number 5: 5 5 Next, there is a plus + with a number 2 to its immediate left, so it is evaluated as two plus five: 2+5 7 Then the symbol iota \u2373 . To its left is another function, times \u00d7 , not a value. So the function is called monadically . The monadic form of \u2373 is the index generator , which generates an integer array of length defined by its right argument. \u23732+5 1 2 3 4 5 6 7 Lastly, another dyadic function, we multiply our list by ten: 10\u00d7\u23732+5 10 20 30 40 50 60 70 The expresssion above is \"ten times the indices from 1 to two plus five , or in short: \"ten times iota two plus five\". We can make it clearer using (superfluous) parentheses () . 10\u00d7(\u2373(2+5)) 10 20 30 40 50 60 70 Of course, we can change the order of execution using different parentheses. (10\u00d7\u23732)+5 16 17 Show me step-by-step Beginning from the right, there is a literal number 5: (10+\u23732)+5 5 Then there is a plus symbol + . Before we can decide if it is being called monadically or dyadically, we must look to the left. )+5 A right parenthesis. We must evaluate the contents of the parentheses to see if it is a function or a value. (10+\u23732) This expression evaluates to the list 11 12 . Since it is a value, it is used as the left argument to our plus function. (10+\u23732)+5 (11 12)+5 16 17 Infix (dyadic) functions have a short left scope and long right scope. This means that they take the result of everything to their right hand side as their right argument. If there is one, the left argument is the value to the immediate left. However, juxtaposed values form lists before any functions are applied. This is called stranding and lets us write very natural expressions, such as: 1 2 3 + 4 5 6 5 7 9 but this can lead to some surprises if we are not aware: 2 + 2 2 + 2 6 6 Show me step-by-step First, there is a literal number 2 2 2 Then there is a symbol + . What, if any, is the value to its immediate left? 2 2 + 2 It is a 2-element vector 2 2 . The plus function maps between these elements and the single number on the right: 2 2 + 2 4 4 Finally there is another addition. The overall evaluation looks like the following: 2 + 2 2 + 2 2 + 4 4 6 6 The reduction operator Adding a list of numbers could become very tedious... 1+2+3+4+5+6+7+8+9+10+11+12+13+14+15 120 The reduce operator F/ inserts the function F to its left between parts of the right argument array. +/1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 120 It is called reduce because it reduces the number of dimensions of its argument. In the example above, we have a vector (1 dimensional, list) argument and return a scalar (0 dimensional, single value) result. The index generator The index generator \u2373\u2375 generates integers up to the integer right argument \u2375 \u237310 1 2 3 4 5 6 7 8 9 10 So we can do an arithmetic sum as follows Traditional Mathematical Notation ( TMN ) APL \\(\\sum_{n=1}^N n\\) +/\u2373N What do these errors mean? While experimenting, you are very likely to come across these: \u2373\u00af4 DOMAIN ERROR \u2373\u00af4 \u2227 The DOMAIN ERROR means that APL cannot compute what you are asking for. In this case, it cannot generate indices up to a negative number. Negative numbers are outside the domain of the index generator function. How might you generate numbers up to negative four ? 1+ SYNTAX ERROR: Missing right argument 1+ \u2227 A SYNTAX ERROR means that the expression which you tried to execute does not make sense. In the case above, it is because functions always either take a single argument to their right or two arguments, one to the right and one to the left. Functions never take a single argument to their left. a VALUE ERROR: Undefined name: a a \u2227 A VALUE ERROR means that there is nothing associated with the name provided. We have not seen any named functions or variables yet; nothing has been assigned to the name a , so trying to use it in an expression is meaningless. Problem Set 1 The average daily temperatures, in degrees Celcius, for 7 days are stored in a variable t_allweek . t_allweek \u2190 11.7 8.6 9.7 14.2 6.7 11.8 9.2 Use APL to compute the follwing: The highest daily temperature The lowest daily temperature The range of (difference between the largest and the smallest) numbers in nums Each temperature rounded to the nearest whole number Answers \u2308/t_allweek 14.2 \u230a/t_allweek 6.7 (\u2308/t_allweek)-\u230a/t_allweek 7.5 You may have found the correct answer using the following expression: \u2308/t_allweek-\u230a/t_allweek 7.5 but this is less efficient because it does more subtractions than it needs to. Recall the right-to-left evaluation: \u2308/ t_allweek - \u230a/ t_allweek \u2308/ t_allweek - 6.7 \u2308/ 11.7 8.6 9.7 14.2 6.7 11.8 9.2 - 6.7 \u2308/ 5 1.9 3 7.5 0 5.1 2.5 7.5 if we use parentheses () to force APL to compute the maximum of the list before doing subtraction, we only do a single subtraction instead of 7: ( \u2308/t_allweek ) - \u230a/ t_allweek ( \u2308/t_allweek ) - 6.7 ( 14.2 ) - 6.7 7.5 To round to the nearest whole number, either add 0.5 and round down: \u230a0.5+t_allweek 12 9 10 14 7 12 9 or subtract 0.5 and round up: \u2308t_allweek-0.5 12 9 10 14 7 12 9 A Mathematical Notation Use APL to evaluate the following \\(\\prod_{n=1}^{12} n\\) (multiply together the first twelve integers) \\(\\sum_{n=1}^{17}n^2\\) (add together the first seventeen squared integers) \\(\\sum_{n=1}^{100}2n\\) (add together the first one hundred positive even integers) \\(\\sum_{n=1}^{100}2n-1\\) (add together the first one hundred odd integers) In TMN , the following equation equals 0 , why does the following return 70 ? 84 - 12 - 1 - 13 - 28 - 9 - 6 - 15 70 Answers \u00d7/\u237312 479001600 +/(\u237317)*2 1785 Without parentheses we get the sum of the first 289 integers, instead of the first 17 integers squared. TMN APL \\(\\sum_n^{17^2} n\\) +/\u237317*2 \\(\\sum_n^{17} n^2\\) +/(\u237317)*2 +/2\u00d7\u2373100 10100 We can either subtract 1 from the even numbers: +/(2\u00d7\u2373100)-1 10000 or we can add negative 1: +/\u00af1+2\u00d7\u2373100 10000 The high minus denotes a literal negative, whereas the hyphen indicates subtraction. Remember the right-to-left rule: functions take everything to their right, and the first thing to their left. We can add unnecessary parentheses to show how APL evaluates our expression. (84 - (12 - (1 - (13 - (28 - (9 - (6 - 15))))))) 70 Pyramid Schemes Sugar cubes are stacked in an arrangement as shown by Figure 1 . Figure 1. Stacked sugar cubes This stack has 4 layers and a total of 30 cubes. How many cubes are there in a similar stack with 467 layers ? Now consider the stack in Figure 2 . Figure 2. Differently stacked sugar cubes The arrangement in Figure 2 has 4 layers and 84 cubes. How many cubes are there in a similar stack with 812 layers ? Now look at Figure 3 . Figure 3. This is just a waste of sugar cubes by now... The stack in Figure 3 has 3 \"layers\" and 36 cubes in total. How many cubes are there in a similar stack with 68 \"layers\" ? Answers Each \\(n\\) th layer has \\(n^2\\) cubes. There are \\(34,058,310\\) cubes in a stack with \\(467\\) layers. +/(\u23734)*2 30 +/(\u2373467)*2 34058310 Each \\(n\\) th layer has \\((2n-1)^2\\) cubes. There are \\(713,849,500\\) cubes in a stack with \\(812\\) layers. +/(\u00af1+2\u00d7\u23734)*2 84 +/(\u00af1+2\u00d7\u2373812)*2 713849500 Each \\(n\\) th layer has \\(n^3\\) cubes. There are \\(5,503,716\\) cubes in a stack with \\(68\\) layers. +/(\u23733)*3 36 +/(\u237368)*3 5503716","title":"Basic syntax"},{"location":"basic-syntax-and-arithmetic/#basic-syntax","text":"","title":"Basic syntax"},{"location":"basic-syntax-and-arithmetic/#functions-and-arguments","text":"APL has two-argument, infix functions. These are called dyadic functions. 3 \u00d7 5 15 3 - 5 \u00af2 Some functions map between elements of their left and right argument arrays. It is easy to add lists of numbers together: 1 2 3 + 4 5 6 5 7 9 Negative numbers are written with a high minus \u00af to differentiate between negation ( -3 ) and literal negative numbers ( \u00af3 ). 1 2 3 - 1 0 \u00af1 0 2 4 There are also one-argument, prefix functions. These are called monadic functions. - 5 \u00af3 0 \u00af4 2 \u00af5 3 0 4 \u00af2 \u233d 1 2 3 4 5 5 4 3 2 1 Some symbols represent both a monadic and a dyadic function, but these are often closely related. As we will see later, even user-defined functions can be monadic, dyadic or even both (ambivalent).","title":"Functions and arguments"},{"location":"basic-syntax-and-arithmetic/#singleton-extension","text":"Dyadic functions can map between a single value and an array of values. 3 \u00d7 1 10 100 3 30 300 3 = 1 2 3 4 5 0 0 1 0 0 Try this: replace the functions in the previous two expressions with: max \u237a\u2308\u2375 min \u237a\u230a\u2375 less-than < While experimenting, you may cause a LENGTH ERROR : 1 2+3 4 5 LENGTH ERROR: Mismatched left and right argument shapes 1 2+3 4 5 \u2227 Functions such as + \u00d7 \u2308 apply between elements of two arrays of the same shape, or between one element and many if one of the arguments is a single value. However, if the arrays are of two different shapes, it is not clear how the function should be applied. Of course, you may want to apply a function between all combinations of elements of the left and right argument , but that will be addressed soon enough.","title":"Singleton extension"},{"location":"basic-syntax-and-arithmetic/#order-of-execution","text":"Expressions are executed from right to left. 10\u00d7\u23732+5 10 20 30 40 50 60 70 Show me step-by-step To start, there is a literal number 5: 5 5 Next, there is a plus + with a number 2 to its immediate left, so it is evaluated as two plus five: 2+5 7 Then the symbol iota \u2373 . To its left is another function, times \u00d7 , not a value. So the function is called monadically . The monadic form of \u2373 is the index generator , which generates an integer array of length defined by its right argument. \u23732+5 1 2 3 4 5 6 7 Lastly, another dyadic function, we multiply our list by ten: 10\u00d7\u23732+5 10 20 30 40 50 60 70 The expresssion above is \"ten times the indices from 1 to two plus five , or in short: \"ten times iota two plus five\". We can make it clearer using (superfluous) parentheses () . 10\u00d7(\u2373(2+5)) 10 20 30 40 50 60 70 Of course, we can change the order of execution using different parentheses. (10\u00d7\u23732)+5 16 17 Show me step-by-step Beginning from the right, there is a literal number 5: (10+\u23732)+5 5 Then there is a plus symbol + . Before we can decide if it is being called monadically or dyadically, we must look to the left. )+5 A right parenthesis. We must evaluate the contents of the parentheses to see if it is a function or a value. (10+\u23732) This expression evaluates to the list 11 12 . Since it is a value, it is used as the left argument to our plus function. (10+\u23732)+5 (11 12)+5 16 17 Infix (dyadic) functions have a short left scope and long right scope. This means that they take the result of everything to their right hand side as their right argument. If there is one, the left argument is the value to the immediate left. However, juxtaposed values form lists before any functions are applied. This is called stranding and lets us write very natural expressions, such as: 1 2 3 + 4 5 6 5 7 9 but this can lead to some surprises if we are not aware: 2 + 2 2 + 2 6 6 Show me step-by-step First, there is a literal number 2 2 2 Then there is a symbol + . What, if any, is the value to its immediate left? 2 2 + 2 It is a 2-element vector 2 2 . The plus function maps between these elements and the single number on the right: 2 2 + 2 4 4 Finally there is another addition. The overall evaluation looks like the following: 2 + 2 2 + 2 2 + 4 4 6 6","title":"Order of execution"},{"location":"basic-syntax-and-arithmetic/#the-reduction-operator","text":"Adding a list of numbers could become very tedious... 1+2+3+4+5+6+7+8+9+10+11+12+13+14+15 120 The reduce operator F/ inserts the function F to its left between parts of the right argument array. +/1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 120 It is called reduce because it reduces the number of dimensions of its argument. In the example above, we have a vector (1 dimensional, list) argument and return a scalar (0 dimensional, single value) result.","title":"The reduction operator"},{"location":"basic-syntax-and-arithmetic/#the-index-generator","text":"The index generator \u2373\u2375 generates integers up to the integer right argument \u2375 \u237310 1 2 3 4 5 6 7 8 9 10 So we can do an arithmetic sum as follows Traditional Mathematical Notation ( TMN ) APL \\(\\sum_{n=1}^N n\\) +/\u2373N","title":"The index generator"},{"location":"basic-syntax-and-arithmetic/#what-do-these-errors-mean","text":"While experimenting, you are very likely to come across these: \u2373\u00af4 DOMAIN ERROR \u2373\u00af4 \u2227 The DOMAIN ERROR means that APL cannot compute what you are asking for. In this case, it cannot generate indices up to a negative number. Negative numbers are outside the domain of the index generator function. How might you generate numbers up to negative four ? 1+ SYNTAX ERROR: Missing right argument 1+ \u2227 A SYNTAX ERROR means that the expression which you tried to execute does not make sense. In the case above, it is because functions always either take a single argument to their right or two arguments, one to the right and one to the left. Functions never take a single argument to their left. a VALUE ERROR: Undefined name: a a \u2227 A VALUE ERROR means that there is nothing associated with the name provided. We have not seen any named functions or variables yet; nothing has been assigned to the name a , so trying to use it in an expression is meaningless.","title":"What do these errors mean?"},{"location":"basic-syntax-and-arithmetic/#problem-set-1","text":"The average daily temperatures, in degrees Celcius, for 7 days are stored in a variable t_allweek . t_allweek \u2190 11.7 8.6 9.7 14.2 6.7 11.8 9.2 Use APL to compute the follwing: The highest daily temperature The lowest daily temperature The range of (difference between the largest and the smallest) numbers in nums Each temperature rounded to the nearest whole number Answers \u2308/t_allweek 14.2 \u230a/t_allweek 6.7 (\u2308/t_allweek)-\u230a/t_allweek 7.5 You may have found the correct answer using the following expression: \u2308/t_allweek-\u230a/t_allweek 7.5 but this is less efficient because it does more subtractions than it needs to. Recall the right-to-left evaluation: \u2308/ t_allweek - \u230a/ t_allweek \u2308/ t_allweek - 6.7 \u2308/ 11.7 8.6 9.7 14.2 6.7 11.8 9.2 - 6.7 \u2308/ 5 1.9 3 7.5 0 5.1 2.5 7.5 if we use parentheses () to force APL to compute the maximum of the list before doing subtraction, we only do a single subtraction instead of 7: ( \u2308/t_allweek ) - \u230a/ t_allweek ( \u2308/t_allweek ) - 6.7 ( 14.2 ) - 6.7 7.5 To round to the nearest whole number, either add 0.5 and round down: \u230a0.5+t_allweek 12 9 10 14 7 12 9 or subtract 0.5 and round up: \u2308t_allweek-0.5 12 9 10 14 7 12 9 A Mathematical Notation Use APL to evaluate the following \\(\\prod_{n=1}^{12} n\\) (multiply together the first twelve integers) \\(\\sum_{n=1}^{17}n^2\\) (add together the first seventeen squared integers) \\(\\sum_{n=1}^{100}2n\\) (add together the first one hundred positive even integers) \\(\\sum_{n=1}^{100}2n-1\\) (add together the first one hundred odd integers) In TMN , the following equation equals 0 , why does the following return 70 ? 84 - 12 - 1 - 13 - 28 - 9 - 6 - 15 70 Answers \u00d7/\u237312 479001600 +/(\u237317)*2 1785 Without parentheses we get the sum of the first 289 integers, instead of the first 17 integers squared. TMN APL \\(\\sum_n^{17^2} n\\) +/\u237317*2 \\(\\sum_n^{17} n^2\\) +/(\u237317)*2 +/2\u00d7\u2373100 10100 We can either subtract 1 from the even numbers: +/(2\u00d7\u2373100)-1 10000 or we can add negative 1: +/\u00af1+2\u00d7\u2373100 10000 The high minus denotes a literal negative, whereas the hyphen indicates subtraction. Remember the right-to-left rule: functions take everything to their right, and the first thing to their left. We can add unnecessary parentheses to show how APL evaluates our expression. (84 - (12 - (1 - (13 - (28 - (9 - (6 - 15))))))) 70 Pyramid Schemes Sugar cubes are stacked in an arrangement as shown by Figure 1 . Figure 1. Stacked sugar cubes This stack has 4 layers and a total of 30 cubes. How many cubes are there in a similar stack with 467 layers ? Now consider the stack in Figure 2 . Figure 2. Differently stacked sugar cubes The arrangement in Figure 2 has 4 layers and 84 cubes. How many cubes are there in a similar stack with 812 layers ? Now look at Figure 3 . Figure 3. This is just a waste of sugar cubes by now... The stack in Figure 3 has 3 \"layers\" and 36 cubes in total. How many cubes are there in a similar stack with 68 \"layers\" ? Answers Each \\(n\\) th layer has \\(n^2\\) cubes. There are \\(34,058,310\\) cubes in a stack with \\(467\\) layers. +/(\u23734)*2 30 +/(\u2373467)*2 34058310 Each \\(n\\) th layer has \\((2n-1)^2\\) cubes. There are \\(713,849,500\\) cubes in a stack with \\(812\\) layers. +/(\u00af1+2\u00d7\u23734)*2 84 +/(\u00af1+2\u00d7\u2373812)*2 713849500 Each \\(n\\) th layer has \\(n^3\\) cubes. There are \\(5,503,716\\) cubes in a stack with \\(68\\) layers. +/(\u23733)*3 36 +/(\u237368)*3 5503716","title":"Problem Set 1"}]}